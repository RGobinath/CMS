@model TIPS.Entities.TransportEntities.InsuranceBulkDetails
@{
    ViewBag.Title = "InsuranceBulkEntry";
    Layout = "~/Views/Shared/NewMaster.cshtml";
}
<script type="text/javascript">
    $(document).ready(function () {
        var Id = $("#Id").val();
        $("#VehicleSearch").button({ icons: { primary: "ui-icon-search"} });
        $("#VehicleSearch").click(function () {
            
            Id = $("#Id").val();
            if (Id == 0) {
                ErrMsg("Please Save");
                return false;
            }
            var SaveUrl = '@Url.Content("~/Transport/AddInsuranceList/")';
            var reloadGridUrl = '@Url.Content("~/Transport/InsuranceListBulkEntryJqGrid")?RefId=';
            var GridId = "InsuranceList";

            LoadPopupDynamicaly("/Transport/VehicleSubTypeMaster?SaveUrl=" + SaveUrl + '&reloadGridUrl=' + reloadGridUrl + '&GridId=' + GridId, $('#DivVehicleSearch'),
                    function () {
                        LoadSetGridParam($('#VehicleSubTypeMasterList'), "/Transport/VehicleSubTypeMasterJqGrid")
                    }, "", 1000);
        });

        jQuery("#InsuranceList").jqGrid({
            url: '@Url.Content("~/Transport/InsuranceListBulkEntryJqGrid")?RefId=' + Id,
            datatype: 'json',
            mtype: 'GET',
            colNames: ['Id', 'RefId', 'Vehicle Id', 'Vehicle Name', 'Vehicle No', 'Insurance Date', 'Next Insurance Date', 'Insurance Provider', 'Insurance Declared Value',  'Created By', 'Created Date', ''],
            colModel: [
            //if any column added need to check formateadorLink
             {name: 'Id', index: 'Id', hidden: true, key: true },
             { name: 'RefId', width: 30, index: 'RefId', hidden: true },
             { name: 'VehicleId', width: 30, index: 'VehicleId', hidden: true },
             { name: 'Type', index: 'Type' },
             { name: 'VehicleNo', index: 'VehicleNo' },
             { name: 'InsuranceDate', index: 'InsuranceDate', width: 170, editable: true,
                 editoptions: { dataInit: function (el) {
                     setTimeout(function () {
                         $(el).datepicker({
                             dateFormat: "dd/mm/yy", buttonImage: "../../Images/date.gif", buttonImageOnly: true,
                             changeMonth: true,
                             // timeFormat: 'hh:mm:ss',
                             autowidth: true,
                             changeYear: true
                             // minDate: '+0d'
                         }).attr('readonly', 'readonly');
                     }, 200);
                 }
                 }
             },
            { name: 'NextInsuranceDate', index: 'NextInsuranceDate', width: 170, editable: true,
                editoptions: { dataInit: function (el) {
                    setTimeout(function () {
                        $(el).datepicker({
                            dateFormat: "dd/mm/yy", buttonImage: "../../Images/date.gif", buttonImageOnly: true,
                            changeMonth: true,
                            // timeFormat: 'hh:mm:ss',
                            autowidth: true,
                            changeYear: true
                            // minDate: '+0d'
                        }).attr('readonly', 'readonly');
                    }, 200);
                }
                }
            },
             { name: 'InsuranceProvider', index: 'InsuranceProvider', editable: true },
             { name: 'InsuranceDeclaredValue', index: 'InsuranceDeclaredValue', editable: true },
//             { name: 'ValidityFromDate', index: 'ValidityFromDate', width: 170, editable: true,
//                 editoptions: { dataInit: function (el) {
//                     setTimeout(function () {
//                         $(el).datepicker({
//                             dateFormat: "dd/mm/yy", buttonImage: "../../Images/date.gif", buttonImageOnly: true,
//                             changeMonth: true,
//                             // timeFormat: 'hh:mm:ss',
//                             autowidth: true,
//                             changeYear: true
//                             // minDate: '+0d'
//                         }).attr('readonly', 'readonly');
//                     }, 200);
//                 }
//                 }
//             },
//             { name: 'ValidityToDate', index: 'ValidityToDate', width: 170, editable: true,
//                 editoptions: { dataInit: function (el) {
//                     setTimeout(function () {
//                         $(el).datepicker({
//                             dateFormat: "dd/mm/yy", buttonImage: "../../Images/date.gif", buttonImageOnly: true,
//                             changeMonth: true,
//                             // timeFormat: 'hh:mm:ss',
//                             autowidth: true,
//                             changeYear: true
//                             // minDate: '+0d'
//                         }).attr('readonly', 'readonly');
//                     }, 200);
//                 }
//                 }
//             },
              { name: 'CreatedBy', index: 'CreatedBy' },
             { name: 'CreatedDate', index: 'CreatedDate' },

             { name: 'Delete', index: 'Delete', width: 30, align: "center", formatter: frmtrDel }
             ],
            pager: '#InsuranceListPager',
            rowNum: '100',
            rowList: [5, 10, 20, 50, 100, 150, 200],
            sortname: 'Id',
            sortorder: 'Asc',
            height: '230',
            width: 1225,
            shrinktofit: true,
            viewrecords: true,
            caption: 'Fitness Certificate List',
            gridComplete: function () {
                var rdata = $("#InsuranceList").getRowData();
                // alert(rdata.length);
                if (rdata.length > 0) {
                    $('.T1CompDel').click(function () { DeleteComponentDtls($(this).attr('rowid')); });
                }
            },
            loadComplete: function () {
                var $this = $(this), rows = this.rows, l = rows.length, i, row;
                $(this).hide();
                for (i = 1; i < l; i++) {
                    row = rows[i];
                    if ($(row).hasClass("jqgrow")) {
                        $this.jqGrid('editRow', row.id);
                    }
                }
                $(this).show();
            }
            // forceFit: true,
            //  multiselect: true
        });
        $("#InsuranceList").navGrid('#InsuranceListPager', { add: false, edit: false, del: false, search: false, refresh: false });
    });

    function frmtrDel(cellvalue, options, rowdata) {
        var delBtn = "";
        delBtn = "<span id='T1btnDel_" + options.rowId + "'class='ui-icon ui-icon-trash T1CompDel' rowid='" + options.rowId + "' title='Delete'></span>";
        return delBtn;
    }

    function DeleteComponentDtls(id) {

        if (confirm("Are you sure you want to delete this item?")) {
            DeleteComponentIds(
                    '/Transport/DeleteInsuranceById?Id=' + id, //delURL, 
                    '/Transport/InsuranceListBulkEntryJqGrid?RefId=' + $('#Id').val(), //reloadURL, 
                    $("#InsuranceList") //GridId, 
                    );
        }
    }

    function DeleteComponentIds(delURL, reloadURL, GridId) {
        $.ajax({
            url: delURL,
            type: 'POST',
            dataType: 'json',
            traditional: true,
            success: function (data) {
                LoadSetGridParam(GridId, reloadURL);
            },
            loadError: function (xhr, status, error) {
                msgError = $.parseJSON(xhr.responseText).Message;
                ErrMsg(msgError, function () { });
            }
        });
    }

    function ValidateAndSave() {
        
        var RowList;
        var selectedData;
        var DLst = '';
        RowList = $('#InsuranceList').getDataIDs();
        Id = $("#Id").val();

        for (var i = 0, list = RowList.length; i < list; i++) {
            var selectedId = RowList[i];
            selectedData = $('#InsuranceList').jqGrid('getRowData', selectedId);

            var InsuranceDate = $("#" + selectedId + "_InsuranceDate").val();
            var NextInsuranceDate = $("#" + selectedId + "_NextInsuranceDate").val();
//            var ValidityFromDate = $("#" + selectedId + "_ValidityFromDate").val();
//            var ValidityToDate = $("#" + selectedId + "_ValidityToDate").val();

            var value = InsuranceDate.split("/");
            var dd = value[0];
            var mm = value[1];
            var yy = value[2];

            var value1 = NextInsuranceDate.split("/");
            var dd1 = value1[0];
            var mm1 = value1[1];
            var yy1 = value1[2];

//            var value2 = ValidityFromDate.split("/");
//            var dd2 = value2[0];
//            var mm2 = value2[1];
//            var yy2 = value2[2];

//            var value3 = ValidityToDate.split("/");
//            var dd3 = value3[0];
//            var mm3 = value3[1];
//            var yy3 = value3[2];

            var resultInsuranceDate = mm + "/" + dd + "/" + yy;
            var resultNextInsuranceDate = mm1 + "/" + dd1 + "/" + yy1;
//            var resultValidityFromDate = mm2 + "/" + dd2 + "/" + yy2;
//            var resultValidityToDate = mm3 + "/" + dd3 + "/" + yy3;

            DLst += "&[" + i + "].Id=" + selectedData.Id
                    + "&[" + i + "].RefId=" + selectedData.RefId
                    + "&[" + i + "].VehicleId=" + encodeURIComponent(selectedData.VehicleId)
                    + "&[" + i + "].Type=" + selectedData.Type
                    + "&[" + i + "].VehicleNo=" + encodeURIComponent(selectedData.VehicleNo)
                    + "&[" + i + "].InsuranceDate=" + resultInsuranceDate
                    + "&[" + i + "].NextInsuranceDate=" + resultNextInsuranceDate
//                    + "&[" + i + "].ValidityFromDate=" + resultValidityFromDate
//                    + "&[" + i + "].ValidityToDate=" + resultValidityToDate
                    + "&[" + i + "].InsuranceProvider=" + $("#" + selectedId + "_InsuranceProvider").val()
                    + "&[" + i + "].InsuranceDeclaredValue=" + $("#" + selectedId + "_InsuranceDeclaredValue").val()
                    + "&[" + i + "].CreatedBy=" + selectedData.CreatedBy
                    + "&[" + i + "].CreatedDate=" + selectedData.CreatedDate
        }
        $.ajax({
            url: '@Url.Content("~/Transport/AddInsuranceList/")',
            type: 'POST',
            dataType: 'json',
            data: DLst,
            success: function (data) {
                Id = $("#Id").val();
                // idsOfSelectedRows = [''];
                $("#InsuranceList").setGridParam({ url: '@Url.Content("~/Transport/InsuranceListBulkEntryJqGrid")?RefId=' + Id }).trigger("reloadGrid");
            }
        });
    }

</script>
@using (Html.BeginForm("InsuranceBulkEntry", "Transport", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <table class="WithBorderOnly" width="100%">
        <tr class="PanelHeading">
            <td colspan="6" class="PanelHeading">
                Basic Details
            </td>
        </tr>
        <tr>
            <td width="15%">
                <label class="lblheader">
                    Ref Number</label>
            </td>
            <td width="15%">
                <label class="lblheader">
                    Procesed By</label>
            </td>
            <td width="15%">
                <label class="lblheader">
                    Campus</label>
            </td>
            <td width="15%">
                <label class="lblheader">
                    User Role</label>
            </td>
            <td width="15%">
                <label class="lblheader">
                    Status</label>
            </td>
        </tr>
        <tr>
            <td>
                @Model.RefNo
                @Html.HiddenFor(m => m.RefNo)
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.CreatedDate)
            </td>
            <td>@Model.ProcessedBy
                @Html.HiddenFor(m => m.ProcessedBy)
            </td>
            <td>@Model.Campus
                @Html.HiddenFor(m => m.Campus)
            </td>
            <td>
                @Model.UserRole
                @Html.HiddenFor(m => m.UserRole)
            </td>
            <td>
                @Model.Status
                @Html.HiddenFor(m => m.Status)
            </td>
        </tr>
        <tr>
            <td width="15%">
                <label class="lblheader">
                    Description</label>
            </td>
        </tr>
        <tr>
            <td width="20%">
                @Html.TextAreaFor(m => m.Description, new { id = "txtDescription", rows = 2, cols = 28, @class = "CSSTextArea" })
                <span style="color: Red">*</span>
                @Html.HiddenFor(model => model.Description)
            </td>
            <td>
                <input type="submit" id="btnSubmit" value="Save" />
            </td>
            <td>
                <label class="lblheader">
                    Choose Vehicles :</label>
                <a id="VehicleSearch">..</a>
            </td>
        </tr>
    </table>
    <table id="InsuranceList" class="InnerTable" width="100%">
    </table>
    <div id="InsuranceListPager">
    </div>
    <table>
        <tr>
            <td>
                <input type="button" id="btnUpdate" name="NameUpdate" value="Update" onclick="ValidateAndSave()" />
                <input type="button" id="btnFinish" name="NameFinish" value="Complete" onclick="Complete()" />
                <input type="button" id="btnBack" value="Back to Inbox" />
            </td>
        </tr>
    </table>
    <div id="DivVehicleSearch">
    </div>
}
