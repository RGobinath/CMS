using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Web.UI;
using System.Web.UI.WebControls;
using CMS.Controllers.PDFGeneration;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using TIPS.Entities;
using TIPS.Entities.AdmissionEntities;
using TIPS.Entities.Assess;
using TIPS.Entities.Assess.ReportCardClasses;
using TIPS.Service;
using TIPS.ServiceContract;

namespace CMS.Controllers
{
    public class Assess360Controller : PdfViewController
    {
        Assess360Service a360Obj = new Assess360Service();
        AdmissionManagementService admsvc = new AdmissionManagementService();
        UserService us = new UserService();
        string PolicyName = "Assess360Policy";
        MastersService ms = new MastersService();
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult Assess360Inbox()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                {
                    return RedirectToAction("LogOff", "Account");
                }
                MastersService ms = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                if (CampusMaster != null && CampusMaster.Count > 0)
                {
                    ViewBag.CampusMaster = CampusMaster.FirstOrDefault().Value;
                }
                else
                {
                    ViewBag.CampusMaster = string.Empty;
                }

                ViewBag.lgdUserId = (Userobj.UserId != null) ? Userobj.UserId : "";
                ViewBag.lgdUserName = (Userobj.UserName != null) ? Userobj.UserName : "";
                ViewBag.lgdInUserType = (Userobj.UserType != null) ? Userobj.UserType : "";
                //  Hashtable ht = (Hashtable)Session["A360Searched"];
                ViewBag.A360Searched = Session["A360Searched"];
                #region BreadCrumb
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                #endregion
                return View();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
            finally
            { }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <returns></returns>
        public ActionResult GetAssess360Inbox(int page, int rows, string sidx, string sord, string RequestNo, string Name, string Campus, string Section, string Grade)
        {
            try
            {
                var usrcmp = Session["UserCampus"] as IEnumerable<string>;
                string[] str = new string[usrcmp.ToList().Count];
                int i = 0;
                foreach (var var in usrcmp)
                {
                    str[i] = var;
                    i++;
                }
                Dictionary<string, object> criteria = new Dictionary<string, object>(); string colName = string.Empty; string[] values = new string[1];
                if (!string.IsNullOrWhiteSpace(RequestNo)) { criteria.Add("RequestNo", RequestNo); }
                if (!string.IsNullOrWhiteSpace(Name)) { criteria.Add("Name", Name); }
                if (usrcmp.Count() != 0)
                {
                    if (usrcmp.First() != null)            // to check if the usrcmp obj is null or with data
                    {
                        if (!string.IsNullOrWhiteSpace(Campus) && Campus != "Select") { criteria.Add("Campus", Campus); }
                        else { criteria.Add("Campus", str); }
                    }
                }

                if (!string.IsNullOrWhiteSpace(Section) && Section != "Select") { criteria.Add("Section", Section); }
                if (!string.IsNullOrWhiteSpace(Grade) && Grade != "Select")
                {
                    colName = "Grade";
                    values[0] = Grade;
                }
                sord = sord == "desc" ? "Desc" : "Asc";
                DateTime DateNow = DateTime.Now;
                if (Grade == "IX" || Grade == "X")
                {
                    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                }
                else
                {
                    if (DateNow.Month > 5)
                    {
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    }
                    else
                    {
                        criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                    }
                }
                criteria.Add("IsActive", true);
                Dictionary<long, IList<Assess360>> dcnAssesstLst = a360Obj.GetAssess360ListWithPagingAndCriteriaWithAlias(page - 1, rows, sidx, sord, colName, values, criteria, null);
                if (dcnAssesstLst != null && dcnAssesstLst.Count > 0)
                {
                    IList<Assess360> lstAsssessCompnt = dcnAssesstLst.FirstOrDefault().Value;
                    long totalRecords = dcnAssesstLst.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in lstAsssessCompnt
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RequestNo,                        //inbox secrch Field
                            items.AcademicYear,
                            items.Campus,   //inbox secrch Field
                            items.IdNo,
                            items.Name+" "+items.Initial,          //inbox secrch Field
                            items.Section,       //inbox secrch Field
                            items.Grade,         //inbox secrch Field
                            items.ConsolidatedMarks,
                            items.Status,
                            items.CreatedBy!=null?us.GetUserNameByUserId(items.CreatedBy):"",
                            items.DateCreated!=null?items.DateCreated.Value.ToString("dd-MMM-yyyy"):"",
                            items.StudentId.ToString(),
                            items.CreatedBy
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, PolicyName); }
            finally
            { }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        //[IsValidURLRequest, HandleError(ExceptionType = typeof(Exception), View = "ErrorView")]
        public ActionResult Assess360(long? Id)
        {
            try
            {
                MastersService ms = new MastersService();
                UserService us = new UserService();
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null || (Userobj != null && Userobj.UserId == null))
                { return RedirectToAction("LogOff", "Account"); }

                string loggedInUserId = Userobj.UserId;//(Session["UserId"] == null) ? "" : Session["UserId"].ToString();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Assess360 objAssess360 = new Assess360();
                if (Id > 0)
                {
                    Assess360Service assSrv = new Assess360Service();
                    objAssess360 = assSrv.GetAssess360ById(Id ?? 0);
                    objAssess360.CreatedUserName = us.GetUserNameByUserId(objAssess360.CreatedBy);
                }
                else
                {
                    objAssess360.DateCreated = DateTime.Now;
                    objAssess360.CreatedBy = loggedInUserId;
                    objAssess360.UserRole = "360";//GetRollCodeByUserId(loggedInUserId);
                    objAssess360.CreatedUserName = Userobj.UserName;
                }

                string loggedInUserName = (Userobj.UserName != null) ? Userobj.UserName : "";
                string loggedInUserType = (Userobj.UserType != null) ? Userobj.UserType : "";

                Dictionary<long, IList<DocumentTypeMaster>> DocumentTypeMaster = ms.GetDocumentTypeMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                if (DocumentTypeMaster != null && DocumentTypeMaster.Count > 0)
                {
                    ViewBag.docTypes = DocumentTypeMaster.FirstOrDefault().Value;
                }
                else { ViewBag.docTypes = string.Empty; }

                ViewBag.loggedInUserId = loggedInUserId;
                ViewBag.loggedInUserType = loggedInUserType;
                ViewBag.loggedInUserName = string.IsNullOrWhiteSpace(loggedInUserName) ? loggedInUserId : loggedInUserName;
                return View(objAssess360);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
            finally
            { }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objAssess360"></param>
        /// <returns></returns>
        public ActionResult SaveAssess360(Assess360 objAssess360)
        {
            try
            {
                Assess360Service assSrvs = new Assess360Service();
                objAssess360.IsActive = true;
                string Assess360ReqNo = assSrvs.SaveOrUpdateAssess360RtnString(objAssess360);
                return Json(Assess360ReqNo, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, PolicyName); }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objAssess360Component"></param>
        /// <returns></returns>
        public long SaveOrUpdateAssess360Component(Assess360Component objAssess360Component, string StudentName, long StudentId)
        {
            try
            {
                Assess360Service assSrvs = new Assess360Service();
                if (objAssess360Component.Id <= 0) { objAssess360Component.DateCreated = DateTime.Now; }
                else { objAssess360Component.DateModified = DateTime.Now; }
                objAssess360Component.AssignmentName = "" + objAssess360Component.AssignmentName;
                long ComponentId = assSrvs.SaveOrUpdateAssess360Component(objAssess360Component);
                if (ComponentId > 0)
                {
                    if (objAssess360Component.AssessCompGroup == 1 || objAssess360Component.AssessCompGroup == 2)
                    {
                        SendEmailToParentOfAStudent(objAssess360Component.GroupName, objAssess360Component.Mark.ToString(), StudentName, StudentId, objAssess360Component.IsCredit ?? false, objAssess360Component.AssessCompGroup);
                    }
                }
                return ComponentId;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
            finally { }
        }

        #region "Save Bulk Component"
        /// <summary>
        /// 
        /// </summary>
        /// <param name="page"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="campus"></param>
        /// <param name="grade"></param>
        /// <param name="section"></param>
        /// <param name="IncidentDate"></param>
        /// <param name="AssessCompGroup"></param>
        /// <param name="AssignmentName"></param>
        /// <param name="EnteredBy"></param>
        /// <param name="GroupName"></param>
        /// <param name="Staff"></param>
        /// <param name="Subject"></param>
        /// <returns></returns>
        public ActionResult GetBulkAssess360Inbox(string ExportType, int? page, int? rows, string sidx, string sord, string campus, string grade, string section, string IncidentDate, int AssessCompGroupId, string AssignmentName, string Staff, string EnteredBy, string GroupName, string Subject, string totalmks, string semterm)
        {
            try
            {
                page = 0;
                Session["IncidentDate"] = IncidentDate;
                Session["AssessCompGroupId"] = AssessCompGroupId;
                Session["AssignmentName"] = AssignmentName;
                Session["EnteredBy"] = EnteredBy;
                Session["GroupName"] = GroupName;
                Session["Staff"] = Staff;
                Session["Subject"] = Subject;
                Session["totalmks"] = totalmks;
                if (!string.IsNullOrWhiteSpace(semterm) && semterm != "Select")
                {
                    Session["semterm"] = semterm;
                }
                sord = sord == "desc" ? "Desc" : "Asc";
                IList<Assess360BulkInsert> lstAsssessCompnt = GetAssess360BulkInsertListWithPagingAndCriteriaWithAlias(campus, grade, section, IncidentDate, AssessCompGroupId, AssignmentName, EnteredBy, GroupName, Staff, Subject, sidx, sord, semterm);
                if (lstAsssessCompnt != null && lstAsssessCompnt.Count > 0)
                {
                    IEnumerable<Assess360BulkInsert> ad1 = from cust in lstAsssessCompnt
                                                           where cust.MarksOutOff != null
                                                           select cust;
                    if (ad1.Count() > 0) { Session["totalmks"] = ad1.First().MarksOutOff.ToString(); }

                    if (lstAsssessCompnt != null && lstAsssessCompnt.Count > 0)
                    {
                        Assess360BulkInsert abi = new Assess360BulkInsert();

                        abi.Staff = Staff;
                        abi.AssessmentType = GroupName;
                        abi.Subject = Subject;
                        abi.IncidentDateString = IncidentDate;
                        abi.AssignmentName = AssignmentName;

                        if (ExportType == "Excel")
                        {
                            string headerTable = @"<Table cellspacing=5 cellpadding=5><tr><td colspan='8' align='center' style='font-size: large;'>The Indian Public School</td></tr>";
                            // headerTable = headerTable + "<tr><td colspan='8'></td></tr>";
                            headerTable = headerTable + "<tr><td colspan='8' align='center' style='font-size: large;'>Assess 360 Bulk Entry</td></tr>";
                            headerTable = headerTable + "<tr><td width=15><b>Staff</b></td><td width=15><b>Assessment Type</b></td><td width=15><b>Subject</b></td><td width=15><b>Assignment Date</b></td><td width=15><b>Assignment Name</b></td>";
                            headerTable = headerTable + "<tr><td>" + abi.Staff + "</td><td>" + abi.AssessmentType + "</td><td>" + abi.Subject + "</td><td>" + abi.IncidentDateString + "</td><td>" + abi.AssignmentName + "</td></tr></Table></br>";
                            var List = lstAsssessCompnt.ToList();
                            ExptToXLAssessBulkEntry(List, "Assess360BulkList", (items => new
                            {
                                items.Id,
                                items.RequestNo,                        //inbox secrch Field
                                items.AcademicYear,
                                items.Campus,   //inbox secrch Field
                                items.IdNo,
                                items.Name,          //inbox secrch Field
                                items.Section,       //inbox secrch Field
                                items.Grade,
                                ObtainedMarks = items.Mark.ToString(),
                                TotalMarks = totalmks,//inbox secrch Field
                                DateCreated = items.DateCreated != null ? items.DateCreated.Value.ToString("dd/MM/yyyy") : ""
                            }), headerTable);
                            return new EmptyResult();
                        }
                        else if (ExportType == "PDF")
                        {
                            string[] TblHeaders = new string[] { "Id", "Request No", "Academic Year", "Campus", "IdNo", "Name", "Section", "Grade", "Obtained Marks", "Total Marks", "Date Created" };
                            float[] widths = new float[] { 60f, 80f, 70f, 70f, 60f, 95f, 40f, 50f, 100f, 80f, 110f };
                            var ass = (from a in lstAsssessCompnt
                                       select new { a.Id, a.RequestNo, a.AcademicYear, a.Campus, a.IdNo, a.Name, a.Section, a.Grade, a.Mark, totalmks, a.DateCreated }).ToList();
                            DataTable dt = ListToDataTable(ass);

                            ExportToPDF_Assess360BulkEntry("Assess360BulkEntry", TblHeaders, widths, dt, abi);
                        }
                        else
                        {
                            long totalRecords = lstAsssessCompnt.Count;
                            int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                            var jsonData = new
                            {
                                total = totalPages,
                                page = page,
                                records = totalRecords,
                                rows = (from items in lstAsssessCompnt
                                        select new
                                        {
                                            i = items.Id,
                                            cell = new string[]{ 
                            items.Id.ToString(),
                            items.RequestNo,                        //inbox secrch Field
                            items.AcademicYear,
                            items.Campus,   //inbox secrch Field
                            items.IdNo,
                            items.Name,          //inbox secrch Field
                            items.Section,       //inbox secrch Field
                            items.Grade,         //inbox secrch Field
                            items.ConsolidatedMarks,
                            items.DateCreated!=null?items.DateCreated.Value.ToString("dd-MMM-yyyy HH:mm"):"",
                            //items.Semester,
                            items.A360CompId.ToString(),
                            items.Mark.ToString(),
                            Session["totalmks"].ToString()
                       }
                                        }).OrderBy(x => x.cell[5])
                            };
                            return Json(jsonData, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else { return Json(null, JsonRequestBehavior.AllowGet); }
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, PolicyName); }
            finally
            { }
        }

        public void ExptToXLAssessBulkEntry<T, TResult>(IList<T> stuList, string filename, Func<T, TResult> selector, string HeaderTable)
        {
            Response.ClearContent();
            Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".xls");
            Response.ContentType = "application/vnd.ms-excel";
            System.IO.StringWriter stw = new System.IO.StringWriter();
            HtmlTextWriter htextw = new HtmlTextWriter(stw);
            DataGrid dg = new DataGrid();
            dg.HeaderStyle.BackColor = System.Drawing.Color.FromName("#B6B6B6");
            dg.HeaderStyle.Font.Bold = true;
            dg.HeaderStyle.ForeColor = System.Drawing.Color.White;
            dg.DataSource = stuList.Select(selector);
            dg.DataBind();
            dg.RenderControl(htextw);
            Response.Write(HeaderTable);
            Response.Write(stw.ToString());
            Response.End();
        }
        public IList<Assess360BulkInsert> GetAssess360BulkInsertListWithPagingAndCriteriaWithAlias(string campus, string grade, string section, string IncidentDate, int AssessCompGroupId, string AssignmentName, string EnteredBy, string GroupName, string Staff, string Subject, string sidx, string sord, string semester)
        {
            if (string.IsNullOrEmpty(campus) || string.IsNullOrEmpty(grade) || string.IsNullOrEmpty(section) || AssessCompGroupId == 0 || string.IsNullOrEmpty(AssignmentName) || string.IsNullOrEmpty(Subject))
            {
                return null;
            }
            Assess360Service target = new Assess360Service(); // TODO: Initialize to an appropriate value
            string name = "Grade"; // TODO: Initialize to an appropriate value
            string[] values = new string[1] { grade };
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            criteria.Add("Campus", campus);
            criteria.Add("Section", section);
            string[] alias = null; // TODO: Initialize to an appropriate value
            Dictionary<long, IList<Assess360>> actual;
            DateTime DateNow = DateTime.Now; string acaYear = string.Empty;
            if (grade == "IX" || grade == "X")
            {
                acaYear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                criteria.Add("AcademicYear", acaYear);
            }
            else
            {
                if (DateNow.Month > 5)
                {
                    acaYear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    criteria.Add("AcademicYear", acaYear);
                }
                else
                {
                    acaYear = (DateNow.Year - 1).ToString() + "-" + (DateNow.Year).ToString();
                    criteria.Add("AcademicYear", acaYear);
                }
            }
            criteria.Add("IsActive", true);
            actual = target.GetAssess360ListWithPagingAndCriteriaWithAlias(0, 10000, sidx, sord, name, values, criteria, alias);
            //if entries present with the assignment name then get the results
            if (actual != null && actual.Count > 0 && actual.FirstOrDefault().Value != null && actual.FirstOrDefault().Value.Count > 0)
            {
                IEnumerable<long> ascSort = from p in actual.FirstOrDefault().Value
                                            orderby p.Id ascending
                                            select p.Id;
                long[] assess360Ids = ascSort.ToArray();//ascSort.Select<long>(string).ToArray();//ascSort.Cast<long>().ToArray();
                Dictionary<long, IList<Assess360BulkInsert>> actual1;
                string[] arrayColumns = new string[9];
                arrayColumns[0] = "AssessCompGroup"; arrayColumns[1] = "Subject"; arrayColumns[2] = "AssignmentName";
                arrayColumns[3] = "Assess360Id"; arrayColumns[4] = "AcademicYear"; arrayColumns[5] = "Grade";
                arrayColumns[6] = "Campus"; arrayColumns[7] = "Section"; arrayColumns[8] = "Semester";
                object[] arrayValues = new object[9];
                arrayValues[0] = AssessCompGroupId; arrayValues[1] = Subject; arrayValues[2] = AssignmentName;
                arrayValues[3] = assess360Ids; arrayValues[4] = acaYear; arrayValues[5] = grade;
                arrayValues[6] = campus; arrayValues[7] = section; arrayValues[8] = semester;
                if (campus == "IB MAIN")
                { actual1 = target.GetAssess360BulkInsertListWithPagingAndCriteriaWithAliasNewIBMain(arrayColumns, arrayValues); }
                else
                {
                    actual1 = target.GetAssess360BulkInsertListWithPagingAndCriteriaWithAliasNew(arrayColumns, arrayValues);
                }

                List<Assess360> a360List = actual.FirstOrDefault().Value.ToList();
                if (actual1 != null && actual1.Count > 0 && actual1.FirstOrDefault().Value != null && actual1.FirstOrDefault().Value.Count > 0)
                {
                    List<Assess360BulkInsert> alreadyExists = actual1.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkLong = from p in alreadyExists
                                                orderby p.Id ascending
                                                select p.Id;
                    long[] assess360Ids1 = blkLong.ToArray();
                    foreach (Assess360 a in a360List)
                    {
                        if (!assess360Ids1.Contains(a.Id))
                        {
                            Assess360BulkInsert Assess360BulkInsert = new Assess360BulkInsert();
                            Assess360BulkInsert.Assess360Id = a.Id;
                            Assess360BulkInsert.AssessCompGroup = AssessCompGroupId;
                            Assess360BulkInsert.AssignmentName = AssignmentName;
                            Assess360BulkInsert.Grade = a.Grade;
                            Assess360BulkInsert.Section = a.Section;
                            Assess360BulkInsert.Name = a.Name;
                            Assess360BulkInsert.RequestNo = a.RequestNo;
                            Assess360BulkInsert.Campus = a.Campus;
                            Assess360BulkInsert.Subject = Subject;
                            Assess360BulkInsert.IdNo = a.IdNo;
                            Assess360BulkInsert.Id = a.Id;
                            alreadyExists.Add(Assess360BulkInsert);
                        }
                    }
                    return alreadyExists;
                }
                else
                {
                    List<Assess360BulkInsert> lisstToSend = new List<Assess360BulkInsert>();
                    foreach (Assess360 a in a360List)
                    {
                        Assess360BulkInsert Assess360BulkInsert = new Assess360BulkInsert();
                        Assess360BulkInsert.Assess360Id = a.Id;
                        Assess360BulkInsert.RequestNo = a.RequestNo;
                        Assess360BulkInsert.AssessCompGroup = AssessCompGroupId;
                        Assess360BulkInsert.AssignmentName = AssignmentName;
                        Assess360BulkInsert.Grade = a.Grade;
                        Assess360BulkInsert.Section = a.Section;
                        Assess360BulkInsert.Name = a.Name;
                        Assess360BulkInsert.Campus = a.Campus;
                        Assess360BulkInsert.Subject = Subject;
                        Assess360BulkInsert.IdNo = a.IdNo;
                        Assess360BulkInsert.Id = a.Id;

                        lisstToSend.Add(Assess360BulkInsert);
                    }
                    return lisstToSend;
                }
            }
            else
            {
                return new List<Assess360BulkInsert>();
            }
        }

        public ActionResult SaveBulkComponent()
        {
            try
            {
                Session["IncidentDate"] = "";
                Session["AssessCompGroupId"] = "";
                Session["AssignmentName"] = "";
                Session["EnteredBy"] = "";
                Session["GroupName"] = "";
                Session["Staff"] = "";
                Session["Subject"] = "";
                Session["totalmks"] = "";
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                {
                    return RedirectToAction("LogOff", "Account");
                }

                ViewBag.lgdUserId = (Userobj.UserId != null) ? Userobj.UserId : "";
                ViewBag.lgdUserName = (Userobj.UserName != null) ? Userobj.UserName : "";
                ViewBag.lgdInUserType = (Userobj.UserType != null) ? Userobj.UserType : "";
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
            finally
            { }
        }

        public JsonResult SaveBulkA360Components(string ObtainedMarks, string TotalMarks, string oper, int id, long A360CompId)
        {
            try
            {
                if (Convert.ToInt32(Session["AssessCompGroupId"]) > 0 && id > 0 && !string.IsNullOrWhiteSpace(ObtainedMarks) && Convert.ToInt32(Session["totalmks"]) > 0)
                {
                    Assess360Component objA360C = new Assess360Component();

                    objA360C.Id = A360CompId;
                    objA360C.Assess360Id = id;
                    objA360C.Mark = Convert.ToDecimal(ObtainedMarks);
                    objA360C.MarksOutOff = Session["totalmks"].ToString();
                    objA360C.Semester = Session["semterm"] != null ? Session["semterm"].ToString() : null;
                    objA360C.IncidentDate = Convert.ToDateTime(Session["IncidentDate"]);
                    objA360C.AssessCompGroup = Convert.ToInt32(Session["AssessCompGroupId"]);
                    objA360C.AssignmentName = Session["AssignmentName"].ToString();// AssignmentName;
                    objA360C.EnteredBy = Session["EnteredBy"].ToString();// EnteredBy;
                    objA360C.GroupName = Session["GroupName"].ToString();// GroupName;
                    objA360C.Staff = Session["Staff"].ToString();// Staff;
                    objA360C.Subject = Session["Subject"].ToString(); // Subject;
                    if (A360CompId <= 0)
                    { objA360C.DateCreated = DateTime.Now; }
                    else
                    { objA360C.DateModified = DateTime.Now; }

                    A360CompId = SaveOrUpdateAssess360Component(objA360C, "", 0);
                }
                return Json(A360CompId + "#" + ObtainedMarks + "#" + TotalMarks, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
            finally { }
        }
        #endregion "Save Bulk Component"

        #region "email method"
        public void SendEmailToParentOfAStudent(string ComponentName, string Mark, string studName, long StudentId, bool isCredit, int AssessCompGroup)
        {
            try
            {
                Assess360Service assSrvs = new Assess360Service();
                long PreRegNo = assSrvs.GetPreRegNumForStudentId(StudentId);
                string campus = assSrvs.GetCampusForStudentId(StudentId);

                IList<CampusEmailId> campusemaildet = GetEmailIdByCampus(campus, ConfigurationManager.AppSettings["CampusEmailType"].ToString());

                string recepient = base.GetEmailIdForAStudent(StudentId, PreRegNo, "Father");
                if (!string.IsNullOrWhiteSpace(recepient))
                {
                    string SendEmail = ConfigurationManager.AppSettings["SendEmail1"];
                    string From = ConfigurationManager.AppSettings["From"];
                    if (SendEmail == "false")
                    { return; }
                    else
                    {
                        try
                        {
                            EmailLog el = new EmailLog();
                            System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage();
                            mail.To.Add(recepient);

                            mail.Subject = "Assess 360 Incident reference "; string msg = "";
                            if (AssessCompGroup == 1)
                            {
                                msg = "Your Ward <b><u>" + studName + "</u></b> is " + (isCredit == true ? "awarded" : "deducted") + " <b><u>" + Mark + " points </u></b> for <u><b>Character " + (isCredit == true ? "" : "issue") + "</u> <b><u>(" + ComponentName + ")</u></b>.";
                            }
                            else if (AssessCompGroup == 2)
                            {
                                msg = "Your Ward <b><u>" + studName + "</u></b> is " + (isCredit == true ? "awarded" : "deducted") + " <b><u>" + Mark + " points </u></b> for <u><b>Attendance</u> <b><u>(" + ComponentName + ")</u></b>.";
                            }
                            string Body = "<b> Dear Parent, </b> <br/><br/>" +
                                            "" + msg + " <br/><br/>" +
                                            " Regards, <br/>" +
                                            " TIPS Staff team.<br/><br/>" +
                                            "Disclaimer Information: <br/>" +
                                            "Every incident judged by a school staff is based on their perception/observation of the student and may or may not be acceptable by the <br/>" +
                                            "student/parent. Hence the decision of the staff will be final and no parental arbitration will be entertained. But an opportunity to make up for <br/>" +
                                            "an act is also provided for by display of extraordinary character.";
                            mail.Body = Body;

                            mail.IsBodyHtml = true;
                            SmtpClient smtp = new SmtpClient("localhost", 25);
                            smtp.Host = "smtp.gmail.com";
                            smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                            smtp.EnableSsl = true;


                            if (From == "live")
                            {
                                try
                                {
                                    // mail.From = new MailAddress("supportdesk@tipsglobal.org");
                                    // smtp.Credentials = new System.Net.NetworkCredential
                                    //("supportdesk@tipsglobal.org", "tips2013");
                                    // smtp.Send(mail);
                                    mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                                    smtp.Credentials = new System.Net.NetworkCredential
                                  (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                                    if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                                    {
                                        smtp.Send(mail);
                                        el.IsSent = true;
                                    }
                                    else
                                        el.IsSent = false;
                                }
                                catch (Exception ex)
                                {
                                    if (ex.Message.Contains("quota"))
                                    {
                                        mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                                        smtp.Credentials = new System.Net.NetworkCredential
                                      (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                                        if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                                        {
                                            smtp.Send(mail);
                                            el.IsSent = true;
                                        }
                                        else
                                            el.IsSent = false;
                                    }
                                    else
                                    {
                                        mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                                        smtp.Credentials = new System.Net.NetworkCredential
                                      (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                                        if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                                        {
                                            smtp.Send(mail);
                                            el.IsSent = true;
                                        }
                                        else
                                            el.IsSent = false;
                                    }
                                }
                            }
                            else if (From == "test")
                            {
                                mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                                smtp.Credentials = new System.Net.NetworkCredential
                                (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                                mail.To.Add(campusemaildet.First().EmailId.ToString());
                                if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                                {
                                    smtp.Send(mail);
                                    el.IsSent = true;
                                }
                                else
                                    el.IsSent = false;
                            }

                            el.Id = 0;

                            el.EmailTo = mail.To.ToString();

                            el.EmailCC = mail.CC.ToString();
                            if (mail.Bcc.ToString().Length < 3990)
                            {
                                el.EmailBCC = mail.Bcc.ToString();
                            }

                            el.Subject = mail.Subject.ToString();

                            if (mail.Body.ToString().Length < 3990)
                            {
                                el.Message = Body;
                            }
                            el.EmailDateTime = DateTime.Now.ToString();
                            el.BCC_Count = mail.Bcc.Count;
                            el.Module = "Assess360";
                            AdmissionManagementService ads = new AdmissionManagementService();
                            ads.CreateOrUpdateEmailLog(el);
                        }
                        catch (Exception)
                        { }
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
        }
        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="PartialViewName"></param>
        /// <returns></returns>
        public ActionResult loadPartialView(string PartialViewName)
        {
            return PartialView(PartialViewName);
        }

        /// <summary>
        /// Get Student Details
        /// </summary>
        /// <param name="idno"></param>
        /// <param name="name"></param>
        /// <param name="cname"></param>
        /// <param name="grade"></param>
        /// <param name="sect"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="page"></param>
        /// <returns></returns>
        public ActionResult GetStudentDetails(string IdNo, string Name, string Campus, string Grade, string Section, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();

                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(IdNo)) { criteria.Add("IdNo", IdNo); }
                if (!string.IsNullOrWhiteSpace(Name)) { criteria.Add("Name", Name); }
                if (!string.IsNullOrWhiteSpace(Campus)) { criteria.Add("Campus", Campus); }
                if (!string.IsNullOrWhiteSpace(Grade)) { criteria.Add("Grade", Grade); }
                if (!string.IsNullOrWhiteSpace(Section)) { criteria.Add("Section", Section); }
                DateTime DateNow = DateTime.Now;
                string acadeYear = string.Empty;
                if (Grade == "IX" || Grade == "X")
                {
                    acadeYear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    criteria.Add("AcademicYear", acadeYear);
                }
                else
                {
                    if (DateNow.Month > 5)
                    {
                        acadeYear = DateNow.Year.ToString(); acadeYear += "-"; acadeYear = (DateNow.Year + 1).ToString();
                        criteria.Add("AcademicYear", acadeYear);
                    }
                    else
                    {
                        criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                    }
                }
                sord = sord == "desc" ? "Desc" : "Asc";

                Dictionary<long, IList<StudentDetailsView>> dcnStdntDtls = assSrvc.GetStudentDetailsViewListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                if (dcnStdntDtls != null && dcnStdntDtls.Count > 0)
                {
                    long totalRecords = dcnStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in dcnStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                           items.Id.ToString(), items.IdNo, items.Name, items.Section, items.Campus, 
                           items.Grade, items.AcademicYear, items.IsHosteller.ToString()
                    }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, PolicyName); }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="SubjectTeaching"></param>
        /// <param name="Grade"></param>
        /// <param name="StaffName"></param>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="page"></param>
        /// <returns></returns>
        public ActionResult GetStaffMasterDetails(string SubjectTeaching, string Grade, string StaffName, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                UserService us = new UserService();
                Dictionary<string, object> EQcriteria = new Dictionary<string, object>();
                Dictionary<string, object> Likecriteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(StaffName)) { Likecriteria.Add("UserName", StaffName); }
                EQcriteria.Add("AppCode", "360");

                var usrcmp = Session["UserCampus"] as IEnumerable<string>;
                if (usrcmp.Count() != 0)
                {
                    if (usrcmp.First() != null)            // to check if the usrcmp obj is null or with data
                    {
                        EQcriteria.Add("BranchCode", usrcmp);
                    }
                }

                //sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<UserAppRole_Vw>> StaffUserList = us.GetAppRoleOnlyActiveUsersLikeandEQSearch(0, 9999, string.Empty, string.Empty, EQcriteria, Likecriteria);
                //Dictionary<long, IList<StaffMaster>> dcnStdntDtls = assSrvc.GetStaffMasterListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                if (StaffUserList != null && StaffUserList.Count > 0)
                {
                    long totalRecords = StaffUserList.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in StaffUserList.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                           items.Id.ToString(),items.AppCode,items.RoleCode, items.BranchCode, items.UserId, items.UserName, items.DeptCode
                    }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, PolicyName); }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult ComponentInbox()
        {
            try
            {
                MastersService ms = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                if (CampusMaster != null && CampusMaster.Count > 0)
                {
                    ViewBag.CampusMaster = CampusMaster.FirstOrDefault().Value;
                }
                else
                {
                    ViewBag.CampusMaster = string.Empty;
                }

                return View();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, PolicyName);
                throw ex;
            }
            finally
            { }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="rows"></param>
        /// <param name="sidx"></param>
        /// <param name="sord"></param>
        /// <param name="Assess360Id"></param>
        /// <param name="AssessCompGroup"></param>
        /// <param name="page"></param>
        /// <returns></returns>
        public ActionResult GetAssess360ComponentListWithPagingAndCriteria(int rows, string sidx, string sord, string tab, string Staff, int? compId = 0, long? Assess360Id = 0, int? page = 1, bool? ExprtToXL = false)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                sord = sord == "asc" ? "Asc" : "Desc";
                if (Assess360Id > 0) { criteria.Add("Assess360Id", Assess360Id); }
                int[] values;
                if (tab == "1") { values = new int[2] { 1, 2 }; }
                else if (tab == "2") { values = new int[2] { 3, 4 }; }
                else if (tab == "3") { values = new int[6] { 5, 6, 7, 8, 9, 10 }; }
                else if (tab == "-1") { values = new int[7] { 1, 2, 3, 4, 5, 6, 7 }; }
                else { values = new int[1] { compId ?? 0 }; }

                Dictionary<long, IList<Assess360Component>> dcnCompntLst = assSrvc.GetAssess360ComponentListWithPagingAndInCriteria(page - 1, rows, sidx, sord, "AssessCompGroup", values, criteria, null);
                if (dcnCompntLst != null && dcnCompntLst.Count > 0)
                {
                    IList<Assess360Component> lstAsssessCompnt = dcnCompntLst.FirstOrDefault().Value;
                    long totalRecords = dcnCompntLst.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    if (totalRecords > 0)
                    {
                        if (ExprtToXL ?? false)
                        {
                            base.ExptToXL(lstAsssessCompnt, "StaffWiseComponetList", (items => new
                            {
                                items.Id,
                                items.Assess360Id,
                                items.AssessCompGroup,
                                items.IsCredit,
                                items.GroupName,
                                items.Subject,
                                items.Staff,
                                items.IncidentDate,
                                items.MarksOutOff,
                                items.AssignmentName,
                                items.Description,
                                items.DateCreated,
                                items.EnteredBy
                            }));
                            return new EmptyResult();
                        }
                        else
                        {
                            var jsonData = new
                            {
                                total = totalPages,
                                page = page,
                                records = totalRecords,
                                rows = (
                                from items in lstAsssessCompnt
                                select new
                                {
                                    i = items.Id,
                                    cell = new string[] 
                       { 
                            items.Id.ToString(),  
                            items.Assess360Id.ToString(), 
                            items.AssessCompGroup.ToString(), 
                            items.IsCredit==true?"Credit":"Issue",
                            items.GroupName,
                            items.Subject,
                            items.Staff, 
                            items.IncidentDate==null?"":items.IncidentDate.Value.ToString("dd-MMM-yyyy"), 
                            items.MarksOutOff==null?items.Mark.ToString():items.Mark.ToString()+'/'+items.MarksOutOff.ToString(), 
                            items.AssignmentName,
                            items.Description, 
                            items.DateCreated==null?"":items.DateCreated.Value.ToString("dd-MMM-yyyy"),
                            items.EnteredBy,
                            items.Semester}
                                })
                            };
                            return Json(jsonData, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    { return Json(null, JsonRequestBehavior.AllowGet); }
                }
                else
                { return Json(null, JsonRequestBehavior.AllowGet); }

            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally
            { }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Assess360ComponentIds"></param>
        /// <returns></returns>
        public ActionResult DeleteAssess360Component(long[] Assess360ComponentIds)
        {
            try
            {
                if (Assess360ComponentIds.Length > 0)
                {
                    Assess360Service assSrvc = new Assess360Service();
                    bool isSucess = assSrvc.DeleteAssess360Component(Assess360ComponentIds);
                    if (isSucess)
                    { return Json("Componenet deleted sucessfully."); }
                    else
                    { return Json("Componenet not deleted."); }
                }
                else
                { return Json("Please select the component."); }
            }
            catch (Exception ex)
            { return ThrowJSONError(ex); }
        }

        /// <summary>
        /// Assess 360 Component Master
        /// </summary>
        /// <param name="AssessCompGroup"></param>
        /// <returns></returns>
        //public ActionResult GetAssess360CompMasterListByName(string tab, bool? IssueCredits)
        //{
        //    try
        //    {
        //        Assess360Service assSrvc = new Assess360Service();
        //        Dictionary<string, object> criteria = new Dictionary<string, object>();

        //        int[] values;
        //        if (tab == "1") { values = new int[2] { 1, 2 }; criteria.Add("IsCredit", IssueCredits ?? false); }
        //        else if (tab == "2") { values = new int[2] { 3, 4 }; }
        //        else if (tab == "3") { values = new int[6] { 5, 6, 7, 8, 9, 10 }; }
        //        else
        //        {
        //            values = new int[7] { 4, 5, 6, 7, 8, 9, 10 };
        //            criteria.Add("IsCredit", true);
        //        }

        //        Dictionary<long, IList<AssessCompMaster>> dcnAssCompMaster = assSrvc.GetAssess360CompMasterListWithPagingAndCriteriaWithIn(0, 9999, "", "", "GroupId", values, criteria, null);
        //        if (dcnAssCompMaster != null && dcnAssCompMaster.Count > 0)
        //        {
        //            IList<AssessCompMaster> AssCompMaster = dcnAssCompMaster.FirstOrDefault().Value;

        //            var AssCompMasterLst = new
        //            {
        //                rows = (
        //                     from items in AssCompMaster

        //                     select new
        //                     {
        //                         Text = items.CompName,
        //                         Value = items.GroupId,
        //                         Marks = items.Mark,
        //                         IsCredit = items.IsCredit
        //                     }).ToArray()
        //            };

        //            return Json(AssCompMasterLst, JsonRequestBehavior.AllowGet);
        //        }
        //        else { return Json(null, JsonRequestBehavior.AllowGet); }
        //    }
        //    catch (Exception ex)
        //    { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        //}

        public ActionResult GetAssess360CompMasterListByName(string tab, bool? IssueCredits, string Campus)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                int[] values;
                if (tab == "1") { values = new int[2] { 1, 2 }; criteria.Add("IsCredit", IssueCredits ?? false); }
                else if (tab == "2") { values = new int[2] { 3, 4 }; }
                else if (tab == "3")
                {
                    if (Campus == "IB MAIN")
                    {
                        values = new int[6] { 5, 6, 7, 8, 9, 10 };
                    }
                    else
                    {
                        values = new int[3] { 5, 6, 7 };
                    }
                }
                else
                {
                    values = new int[7] { 4, 5, 6, 7, 8, 9, 10 };
                    criteria.Add("IsCredit", true);
                }

                Dictionary<long, IList<AssessCompMaster>> dcnAssCompMaster = assSrvc.GetAssess360CompMasterListWithPagingAndCriteriaWithIn(0, 9999, "", "", "GroupId", values, criteria, null);
                if (dcnAssCompMaster != null && dcnAssCompMaster.Count > 0)
                {
                    IList<AssessCompMaster> AssCompMaster = dcnAssCompMaster.FirstOrDefault().Value;

                    var AssCompMasterLst = new
                    {
                        rows = (
                             from items in AssCompMaster

                             select new
                             {
                                 Text = items.CompName,
                                 Value = items.GroupId,
                                 Marks = items.Mark,
                                 IsCredit = items.IsCredit
                             }).ToArray()
                    };

                    return Json(AssCompMasterLst, JsonRequestBehavior.AllowGet);
                }
                else { return Json(null, JsonRequestBehavior.AllowGet); }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }


        /// <summary>
        /// Subject Master
        /// </summary>
        /// <param name="Grade"></param>
        /// <returns></returns>
        public ActionResult GetSubjectsByGrade(string Campus, string Grade)
        {
            try
            {
                Assess360Service assSrv = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(Campus))
                {
                    var campusArr = Campus.Split(',');
                    criteria.Add("Campus", campusArr);
                }
                if (!string.IsNullOrWhiteSpace(Grade) && Grade != "Select")
                {
                    var gradeArr = Grade.Split(',');
                    criteria.Add("Grade", gradeArr);
                }
                Dictionary<long, IList<SubjectMaster>> subMaster = assSrv.GetSubjectMasterListWithPagingAndCriteria(0, 9999, "SubjectName", "Asc", criteria);
                if (subMaster != null && subMaster.Count > 0)
                {
                    var subjectMstrLst = new
                    {
                        rows = (from items in subMaster.FirstOrDefault().Value
                                select new
                                {
                                    Text = items.SubjectName,
                                    Value = items.SubjectName
                                }).Distinct().ToArray()
                    };
                    return Json(subjectMstrLst, JsonRequestBehavior.AllowGet);
                }
                else
                { return Json(null, JsonRequestBehavior.AllowGet); }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally { }
        }

        public ActionResult GetSubjects()
        {
            try
            {
                //UserService bcs = new UserService();
                Assess360Service assSrv = new Assess360Service();
                Dictionary<long, string> subj = new Dictionary<long, string>();
                Dictionary<string, object> criteria = new Dictionary<string, object>();

                Dictionary<long, IList<SubjectMaster>> subMaster = assSrv.GetSubjectMasterListWithPagingAndCriteria(0, 9999, "SubjectName", "Asc", criteria);
                var sub = (from u in subMaster.First().Value
                           select u.SubjectName).Distinct().ToList();
                return Json(sub, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        /// <summary>
        /// Get Assignment Name
        /// Added by : Lee
        /// Added Date : 22-Jun-2013
        /// Reason : Earlier this is a free text, 
        ///          now it has been turned to Master data.
        /// </summary>
        /// <returns> List of Assignments </returns>
        public ActionResult GetAssignmentName()
        {
            try
            {
                MastersService msSrv = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Dictionary<long, IList<AssignmentNameMaster>> AsgnmtMaster = new Dictionary<long, IList<AssignmentNameMaster>>();
                IList<AssignmentNameMaster> AsgnmtMasterLst = new List<AssignmentNameMaster>();
                if (Session["AssignmentMasterLst"] == null)
                {
                    AsgnmtMaster = msSrv.GetAssignmentNameMasterListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    AsgnmtMasterLst = AsgnmtMaster.FirstOrDefault().Value;
                }
                else
                { AsgnmtMasterLst = (IList<AssignmentNameMaster>)Session["AssignmentMasterLst"]; }

                if (AsgnmtMasterLst != null && AsgnmtMasterLst.Count > 0)
                {
                    Session["AssignmentMasterLst"] = AsgnmtMasterLst;
                    var subjectMstrLst = new
                    {
                        rows = (
                             from items in AsgnmtMasterLst
                             select new
                             {
                                 Text = items.AssignmentName,
                                 Value = items.AssignmentName
                             }).Distinct().ToArray()
                    };

                    return Json(subjectMstrLst, JsonRequestBehavior.AllowGet);
                }
                else
                { return Json(null, JsonRequestBehavior.AllowGet); }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally { }
        }

        /// <summary>
        /// Get Roll Code by User Id
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns></returns>
        public string GetRollCodeByUserId(string UserId)
        {
            try
            {
                string roleCode = string.Empty;
                UserService us = new UserService();
                //pass userid and get the list of roles from user service GetAppRoleForAnUserListWithPagingAndCriteria
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(UserId)) { criteria.Add("UserId", UserId); }
                Dictionary<long, IList<UserAppRole>> userAppRole = us.GetAppRoleForAnUserListWithPagingAndCriteria(0, 1000, string.Empty, string.Empty, criteria);
                if (userAppRole != null && userAppRole.FirstOrDefault().Value != null && userAppRole.FirstOrDefault().Value.Count > 0)
                {
                    roleCode = userAppRole.FirstOrDefault().Value[0].RoleCode;
                }
                return roleCode;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                return "";
            }
            finally { }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Assess360Id"></param>
        /// <returns></returns>
        public ActionResult GetAssess360MarksForAStudent(int Assess360Id)
        {
            try
            {
                Assess360Service assSrv = new Assess360Service();
                string StudentMarks = assSrv.GetConsolidatedMarksForAStudent(Assess360Id);
                return Json(StudentMarks, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Assess360Id"></param>
        /// <returns></returns>
        public ActionResult GetConsolidatedMarksForAStudent(int Assess360Id)
        {
            try
            {
                Assess360Service assSrv = new Assess360Service();
                //string StudentMarks = assSrv.GetConsolidatedMarksForAStudent(Assess360Id);
                string StudentMarks = assSrv.GetComponentWiseConsolidatedMarksForAStudent(Assess360Id);
                return Json(StudentMarks, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }

        public ActionResult ExportToExcel(string RequestNo, string Name, string Campus, string Section, string Grade, int rows)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>(); string colName = string.Empty; string[] values = new string[1];
                if (!string.IsNullOrWhiteSpace(RequestNo)) { criteria.Add("RequestNo", RequestNo); }
                if (!string.IsNullOrWhiteSpace(Name)) { criteria.Add("Name", Name); }
                if (!string.IsNullOrWhiteSpace(Campus) && Campus != "Select") { criteria.Add("Campus", Campus); }
                if (!string.IsNullOrWhiteSpace(Section) && Section != "Select") { criteria.Add("Section", Section); }
                if (!string.IsNullOrWhiteSpace(Grade) && Grade != "Select")
                {
                    colName = "Grade";
                    values[0] = Grade;
                }

                DateTime DateNow = DateTime.Now;
                string acayear = "";

                if (Grade == "IX" || Grade == "X")
                {
                    acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                }
                else
                {
                    if (DateNow.Month > 5)
                    {
                        acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    }
                    else
                    {
                        acayear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                    }
                }
                criteria.Add("AcademicYear", acayear);
                criteria.Add("IsActive", true);
                Dictionary<long, IList<Assess360>> dcnAssesstLst = assSrvc.GetAssess360ListWithPagingAndCriteriaWithAlias(null, rows, string.Empty, string.Empty, colName, values, criteria, null);
                if (dcnAssesstLst != null && dcnAssesstLst.Count > 0)
                {
                    var assessList = dcnAssesstLst.First().Value.ToList();
                    base.ExptToXL(assessList, "AssessList", (item => new
                    {
                        item.RequestNo,
                        item.AcademicYear,
                        item.Campus,
                        item.IdNo,
                        item.Name,
                        item.Section,
                        item.Grade,
                        item.ConsolidatedMarks,
                        item.CreatedBy,
                        item.DateCreated
                    }));
                    return new EmptyResult();
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally
            { }
        }

        public ActionResult Assess360PointChart()
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    Dictionary<long, IList<AcademicyrMaster>> AcademicyrMaster = ms.GetAcademicyrMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                    ViewBag.acadddl = AcademicyrMaster.First().Value;
                    #region BreadCrumb
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    #endregion
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "CallMgmntPolicy");
                throw ex;

            }
        }

        public ActionResult Assess360PointChartJQGrid(string cam, string grade, string section, string srchAcademicYear, string ExportType, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service ass360 = new Assess360Service();
                DateTime DateNow = DateTime.Now;
                string acayear = "";


                if (!string.IsNullOrEmpty(srchAcademicYear))
                    acayear = srchAcademicYear;
                else
                {
                    if (grade == "IX" || grade == "X")
                    {
                        acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    }
                    else
                    {
                        if (DateNow.Month > 5)
                        {
                            acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                        }
                        else
                        {
                            acayear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                        }
                    }
                }
                IList<Assess360Point> Assess360List = ass360.GetAssess360PointForAcademicYear(grade, section, cam, acayear);

                //IList<Assess360Point> Temp = new List<Assess360Point>();

                Assess360List = Assess360List.OrderByDescending(x => x.Consolidation).ToList();

                //Temp = from data in Assess360List
                //       orderby data.Consolidation ascending
                //       select data;

                if (Assess360List != null && Assess360List.Count > 0)
                {
                    string todaydate = DateTime.Now.ToString("dd-MMMM-yyyy");
                    string title = "Assess360°PointChart-" + grade + "-" + section + "-" + todaydate + "";
                    string month = DateTime.Now.ToString("MMMM");
                    if (ExportType == "Excel")
                    {
                        string headerTable = @"<Table><tr><td><b>Month:</b></td><td>" + month + "</td><td colspan='8' align='center' style='font-size: large;'>The Indian Public School</td></tr><tr><td colspan='8'></td></tr><tr><td colspan='4'><b>Grade</b> : " + grade + "-" + section + " </td><td colspan='3'> <b>Assess360 Point Chart</b><td><b>Class Teacher</b> :</td></tr>";
                        headerTable = headerTable + "</b></Table>";
                        string[] TblHeaders = new string[] { "Id", "Student Name", "Character", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                        ExptToXL_AssessPointChart(Assess360List, title, (items => new
                        {
                            Id = items.Id,
                            Student_Name = items.StudName,
                            Character = items.Character,
                            Attendence_Punctuality = items.AttPunctuality,
                            Homework_Completion = items.HwCompletion,
                            Homework_Accuracy_15 = items.HwAccuracy,
                            Weekly_Chapter_Tests_20 = items.WkChapterTests,
                            SLC_Parent_Assessment_5 = items.SLCParentAssessment,
                            Term_Assessment_25 = items.TermAssessment,
                            items.Total
                        }), headerTable);
                    }
                    else if (ExportType == "PDF")
                    {
                        string[] TblHeaders = new string[] { "Id", "Student Name", "Character", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                        float[] widths = new float[] { 20f, 80f, 70f, 125f, 100f, 95f, 110f, 120f, 100f, 35f };
                        var ass = (from a in Assess360List
                                   select new { a.Id, a.StudName, a.Character, a.AttPunctuality, a.HwCompletion, a.HwAccuracy, a.WkChapterTests, a.SLCParentAssessment, a.TermAssessment, a.Total }).ToList();
                        DataTable dt = ListToDataTable(ass);

                        ExportToPDF_AssessPointChart(title, TblHeaders, widths, dt, grade, section);
                    }
                    else
                    {
                        var AssLst = new
                        {
                            rows = (
                                 from items in Assess360List

                                 select new
                                 {
                                     i = items.Id,
                                     cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.Id.ToString(),
                                            items.StudentId.ToString(),
                                            items.ReportGenDate.Value.ToString("dd/MM/yyyy"),
                                            items.StudName,
                                            items.Character,
                                            items.AttPunctuality,
                                            items.HwCompletion,
                                            items.HwAccuracy,
                                            items.WkChapterTests,
                                            items.SLCParentAssessment,
                                            items.TermAssessment,
                                            items.Total
                                         }
                                 }).ToList()
                        };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
                return Json(null, JsonRequestBehavior.AllowGet);
            }

            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult Pointchartbulkmail(string cam, string grade, string section)
        {
            Session["ptcam"] = cam;
            Session["ptgrd"] = grade;
            Session["ptsect"] = section;
            return View();
        }

        [HttpPost]
        public ActionResult Pointchartbulkmail(StudentTemplate st, HttpPostedFileBase file2)
        {
            AdmissionManagementService ads = new AdmissionManagementService();
            Dictionary<string, object> criteria = new Dictionary<string, object>();

            if (Session["ptcam"].ToString() != "")
            {
                criteria.Add("Campus", Session["ptcam"].ToString());
            }
            if (Session["ptgrd"].ToString() != "")
            {
                criteria.Add("Grade", Session["ptgrd"].ToString());
            }
            if (Session["ptsect"].ToString() != "")
            {
                criteria.Add("Section", Session["ptsect"].ToString());
            }
            Assess360Service ass360 = new Assess360Service();
            DateTime DateNow = DateTime.Now;
            string acayear = "";
            if (Session["ptgrd"].ToString() == "IX" || Session["ptgrd"].ToString() == "X")
            {
                acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
            }
            else
            {
                if (DateNow.Month > 5)
                {
                    acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                }
                else
                {
                    acayear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                }
            }
            IList<Assess360Point> Assess360List = ass360.GetAssess360PointForAcademicYear(Session["ptgrd"].ToString(), Session["ptsect"].ToString(), Session["ptcam"].ToString(), acayear);

            IList<CampusEmailId> campusemaildet = GetEmailIdByCampus(Session["ptcam"].ToString(), ConfigurationManager.AppSettings["CampusEmailType"].ToString());

            string From = ConfigurationManager.AppSettings["From"];
            string To = ConfigurationManager.AppSettings["To"];
            SmtpClient smtp = new SmtpClient("localhost", 25);
            smtp.Host = "smtp.gmail.com";
            smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
            smtp.EnableSsl = true;

            int mailcnt = 0;
            int quotient = Convert.ToInt32((Assess360List.Count) / Convert.ToInt32(ConfigurationManager.AppSettings["EmailCnt"]));
            int remainder = Convert.ToInt32((Assess360List.Count) % Convert.ToInt32(ConfigurationManager.AppSettings["EmailCnt"]));

            foreach (var var in Assess360List)
            {
                mailcnt = mailcnt + 1;

                System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage();

                if (To == "live")
                {
                    mail.To.Add(campusemaildet.First().EmailId.ToString());
                }
                else if (To == "test")
                {
                    mail.To.Add(campusemaildet.First().EmailId.ToString());
                }
                mail.Subject = "Assess360 Update for the Month of " + DateTime.Now.ToString("MMMM yyyy") + "";
                mail.IsBodyHtml = true;

                if (st.Father == true)
                {
                    Dictionary<string, object> criteria1 = new Dictionary<string, object>();
                    criteria1.Add("NewId", var.IdNo);
                    Dictionary<long, IList<StudentTemplate>> preregnum = ads.GetStudentDetailsListWithEQsearchCriteria(0, 100000, null, null, criteria1);
                    criteria1.Clear();
                    criteria1.Add("PreRegNum", preregnum.First().Value[0].PreRegNum);
                    criteria1.Add("FamilyDetailType", "Father");
                    Dictionary<long, IList<FamilyDetails>> FamilyDetails = ads.GetFamilyDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria1);

                    if (FamilyDetails.First().Value.Count() != 0)
                    {
                        if ((FamilyDetails.First().Value[0].Email != null) && (FamilyDetails.First().Value[0].Email.Contains("@")))
                        {
                            if (Regex.IsMatch(FamilyDetails.First().Value[0].Email,
    @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$",
    RegexOptions.IgnoreCase))
                            {
                                mail.To.Add(FamilyDetails.First().Value[0].Email);
                            }
                        }
                    }
                }

                if (st.Mother == true)
                {
                    Dictionary<string, object> criteria1 = new Dictionary<string, object>();
                    criteria1.Add("NewId", var.IdNo);
                    Dictionary<long, IList<StudentTemplate>> preregnum = ads.GetStudentDetailsListWithEQsearchCriteria(0, 100000, null, null, criteria1);
                    criteria1.Clear();
                    criteria1.Add("PreRegNum", preregnum.First().Value[0].PreRegNum);
                    criteria1.Add("FamilyDetailType", "Mother");
                    Dictionary<long, IList<FamilyDetails>> FamilyDetails = ads.GetFamilyDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria1);

                    if (FamilyDetails.First().Value.Count() != 0)
                    {
                        if ((FamilyDetails.First().Value[0].Email != null) && (FamilyDetails.First().Value[0].Email.Contains("@")))
                        {
                            if (Regex.IsMatch(FamilyDetails.First().Value[0].Email,
    @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$",
    RegexOptions.IgnoreCase))
                            {
                                mail.To.Add(FamilyDetails.First().Value[0].Email);
                            }
                        }
                    }
                }

                if (st.General == true)
                {
                    Dictionary<string, object> criteria3 = new Dictionary<string, object>();
                    criteria3.Add("NewId", var.IdNo);
                    //     criteria2.Add("FamilyDetailType", "Mother");
                    Dictionary<long, IList<StudentTemplate>> StudentTemplate = ads.GetStudentDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria3);

                    if (StudentTemplate.First().Value.Count() != 0)
                    {
                        if ((StudentTemplate.First().Value[0].EmailId != null) && (StudentTemplate.First().Value[0].EmailId.Contains("@")))
                        {
                            if (Regex.IsMatch(StudentTemplate.First().Value[0].EmailId,
    @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$",
    RegexOptions.IgnoreCase))
                            {
                                mail.To.Add(StudentTemplate.First().Value[0].EmailId);
                            }
                        }
                    }
                }

                string content = "Dear Parent <br/><br/>" +
                                  "           Your ward " + var.StudName + "'s Assess360 point score for the month of " + DateTime.Now.ToString("MMMM yyyy") + " is " + var.Total + ". Please find below details of the score. <br/><br/> " +
                    "<table> " +
                    "<tr> <td> Name : " + var.StudName + "  </td> <tr> " +
                     "<tr> <td> Id No  : " + var.IdNo + "  </td> <tr>" +
                     "</table><br/><br/>" +
                   "<table style='border-collapse:collapse; border:1px solid black; padding: 5px;'> " +
                    "<tr> <td style='font-weight:bold; border:1px solid black; padding: 5px;'> S.No </td><td style='font-weight:bold; border:1px solid black; padding: 5px;'> Description </td>  <td style='font-weight:bold; border:1px solid black; padding: 5px;'> Points Obtained </td> <td style='font-weight:bold; border:1px solid black; padding: 5px;'> Weightage </td> <tr> " +
                     "<tr><td style='font-weight:bold; border:1px solid black; padding: 5px;'> 1 </td> <td style='border:1px solid black; padding: 5px;'> Character  </td><td style=' border:1px solid black; padding: 5px;'> " + var.Character + "  </td><td style='font-weight:bold; border:1px solid black; padding: 5px;'>No Upper Limit </td> <tr>" +
                     "<tr><td style='font-weight:bold; border:1px solid black; padding: 5px;'>2 </td> <td style='border:1px solid black; padding: 5px;'> Attendance/Punctuality  </td><td style=' border:1px solid black; padding: 5px;'> " + var.AttPunctuality + "  </td> <td style='font-weight:bold; border:1px solid black; padding: 5px;'>No Upper Limit </td> <tr>" +
                     "<tr><td style='font-weight:bold; border:1px solid black; padding: 5px;'> 3 </td> <td style='border:1px solid black; padding: 5px;'> Homework Completion  </td><td style=' border:1px solid black; padding: 5px;'> " + var.HwCompletion + "  </td><td style='font-weight:bold; border:1px solid black; padding: 5px;'>No Upper Limit </td>  <tr>" +
                     "<tr> <td style='font-weight:bold; border:1px solid black; padding: 5px;'> 4 </td><td style='border:1px solid black; padding: 5px;'> Homework Accuracy  </td><td style='border:1px solid black; padding: 5px;'> " + var.HwAccuracy + "  </td> <td style='font-weight:bold; border:1px solid black; padding: 5px;'>15</td> <tr>" +
                     "<tr><td style='font-weight:bold; border:1px solid black; padding: 5px;'> 5 </td> <td style='border:1px solid black; padding: 5px;'> Weekly Chapter Tests  </td><td style='border:1px solid black; padding: 5px;'> " + var.WkChapterTests + "  </td> <td style='font-weight:bold; border:1px solid black; padding: 5px;'>20</td> <tr>" +
                     "<tr><td style='font-weight:bold; border:1px solid black; padding: 5px;'>6 </td> <td  style='border:1px solid black; padding: 5px;'> Student Led Performance </td><td style='border:1px solid black; padding: 5px;'> " + var.SLCParentAssessment + "  </td> <td style='font-weight:bold; border:1px solid black; padding: 5px;'>05</td> <tr>" +
                     "<tr><td style='font-weight:bold; border:1px solid black; padding: 5px;'>7 </td> <td  style='border:1px solid black; padding: 5px;'> Term Assessment  </td><td style='border:1px solid black; padding: 5px;'> " + var.TermAssessment + "  </td><td style='font-weight:bold; border:1px solid black; padding: 5px;'>25</td>  <tr>" +
                     "<tr> <td style='font-weight:bold; border:1px solid black; padding: 5px;'>8 </td><td style='font-weight:bold; border:1px solid black; padding: 5px;'> Total  </td><td colspan='2' align='center' style='font-weight:bold; border:1px solid black;  padding: 5px;'> " + var.Total + "  </td>   <tr>" +
                     "</table><br/><br/><br/>" +
                     " <table> " +
                    "<tr> <td>Regards, </td> <tr> " +
                     "<tr> <td>TIPS Team</td> <tr><br/>" +
                     "</table><br/>" +
                          "Disclaimer Information: <br/><br/>" +

                         " 1) The students will have a bank of 20 points for Character, 10 points for Attendance / Punctuality and 5 points for Home Work Completion. The score may be added upon or deleted from depending on the issue. There is no upper limit on these components.<br/><br/>" +
"2) S.No 4 to 7 components are an indication of the average of all the subjects out of the maximum points detailed in the table.<br/><br/>" +
"<b>Qualifying for a Grade Level requires a minimum of 75 points every year.<br/><br/>" +
"Achieving 85-90 points will qualify the student for the Merit List every year.<br/><br/>" +

"Achieving more than 90 points will qualify for the High Achievers Club every year.<br/><br/>" +
"Achieving 100 points or more will qualify for a Chairman’s Award every year.</b><br/><br/>" +
                                          "Every incident judged by a school staff is based on their perception/observation of the student and may or may not be acceptable by the " +
                                          "student/parent. Hence the decision of the staff will be final and no parental arbitration will be entertained. But an opportunity to make up for " +
                                          "an act is also provided for by display of extraordinary character.";

                mail.Body = content;
                EmailLog el = new EmailLog();
                if (From == "live")
                {
                    mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                    smtp.Credentials = new System.Net.NetworkCredential
                   (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                    if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                    {
                        smtp.Send(mail);
                        el.IsSent = true;
                    }
                    else
                        el.IsSent = false;

                    el.Id = 0;
                    if (To == "live")
                    {
                        el.EmailTo = campusemaildet.First().EmailId.ToString(); // "supportdesk@tipsglobal.org";
                    }
                    else if (To == "test")
                    {
                        el.EmailTo = campusemaildet.First().EmailId.ToString(); // "tipscmsupp0rthyderabad247@gmail.com";
                    }
                    el.EmailCC = mail.CC.ToString();

                    if (mail.To.ToString().Length < 500)
                    {
                        el.EmailTo = mail.To.ToString();
                    }
                    el.Subject = mail.Subject.ToString();

                    if (mail.Body.ToString().Length < 3990)
                    {
                        el.Message = mail.Body;
                    }
                    el.EmailDateTime = DateTime.Now.ToString();
                    el.BCC_Count = mail.Bcc.Count;

                    ads.CreateOrUpdateEmailLog(el);
                }
                else if (From == "test")
                {
                    mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                    smtp.Credentials = new System.Net.NetworkCredential
                    (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                    if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                    {
                        smtp.Send(mail);
                        el.IsSent = true;
                    }
                    else
                        el.IsSent = false;

                    el.Id = 0;
                    if (To == "live")
                    {
                        el.EmailTo = campusemaildet.First().EmailId.ToString();// "supportdesk@tipsglobal.org";
                    }
                    else if (To == "test")
                    {
                        el.EmailTo = campusemaildet.First().EmailId.ToString(); // "tipscmsupp0rthyderabad247@gmail.com";
                    }
                    el.EmailCC = mail.CC.ToString();

                    if (mail.To.ToString().Length < 500)
                    {
                        el.EmailTo = mail.To.ToString();
                    }
                    el.Subject = mail.Subject.ToString();

                    if (mail.Body.ToString().Length < 3990)
                    {
                        el.Message = mail.Body;
                    }
                    el.EmailDateTime = DateTime.Now.ToString();
                    el.BCC_Count = mail.Bcc.Count;

                    ads.CreateOrUpdateEmailLog(el);
                }
            }
            Session["emailsent"] = "yes";
            return RedirectToAction("Assess360PointChart");
        }

        public ActionResult Pointchartmail(string PreRegNo, string cam, string grade, string section)
        {
            Session["ptchrtpreregno"] = PreRegNo;
            Session["ptcam"] = cam;
            Session["ptgrd"] = grade;
            Session["ptsect"] = section;
            return View();
        }

        [HttpPost]
        public ActionResult Pointchartmail(StudentTemplateView st)
        {
            try
            {
                AdmissionManagementService ads = new AdmissionManagementService();

                var prereg = Session["ptchrtpreregno"].ToString().Split(',');
                long[] id = new long[prereg.Length];
                // int j = 0;
                string From = ConfigurationManager.AppSettings["From"];
                string To = ConfigurationManager.AppSettings["To"];

                IList<CampusEmailId> campusemaildet = GetEmailIdByCampus(Session["ptcam"].ToString(), ConfigurationManager.AppSettings["CampusEmailType"].ToString());

                SmtpClient smtp = new SmtpClient("localhost", 25);
                smtp.Host = "smtp.gmail.com"; //Or Your SMTP Server Address  
                //Or your Smtp Email ID and Password  
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtp.EnableSsl = true;

                foreach (string val in prereg)
                {
                    System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage();
                    if (To == "live")
                    {
                        mail.To.Add(campusemaildet.First().EmailId.ToString());
                    }
                    else if (To == "test")
                    {
                        mail.To.Add(campusemaildet.First().EmailId.ToString());
                    }

                    Assess360Service ass360 = new Assess360Service();
                    DateTime DateNow = DateTime.Now;
                    string acayear = "";
                    if (DateNow.Month > 5)
                    {
                        acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    }
                    else
                    {
                        acayear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                    }
                    IList<Assess360Point> Assess360List = ass360.GetAssess360PointForAcademicYear(Session["ptgrd"].ToString(), Session["ptsect"].ToString(), Session["ptcam"].ToString(), acayear);
                    var var = from cust in Assess360List
                              where cust.StudentId == Convert.ToInt64(val)
                              select cust;

                    string content = "Dear Parent, <br/>" +
                 "           Your ward " + var.First().StudName + "'s Assess360 point score as on " + DateTime.Now.ToString("MMMM yyyy") + " is " + var.First().Total + ". Please find below details of the score. <br/><br/> " +
    "<table> " +
    "<tr> <td> Name : " + var.First().StudName + "  </td> <tr> " +
     "<tr> <td> Id No  : " + var.First().IdNo + "  </td> <tr>" +
     "</table><br/><br/>" +
   "<table style='border-collapse:collapse; border:1px solid black; padding: 5px;'> " +
    "<tr> <td style='font-weight:bold; border:1px solid black; padding: 5px;'> Description </td> <td style='font-weight:bold; border:1px solid black; padding: 5px;'> Weightage </td> <tr> " +
     "<tr> <td style='border:1px solid black; padding: 5px;'> Character  </td><td style=' border:1px solid black; padding: 5px;'> " + var.First().Character + "  </td> <tr>" +
     "<tr> <td style='border:1px solid black; padding: 5px;'> Attendance/Punctuality  </td><td style=' border:1px solid black; padding: 5px;'> " + var.First().AttPunctuality + "  </td> <tr>" +
     "<tr> <td style='border:1px solid black; padding: 5px;'> Homework Completion  </td><td style=' border:1px solid black; padding: 5px;'> " + var.First().HwCompletion + "  </td> <tr>" +
     "<tr> <td style='border:1px solid black; padding: 5px;'> Homework Accuracy  </td><td style='border:1px solid black; padding: 5px;'> " + var.First().HwAccuracy + "  </td> <tr>" +
     "<tr> <td style='border:1px solid black; padding: 5px;'> Weekly Chapter Tests  </td><td style='border:1px solid black; padding: 5px;'> " + var.First().WkChapterTests + "  </td> <tr>" +
     "<tr> <td  style='border:1px solid black; padding: 5px;'> Student Led Performance </td><td style='border:1px solid black; padding: 5px;'> " + var.First().SLCParentAssessment + "  </td> <tr>" +
     "<tr> <td  style='border:1px solid black; padding: 5px;'> Term Assessment  </td><td style='border:1px solid black; padding: 5px;'> " + var.First().TermAssessment + "  </td> <tr>" +
     "<tr> <td style='font-weight:bold; border:1px solid black; padding: 5px;'> Total  </td><td style='font-weight:bold; border:1px solid black; padding: 5px;'> " + var.First().Total + "  </td> <tr>" +
     "</table><br/><br/><br/>" +
     " <table> " +
    "<tr> <td>Regards, </td> <tr><br/> " +
     "<tr> <td>TIPS Team</td> <tr><br/>" +
     "</table><br/>" +
                    "Disclaimer Information: <br/>" +
                "Every incident judged by a school staff is based on their perception/observation of the student and may or may not be acceptable by the " +
                "student/parent. Hence the decision of the staff will be final and no parental arbitration will be entertained. But an opportunity to make up for " +
                "an act is also provided for by display of extraordinary character.";

                    mail.Body = content;
                    mail.Subject = "Assess360 Update for the Month of " + DateTime.Now.ToString("MMMM yyyy") + "";
                    mail.IsBodyHtml = true;

                    if (st.Father == true)
                    {
                        Dictionary<string, object> criteria1 = new Dictionary<string, object>();
                        criteria1.Add("Id", Convert.ToInt64(val));
                        Dictionary<long, IList<StudentTemplate>> StudentTemplate = ads.GetStudentDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria1);

                        if (StudentTemplate.First().Value.Count() != 0)
                        {
                            criteria1.Clear();
                            criteria1.Add("PreRegNum", Convert.ToInt64(StudentTemplate.First().Value[0].PreRegNum));
                            criteria1.Add("FamilyDetailType", "Father");
                            Dictionary<long, IList<FamilyDetails>> FamilyDetails = ads.GetFamilyDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria1);

                            if (FamilyDetails.First().Value.Count() != 0)
                            {
                                if ((FamilyDetails.First().Value[0].Email != null) && (FamilyDetails.First().Value[0].Email.Contains("@")))
                                {
                                    if (Regex.IsMatch(FamilyDetails.First().Value[0].Email,
            @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
            @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$",
            RegexOptions.IgnoreCase))
                                    {
                                        mail.To.Add(FamilyDetails.First().Value[0].Email);
                                    }
                                }
                            }
                        }
                    }

                    if (st.Mother == true)
                    {
                        Dictionary<string, object> criteria2 = new Dictionary<string, object>();
                        criteria2.Add("Id", Convert.ToInt64(val));
                        Dictionary<long, IList<StudentTemplate>> StudentTemplate = ads.GetStudentDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria2);
                        if (StudentTemplate.First().Value.Count() != 0)
                        {
                            criteria2.Clear();
                            criteria2.Add("PreRegNum", Convert.ToInt64(StudentTemplate.First().Value[0].PreRegNum));
                            criteria2.Add("FamilyDetailType", "Mother");
                            Dictionary<long, IList<FamilyDetails>> FamilyDetails = ads.GetFamilyDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria2);

                            if (FamilyDetails.First().Value.Count() != 0)
                            {
                                if ((FamilyDetails.First().Value[0].Email != null) && (FamilyDetails.First().Value[0].Email.Contains("@")))
                                {
                                    if (Regex.IsMatch(FamilyDetails.First().Value[0].Email,
            @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
            @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$",
            RegexOptions.IgnoreCase))
                                    {
                                        mail.To.Add(FamilyDetails.First().Value[0].Email);
                                    }
                                }
                            }
                        }
                    }

                    if (st.General == true)
                    {
                        Dictionary<string, object> criteria3 = new Dictionary<string, object>();
                        criteria3.Add("Id", Convert.ToInt64(val));
                        Dictionary<long, IList<StudentTemplate>> StudentTemplate = ads.GetStudentDetailsListWithPagingAndCriteria(0, 10000, string.Empty, string.Empty, criteria3);

                        if (StudentTemplate.First().Value.Count() != 0)
                        {
                            if ((StudentTemplate.First().Value[0].EmailId != null) && (StudentTemplate.First().Value[0].EmailId.Contains("@")))
                                if (Regex.IsMatch(StudentTemplate.First().Value[0].EmailId,
                                        @"^(?("")(""[^""]+?""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
                                        @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9]{2,17}))$",
                                        RegexOptions.IgnoreCase))
                                {
                                    mail.To.Add(StudentTemplate.First().Value[0].EmailId);
                                }
                        }
                    }

                    EmailLog el = new EmailLog();
                    if (From == "live")
                    {
                        mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                        smtp.Credentials = new System.Net.NetworkCredential
                       (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());

                        if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                        {

                            smtp.Send(mail);
                            mail.To.Clear();
                            mail.Bcc.Clear();
                            el.IsSent = true;
                        }

                        el.Id = 0;
                        if (To == "live")
                        {
                            el.EmailTo = campusemaildet.First().EmailId.ToString();
                        }
                        else if (To == "test")
                        {
                            el.EmailTo = campusemaildet.First().EmailId.ToString();
                        }
                        el.EmailCC = mail.CC.ToString();
                        if (mail.To.ToString().Length < 500)
                        {
                            el.EmailTo = mail.To.ToString();
                        }

                        el.Subject = mail.Subject.ToString();

                        if (mail.Body.ToString().Length < 3990)
                        {
                            el.Message = content;
                        }
                        el.EmailDateTime = DateTime.Now.ToString();
                        el.BCC_Count = mail.Bcc.Count;
                        ads.CreateOrUpdateEmailLog(el);
                        mail.To.Clear();
                    }
                    else if (From == "test")
                    {
                        mail.From = new MailAddress(campusemaildet.First().EmailId.ToString());
                        smtp.Credentials = new System.Net.NetworkCredential
                        (campusemaildet.First().EmailId.ToString(), campusemaildet.First().Password.ToString());
                        if (!string.IsNullOrEmpty(mail.From.ToString()) && !string.IsNullOrEmpty(mail.To.ToString()))
                        {
                            smtp.Send(mail);
                            el.IsSent = true;
                        }
                        el.Id = 0;
                        if (To == "live")
                        {
                            el.EmailTo = campusemaildet.First().EmailId.ToString();
                        }
                        else if (To == "test")
                        {
                            el.EmailTo = campusemaildet.First().EmailId.ToString();
                        }
                        el.EmailCC = mail.CC.ToString();
                        if (mail.To.ToString().Length < 500)
                        {
                            el.EmailTo = mail.To.ToString();
                        }
                        el.Subject = mail.Subject.ToString();

                        if (mail.Body.ToString().Length < 3990)
                        {
                            el.Message = content;
                        }
                        el.EmailDateTime = DateTime.Now.ToString();
                        el.BCC_Count = mail.Bcc.Count;
                        ads.CreateOrUpdateEmailLog(el);
                        mail.To.Clear();
                    }
                }
                Session["emailsent"] = "yes";
                return RedirectToAction("Assess360PointChart");
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "AdmissionPolicy");
                throw ex;
            }
        }

        public JsonResult ResetSession()
        {
            Session["emailsent"] = "";
            return Json("", JsonRequestBehavior.AllowGet);
        }

        #region "Documents Related code"

        public ActionResult DocumentsList(long EntityRefId, string AppName, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                DocumentsService srvcDoc = new DocumentsService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("EntityRefId", EntityRefId);
                criteria.Add("AppName", AppName);

                Dictionary<long, IList<Documents>> UploadedFiles = srvcDoc.GetDocumentsListWithPaging(page - 1, rows, sidx, sord, criteria);
                if (UploadedFiles.Values != null && UploadedFiles.First().Value.Count > 0)
                {
                    long totalrecords = UploadedFiles.First().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsondat = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,

                        rows = (from items in UploadedFiles.First().Value
                                select new
                                {
                                    i = 2,
                                    cell = new string[] {
                               items.Upload_Id.ToString(),
                               items.DocumentType,
                               String.Format(@"<a style='color:#034af3;text-decoration:underline' href= '#' onclick = 'DownloadDocument("+"\"" + items.Upload_Id + "\"" + ")' >{0}</a>",items.FileName),
                               items.DocumentSize,
                               items.UploadedBy,
                               items.UploadedOn.ToString()
                            }
                                })
                    };
                    return Json(jsondat, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }

        public ActionResult DownloadDocuments(long DocId, string AppName)
        {
            try
            {
                DocumentsService ds = new DocumentsService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Upload_Id", DocId);
                criteria.Add("AppName", AppName);

                Dictionary<long, IList<Documents>> UploadedFiles = ds.GetDocumentsListWithPaging(0, 1000, string.Empty, string.Empty, criteria);

                if (UploadedFiles != null && UploadedFiles.FirstOrDefault().Value != null)
                {
                    IList<Documents> list = UploadedFiles.FirstOrDefault().Value;
                    Documents doc = list.FirstOrDefault();
                    if (doc.DocumentData != null)
                    {
                        int startIndx = Convert.ToInt32(doc.FileName.LastIndexOf(".").ToString());
                        int FileLength = Convert.ToInt32(doc.FileName.Length);
                        string fileExtn = doc.FileName.Substring(startIndx, (FileLength - startIndx));
                        return File(doc.DocumentData, GetContentTypeByFileExtension(fileExtn), doc.FileName);
                    }
                    else
                    {
                        var dir = Server.MapPath("/Images");
                        string ImagePath = ConfigurationManager.AppSettings["ImageFilePath"];
                        return File(ImagePath, "image/jpg");
                    }
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        [HttpPost]
        public ActionResult UploadDocuments(HttpPostedFileBase uploadedFile, long EntityRefId, string docType, string AppName)
        {
            HttpPostedFileBase theFile = HttpContext.Request.Files["uploadedFile"];
            if (theFile.ContentLength != 0)
            {
                string path = uploadedFile.InputStream.ToString();
                byte[] imageSize = new byte[uploadedFile.ContentLength];

                uploadedFile.InputStream.Read(imageSize, 0, (int)uploadedFile.ContentLength);
                Documents d = new Documents();
                d.ActualDocument = "";
                d.AppName = AppName;
                d.DocumentData = imageSize;
                d.DocumentSize = uploadedFile.ContentLength.ToString();
                d.DocumentType = docType;
                d.EntityRefId = EntityRefId;

                int startIndx = Convert.ToInt32(uploadedFile.FileName.LastIndexOf("\\").ToString()) + 1;
                int FileLength = Convert.ToInt32(uploadedFile.FileName.Length);

                d.FileName = uploadedFile.FileName.Substring(startIndx, (FileLength - startIndx));
                d.UploadedBy = Session["UserId"].ToString();
                d.UploadedOn = DateTime.Now;
                DocumentsService ds = new DocumentsService();
                ds.CreateOrUpdateDocuments(d);
                return Json(new { success = true, result = "Successfully uploaded the file!" }, "text/html", JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { success = false, result = "You have uploded the empty file. Please upload the correct file." }, "text/x-json", JsonRequestBehavior.AllowGet);
            }
        }

        #endregion "Documents Related code"

        #region "Save Search Template"
        public ActionResult SaveorUpdateSearchTemplate(SavedSearchTemplate ObjSvSrchTmplt)
        {
            try
            {
                UserService UsrSrv = new UserService();
                if (ObjSvSrchTmplt.Id <= 0) { ObjSvSrchTmplt.DateCreated = DateTime.Now; }
                else { ObjSvSrchTmplt.DateModified = DateTime.Now; }

                long id = UsrSrv.CreateOrUpdateSavedSearchTemplate(ObjSvSrchTmplt);
                return Json(id, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }

        public ActionResult GetSavedSearchTemplate(string UserId)
        {
            try
            {
                UserService UsrSrv = new UserService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(UserId)) { criteria.Add("UserId", UserId); }
                criteria.Add("Application", "Assess360BulkEntry");
                Dictionary<long, IList<SavedSearchTemplate>> dcnAssCompMaster = UsrSrv.GetSavedSearchTemplateListWithEQPagingAndCriteria(0, 9999, "", "", criteria);
                if (dcnAssCompMaster != null && dcnAssCompMaster.Count > 0)
                {
                    IList<SavedSearchTemplate> AssCompMaster = dcnAssCompMaster.FirstOrDefault().Value;
                    var AssCompMasterLst = new
                    {
                        rows = (
                             from items in AssCompMaster
                             select new
                             {
                                 Text = items.SearchName,
                                 Value = items.Id,
                                 DateCreated = items.DateCreated,
                                 IsDefault = items.IsDefault,
                                 SavedSearch = items.SavedSearch
                             }).ToArray()
                    };
                    return Json(AssCompMasterLst, JsonRequestBehavior.AllowGet);
                }
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }
        #endregion

        public ActionResult Assess360Assessment()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                {
                    return RedirectToAction("LogOff", "Account");
                }
                MastersService ms = new MastersService();
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                if (CampusMaster != null && CampusMaster.Count > 0)
                {
                    ViewBag.CampusMaster = CampusMaster.FirstOrDefault().Value;
                }
                else
                {
                    ViewBag.CampusMaster = string.Empty;
                }

                Dictionary<long, IList<AssessGroupMaster>> AssessGroupMaster = a360.GetAssessGroupMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                if (AssessGroupMaster != null && AssessGroupMaster.Count > 0)
                {
                    ViewBag.AssessGroupMaster = AssessGroupMaster.FirstOrDefault().Value;
                }
                else
                {
                    ViewBag.AssessGroupMaster = string.Empty;
                }

                ViewBag.lgdUserId = (Userobj.UserId != null) ? Userobj.UserId : "";
                ViewBag.lgdUserName = (Userobj.UserName != null) ? Userobj.UserName : "";
                ViewBag.lgdInUserType = (Userobj.UserType != null) ? Userobj.UserType : "";

                return View();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
            finally
            { }
        }

        public ActionResult Assess360AssessmentListJqGrid(int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Dictionary<long, IList<AssessGroupMaster>> AssessGroupMaster = a360.GetAssessGroupMasterListWithPagingAndCriteria(page - 1, rows, string.Empty, string.Empty, criteria);
                if (AssessGroupMaster != null && AssessGroupMaster.Count > 0)
                {
                    long totalrecords = AssessGroupMaster.First().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var AssLst = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,

                        rows = (
                             from items in AssessGroupMaster.First().Value

                             select new
                             {
                                 i = items.Id,
                                 cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.GroupName,
                                           
                                         }
                             }).ToList()
                    };
                    return Json(AssLst, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);

            }


            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult Assess360AssessmentListGrids(int AssGrpId, string cam, string grade, string section, string Staff, string IDNo, string Subject, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(cam) && cam != "Select") { criteria.Add("Campus", cam); }
                if (!string.IsNullOrWhiteSpace(grade) && grade != "Select") { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section) && section != "Select") { criteria.Add("Section", section); }
                if (AssGrpId > 0 && string.IsNullOrWhiteSpace(Staff) && string.IsNullOrWhiteSpace(IDNo) && string.IsNullOrWhiteSpace(Subject))
                {
                    criteria.Add("AssessCompGroup", AssGrpId);
                    Dictionary<long, IList<Assess360AssessmentStaffNames>> StaffNamesBasedOnAssessGroupId = a360.GetStaffNamesBasedOnAssessGroupIdListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                    if (StaffNamesBasedOnAssessGroupId != null && StaffNamesBasedOnAssessGroupId.Count > 0)
                    {
                        long totalrecords = StaffNamesBasedOnAssessGroupId.First().Key;
                        int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var AssLst = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalrecords,

                            rows = (
                                  from items in StaffNamesBasedOnAssessGroupId.First().Value
                                  select new
                                  {
                                      cell = new string[] 
                                    {
                                       items.Staff,
                                    }
                                  }),
                        };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(Staff) && string.IsNullOrWhiteSpace(IDNo) && string.IsNullOrWhiteSpace(Subject))
                {
                    criteria.Add("AssessCompGroup", AssGrpId);
                    criteria.Add("Staff", Staff);
                    Dictionary<long, IList<Assess360AssessmentSubgrids>> StaffNamesBasedOnAssessGroupId = a360.GetAssessListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                    if (StaffNamesBasedOnAssessGroupId != null && StaffNamesBasedOnAssessGroupId.Count > 0)
                    {
                        long totalrecords = StaffNamesBasedOnAssessGroupId.First().Key;
                        int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var AssLst = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalrecords,

                            rows = (
                                 from items in StaffNamesBasedOnAssessGroupId.First().Value

                                 select new
                                 {
                                     cell = new string[] 
                                         {
                                            items.IDNo,
                                            items.StudentName,
                                           
                                         }
                                 }).Distinct().ToList(),
                        };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }

                else if (!string.IsNullOrWhiteSpace(Staff) && !string.IsNullOrWhiteSpace(IDNo) && string.IsNullOrWhiteSpace(Subject))
                {
                    criteria.Add("AssessCompGroup", AssGrpId);
                    criteria.Add("Staff", Staff);
                    criteria.Add("IDNo", IDNo);
                    Dictionary<long, IList<Assess360AssessmentSubgrids>> StaffNamesBasedOnAssessGroupId = a360.GetAssessListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                    if (StaffNamesBasedOnAssessGroupId != null && StaffNamesBasedOnAssessGroupId.Count > 0)
                    {
                        long totalrecords = StaffNamesBasedOnAssessGroupId.First().Key;
                        int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var AssLst = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalrecords,

                            rows = (
                                 from items in StaffNamesBasedOnAssessGroupId.First().Value

                                 select new
                                 {
                                     cell = new string[] 
                                         {
                                            items.Subject,
                                         }
                                 }).Distinct().ToList(),
                        };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }

                else
                {
                    criteria.Add("AssessCompGroup", AssGrpId);
                    criteria.Add("Staff", Staff);
                    criteria.Add("IDNo", IDNo);
                    criteria.Add("Subject", Subject);
                    Dictionary<long, IList<Assess360AssessmentSubgrids>> StaffNamesBasedOnAssessGroupId = a360.GetAssessListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                    if (StaffNamesBasedOnAssessGroupId != null && StaffNamesBasedOnAssessGroupId.Count > 0)
                    {
                        long totalrecords = StaffNamesBasedOnAssessGroupId.First().Key;
                        int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var AssLst = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalrecords,

                            rows = (
                                 from items in StaffNamesBasedOnAssessGroupId.First().Value

                                 select new
                                 {
                                     cell = new string[] 
                                         {
                                            items.AssignmentName,
                                            items.Mark,
                                            items.MarksOutOff,
                                            items.DateCreated.ToString(),
                                            items.EnteredBy,
                                            items.ConsolidatedMarks,

                                         }
                                 }).Distinct().ToList(),
                        };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }
                return Json(null, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        #region "Assess360AssignmentCrosscheck"

        public ActionResult Assess360AssignmentCrossCheck()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                {
                    return RedirectToAction("LogOff", "Account");
                }
                MastersService ms = new MastersService();
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();

                Dictionary<long, IList<AssessGroupMaster>> AssessGroupMaster = a360.GetAssessGroupMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                if (AssessGroupMaster != null && AssessGroupMaster.Count > 0)
                {

                    ViewBag.AssessGroupMaster = AssessGroupMaster.FirstOrDefault().Value;
                }
                else
                {
                    ViewBag.AssessGroupMaster = string.Empty;
                }

                ViewBag.lgdUserId = (Userobj.UserId != null) ? Userobj.UserId : "";
                ViewBag.lgdUserName = (Userobj.UserName != null) ? Userobj.UserName : "";
                ViewBag.lgdInUserType = (Userobj.UserType != null) ? Userobj.UserType : "";
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
            finally
            { }
        }
        public ActionResult Assess360AssignmentListJqGrid(string cam, string grade, string section, string sub, string assmntType, string Staff, string Semester, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if ((string.IsNullOrEmpty(cam))
                    && (string.IsNullOrEmpty(grade))
                    && (string.IsNullOrEmpty(section))
                    && (string.IsNullOrEmpty(sub))
                    && (string.IsNullOrEmpty(assmntType))
                    && (string.IsNullOrEmpty(Staff)))
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }

                else
                {
                    if (!string.IsNullOrWhiteSpace(cam) && cam != "Select")
                    {
                        criteria.Add("Campus", cam);
                    }

                    if (!string.IsNullOrWhiteSpace(grade) && grade != "Select")
                    {
                        criteria.Add("Grade", grade);
                    }

                    if (!string.IsNullOrWhiteSpace(section) && section != "Select")
                    {
                        criteria.Add("Section", section);
                    }

                    if (!string.IsNullOrWhiteSpace(sub) && sub != "Select")
                    {
                        criteria.Add("Subject", sub);
                    }
                    if (!string.IsNullOrWhiteSpace(assmntType) && assmntType != "Select")
                    {
                        int assType = Convert.ToInt16(assmntType);
                        criteria.Add("AssessCompGroup", assType);
                    }
                    if (!string.IsNullOrWhiteSpace(Staff) && Staff != "Select")
                    {
                        criteria.Add("Staff", Staff);
                    }
                    if (!string.IsNullOrEmpty(Semester))
                        criteria.Add("Semester", Semester);
                    DateTime DateNow = DateTime.Now;
                    string acayear = string.Empty;
                    if (grade == "IX" || grade == "X")
                    {
                        acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                        criteria.Add("AcademicYear", acayear);
                    }
                    else
                    {
                        if (DateNow.Month > 5)
                        {
                            acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                            criteria.Add("AcademicYear", acayear);
                        }
                        else
                        {
                            criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                        }
                    }

                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<Assess360Assignment>> AssignmentList = a360.GetAssess360AssignmentListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                    if (AssignmentList != null && AssignmentList.Count > 0)
                    {
                        if (ExptXl == 1)
                        {
                            var List = AssignmentList.First().Value.ToList();
                            base.ExptToXL(List, "AssignmentCrossCheck", (items => new
                            {
                                items.Semester,
                                items.Subject,
                                items.AssignmentName,
                                items.Staff,
                                items.Entered,
                                items.NotEntered,
                                items.TotalStudents,
                            }));
                            return new EmptyResult();
                        }
                        else
                        {
                            long totalrecords = AssignmentList.First().Key;
                            int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                            var AssLst = new
                            {
                                total = totalPages,
                                page = page,
                                records = totalrecords,

                                rows = (
                                     from items in AssignmentList.First().Value

                                     select new
                                     {
                                         cell = new string[] 
                                         {
                                            items.Campus,
                                            items.Grade,
                                            items.Section,
                                            items.Semester,
                                            items.Subject,
                                            items.AssignmentName,
                                            items.Staff!=null?us.GetUserNameByUserId(items.Staff):"",
                                            //items.Staff,
                                           "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"ShowMarksEntered('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.AssessCompGroup + "','" + items.Subject + "','" + items.AssignmentName +"','" + items.Semester +"');\" '>"+items.Entered+"</a>",
                                           "<a style='text-decoration: none; border-bottom: 1px solid red;' onclick=\"ShowMarksNotEntered('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.AssessCompGroup + "','" + items.Subject + "','" + items.AssignmentName +"','" + items.Semester + "');\" '>"+items.NotEntered+"</a>",
                                            items.TotalStudents.ToString()
                                         }
                                     }).ToList()
                            };
                            return Json(AssLst, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return Json(null, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult NotEntered()
        {
            return View();
        }
        public ActionResult NotEnteredListJQGrid(string cam, string gra, string sect, string sub, string AssCompGrp, string AssignmentName, string sem, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            Assess360Service a360 = new Assess360Service();
            ///////////////////////////////////////////////////////////////////////////
            DateTime DateNow = DateTime.Now;
            string acayear = "";
            // academic year condition 
            if (gra == "IX" || gra == "X")
            {
                acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
            }
            else
            {
                if (DateNow.Month > 5)
                {
                    acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                }
                else
                {
                    acayear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                }
            }
            string strQry1 = "";
            strQry1 = strQry1 + " select  Row_number() OVER (ORDER BY Name ASC) AS Id,name,Campus,Grade,Section ";
            strQry1 = strQry1 + " from Assess360 Where IsActive=1 and";
            if (!string.IsNullOrEmpty(cam))
            {
                strQry1 = strQry1 + " Campus='" + cam + "' ";
            }
            if (!string.IsNullOrEmpty(gra))
            {
                strQry1 = strQry1 + " and Grade='" + gra + "' ";
            }
            if (!string.IsNullOrEmpty(sect))
            {
                strQry1 = strQry1 + " and Section='" + sect + "' and AcademicYear='" + acayear + "'";
            }
            strQry1 = strQry1 + " and name not in ";
            strQry1 = strQry1 + " ( ";
            strQry1 = strQry1 + " select distinct  a3.Name from Assess360 a3 ";
            strQry1 = strQry1 + " inner join Assess360Component ac ";
            strQry1 = strQry1 + " on a3.Id=ac.Assess360Id ";
            strQry1 = strQry1 + " where a3.IsActive=1 and";
            //   strQry1 = strQry1 + " ac.AssessCompGroup NOT IN ( 0, 1, 2) and ";
            if (!string.IsNullOrEmpty(cam))
            {
                strQry1 = strQry1 + " a3.Campus='" + cam + "' ";
            }
            if (!string.IsNullOrEmpty(gra))
            {
                strQry1 = strQry1 + " and a3.Grade='" + gra + "' ";
            }
            if (!string.IsNullOrEmpty(sect))
            {
                strQry1 = strQry1 + " and a3.Section='" + sect + "' and a3.AcademicYear='" + acayear + "' ";
            }

            if (!string.IsNullOrEmpty(AssCompGrp))
            {
                int assType = Convert.ToInt16(AssCompGrp);
                strQry1 = strQry1 + " and AssessCompGroup=" + assType + " ";
            }
            if (!string.IsNullOrEmpty(sub))
            {
                strQry1 = strQry1 + " and Subject='" + sub + "' ";
            }
            if (!string.IsNullOrEmpty(AssignmentName))
            {
                //strQry1 = strQry1 + " and AssignmentName='"+"" + AssignmentName + "' ";
                strQry1 = strQry1 + " and AssignmentName=N'" + AssignmentName + "' ";
            }
            if (!string.IsNullOrEmpty(sem))
            {
                //strQry1 = strQry1 + " and AssignmentName='"+"" + AssignmentName + "' ";
                strQry1 = strQry1 + " and Semester=N'" + sem + "' ";
            }

            strQry1 = strQry1 + ") ";

            List<DataRow> NotEnteredStudentList = null;

            DataTable NotEnteredListDT = a360.NotEnteredStudentList(strQry1);

            if (NotEnteredListDT != null)
            {
                NotEnteredStudentList = NotEnteredListDT.AsEnumerable().ToList();
            }

            if (NotEnteredStudentList != null)
            {

                if (ExptXl == 1)
                {

                }

                else
                {
                    long totalrecords = NotEnteredStudentList.Count;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var Lst = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,
                        rows = (
                             from items in NotEnteredStudentList

                             select new
                             {
                                 cell = new string[] 
                                         {
                                            items.ItemArray[1].ToString(),
                                            items.ItemArray[2].ToString(),
                                            items.ItemArray[3].ToString(),
                                            items.ItemArray[4].ToString(),
                                         }
                             }).ToList()
                    };
                    return Json(Lst, JsonRequestBehavior.AllowGet);
                }
            }

            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }

            return Json(null, JsonRequestBehavior.AllowGet);
        }

        public PartialViewResult MarksEntered()
        {
            return PartialView();
        }
        public ActionResult MarksEnteredListJqGrid(string cam, string gra, string sect, string sub, string AssCompGrp, string AssignmentName, string sem, int rows, string sidx, string sord, int? page = 1)
        {
            Assess360Service a360 = new Assess360Service();
            DateTime DateNow = DateTime.Now;
            string acayear = "";
            // academic year condition 
            if (gra == "IX" || gra == "X")
            {
                acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
            }
            else
            {
                if (DateNow.Month > 5)
                {
                    acayear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                }
                else
                {
                    acayear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                }
            }
            string strQry1 = "";
            strQry1 = strQry1 + " select Row_number()OVER (ORDER BY Name ASC) AS Id, a3.Campus,a3.Grade, a3.Section,ac.AssessCompGroup,ac.Subject,ac.AssignmentName, a3.Name, ac.Mark,ac.MarksOutOff ";
            strQry1 = strQry1 + " from Assess360 a3 ";
            strQry1 = strQry1 + " inner join Assess360Component ac ";
            strQry1 = strQry1 + " on a3.Id=ac.Assess360Id ";
            strQry1 = strQry1 + " where a3.IsActive=1 and ";
            //  strQry1 = strQry1 + " AssessCompGroup NOT IN ( 0, 1, 2 ) and ";
            if (!string.IsNullOrEmpty(cam))
            {
                strQry1 = strQry1 + " Campus='" + cam + "' ";
            }
            if (!string.IsNullOrEmpty(gra))
            {
                strQry1 = strQry1 + " and Grade='" + gra + "' ";
            }
            if (!string.IsNullOrEmpty(sect))
            {
                strQry1 = strQry1 + " and Section='" + sect + "'and AcademicYear='" + acayear + "' ";
            }
            if (!string.IsNullOrEmpty(AssCompGrp))
            {
                int assType = Convert.ToInt16(AssCompGrp);
                strQry1 = strQry1 + " and AssessCompGroup=" + assType + " ";
            }
            if (!string.IsNullOrEmpty(sub))
            {
                strQry1 = strQry1 + " and Subject='" + sub + "' ";
            }
            if (!string.IsNullOrEmpty(AssignmentName))
            {
                strQry1 = strQry1 + " and AssignmentName=N'" + AssignmentName + "' ";
            }
            if (!string.IsNullOrEmpty(sem))
            {
                //strQry1 = strQry1 + " and AssignmentName='"+"" + AssignmentName + "' ";
                strQry1 = strQry1 + " and Semester=N'" + sem + "' ";
            }
            List<DataRow> EnteredStudentList = null;

            DataTable EnteredListDT = a360.EnteredStudentList(strQry1);

            if (EnteredListDT != null)
            {
                EnteredStudentList = EnteredListDT.AsEnumerable().ToList();
            }

            if (EnteredStudentList != null)
            {
                long totalrecords = EnteredStudentList.Count;
                int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                var Lst = new
                {
                    total = totalPages,
                    page = page,
                    records = totalrecords,
                    rows = (
                         from items in EnteredStudentList

                         select new
                         {
                             cell = new string[] 
                                         {
                                            items.ItemArray[7].ToString(),
                                            items.ItemArray[8].ToString(),
                                            items.ItemArray[9].ToString(),
                                         }
                         }).ToList()
                };
                return Json(Lst, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        public ActionResult AssignmentMaster()
        {

            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    Dictionary<long, IList<AcademicyrMaster>> AcademicyrMaster = ms.GetAcademicyrMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                    ViewBag.acadddl = AcademicyrMaster.First().Value;
                    int[] values = new int[7] { 4, 5, 6, 7, 8, 9, 10 };
                    criteria.Add("IsCredit", true);
                    //Dictionary<long, string> brncd = new Dictionary<long, string>();
                    Dictionary<long, IList<AssessCompMaster>> dcnAssCompMaster = a360Obj.GetAssess360CompMasterListWithPagingAndCriteriaWithIn(0, 9999, "", "", "GroupId", values, criteria, null);
                    //Dictionary<long, IList<AssessGroupMaster>> dcnAssCompMaster = a360Obj.GetAssessGroupMasterListWithPagingAndCriteria(0, 9999, "Id", "desc", criteria);
                    ViewBag.AssCompMast = dcnAssCompMaster.First().Value;

                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult AssignmentNameJqGrid(string cam, string gra, string sub, int rows, string sidx, string sord, int? page = 1)
        {
            MastersService ms = new MastersService();
            AssignmentNameMaster anm = new AssignmentNameMaster();
            Dictionary<string, object> criteria = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(cam))
                criteria.Add("Campus", cam);
            if (!string.IsNullOrEmpty(gra))
                criteria.Add("Grade", gra);

            if (!string.IsNullOrEmpty(sub))
                criteria.Add("Subject", sub);
            sord = sord == "desc" ? "Desc" : "Asc";
            Dictionary<long, IList<AssignmentNameMaster>> AsgnmtMaster = ms.GetAssignmentNameMasterListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
            if (AsgnmtMaster.Values != null && AsgnmtMaster.First().Value.Count > 0)
            {
                long totalrecords = AsgnmtMaster.First().Key;
                int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                var jsondat = new
                {
                    total = totalPages,
                    page = page,
                    records = totalrecords,

                    rows = (from items in AsgnmtMaster.First().Value
                            select new
                            {
                                i = 2,
                                cell = new string[] {
                               items.Id.ToString(),
                               items.Campus,
                               items.Grade,
                               items.AcademicYear,
                               items.AssignmentType,
                               items.Subject,
                               items.AssignmentName
                            }
                            })
                };
                return Json(jsondat, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return null;
            }
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult AddAssignmentName(AssignmentNameMaster anm, string test)
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    MastersService ms = new MastersService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    Assess360Service asses360ser = new Assess360Service();
                    anm.AssignmentCode = anm.AssignmentType;
                    anm.CreatedBy = userId;
                    anm.CreatedDate = DateTime.Now.ToString("dd/MM/yyyy");
                    AssessCompMaster AGM = asses360ser.GetAssessGroupUsingId(Convert.ToInt32(anm.AssignmentType));
                    criteria.Add("IsCredit", AGM.IsCredit = true);
                    anm.AssignmentType = AGM.CompName;
                    criteria.Clear();
                    criteria.Add("AssignmentName", anm.AssignmentName);
                    criteria.Add("Campus", anm.Campus);
                    criteria.Add("Grade", anm.Grade);
                    criteria.Add("Subject", anm.Subject);
                    criteria.Add("AcademicYear", anm.AcademicYear);
                    Dictionary<long, IList<AssignmentNameMaster>> AssignmentName = ms.GetAssignmentNameMasterListWithPagingAndCriteria(0, 1000, string.Empty, string.Empty, criteria);
                    if (test == "edit")
                    {
                        if (AssignmentName != null && AssignmentName.First().Value != null && AssignmentName.First().Value.Count > 0)
                        {
                            var script = @"ErrMsg(""The given Assignment Name already exists!"");";
                            return JavaScript(script);
                        }
                        else
                        {
                            anm.UpdatedBy = userId;
                            anm.UpdatedDate = DateTime.Now.ToString("dd/MM/yyyy");
                            ms.CreateOrUpdateAssignmentNameMaster(anm);
                            var script = @"InfoMsg(""The given Assignment Name edited successfully."");";
                            return JavaScript(script);
                        }

                    }
                    else if (test == "del")
                    {
                        ms.DeleteAssignmentName(anm);
                        var script = @"InfoMsg(""The Assignment Name deleted successfully."");";
                        return JavaScript(script);
                    }
                    else
                    {
                        if (AssignmentName != null && AssignmentName.First().Value != null && AssignmentName.First().Value.Count > 0)
                        {
                            var script = @"ErrMsg(""The given Assignment Name already Exists!"");";
                            return JavaScript(script);
                        }
                        else
                        {
                            anm.CreatedBy = userId;
                            anm.CreatedDate = DateTime.Now.ToString("dd/MM/yyyy");
                            anm.UpdatedBy = userId;
                            anm.UpdatedDate = DateTime.Now.ToString("dd/MM/yyyy");
                            ms.CreateOrUpdateAssignmentNameMaster(anm);
                            var script = @"InfoMsg(""The given Assignment Name addedd successfully."");";
                            return JavaScript(script);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult GetAssignmentNameByCampusGradeSubject(string cam, string gra, string sub)
        {
            try
            {
                MastersService msSrv = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(cam))
                    criteria.Add("Campus", cam);
                if (!string.IsNullOrEmpty(gra))
                    criteria.Add("Grade", gra);
                if (!string.IsNullOrEmpty(sub))
                    criteria.Add("Subject", sub);

                DateTime DateNow = DateTime.Now;
                //if (gra == "IX" || gra == "X")
                //{
                //    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                //}
                //else
                //{
                if (DateNow.Month > 5)
                {
                    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                }
                else
                {
                    criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                }
                // }

                Dictionary<long, IList<AssignmentNameMaster>> AsgnmtMaster = msSrv.GetAssignmentNameMasterListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                if (AsgnmtMaster != null && AsgnmtMaster.Count > 0 && AsgnmtMaster.First().Key > 0)
                {
                    var assignmentlist = new
                    {
                        rows = (
                        from items in AsgnmtMaster.First().Value
                        select new
                        {
                            Text = items.AssignmentName,
                            Value = items.AssignmentName
                        }).Distinct().ToArray()
                    };

                    return Json(assignmentlist, JsonRequestBehavior.AllowGet);
                }
                else
                { return Json(null, JsonRequestBehavior.AllowGet); }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally { }
        }

        #region start new subject Based Semester Marks

        #region "Final Result"
        public ActionResult FinalResult()
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult JqGridFinalResults(string campus, string grade, string section, string ExportType, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                DateTime DateNow = DateTime.Now;
                string Academicyear = null;
                if (!string.IsNullOrEmpty(campus) && !string.IsNullOrEmpty(grade) && !string.IsNullOrEmpty(section))
                {
                    if (grade == "IX" || grade == "X")
                    {
                        Academicyear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    }
                    else
                    {
                        if (DateNow.Month > 5) { Academicyear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString(); }
                        else { Academicyear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString(); }
                    }
                    Assess360Service A3601 = new Assess360Service();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                    criteria.Add("AcademicYear", Academicyear);
                    criteria.Add("AdmissionStatus", "Registered");
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<SubjectStudentTemplate>> GetStudentList = A3601.GetSubjectMarksViewListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                    criteria.Add("AcademicYear", Academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    // Dictionary<long, IList<StudentFinalResult_vw>> StudentFinalResultList = A3601.GetStudentFinalResultWidthSubjectWiseList(0, 9999, string.Empty, string.Empty, criteria);
                    Dictionary<long, IList<Vw_FinalResult>> StudentFinalResultList = A3601.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<Vw_FinalResult> alreadyExists = StudentFinalResultList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     orderby p.Id ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (SubjectStudentTemplate sv in GetStudentList.FirstOrDefault().Value)
                    {
                        double engtotal = 0, langtotal = 0, hctotal = 0, mathstotal = 0, biototal = 0, phytotal = 0, chetotal = 0, icttotal = 0, ecototal = 0, phyedutotal = 0, combtotal = 0;
                        if (PreRegNumber.Contains((sv.PreRegNum)))
                        {
                            string[] arr = new string[] { "English", "Language", "HC&G", "Mathematics", "Biology", "Physics", "Chemistry", "ICT", "Economics", "Physical Education" };
                            for (int i = 0; i < arr.Length; i++)
                            {
                                var Result = (from u in StudentFinalResultList.First().Value
                                              where u.PreRegNum == sv.PreRegNum && u.Subject == arr[i]
                                              select u).ToList();

                                if ((arr[i] == "English") && Result.Count != 0)
                                {
                                    sv.EngSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.EngSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// English 
                                    sv.EngTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.EngGrade = Convert.ToString(GetGradeList(sv.EngTotal));

                                }
                                else if ((arr[i] == "Language") && Result.Count != 0)
                                {
                                    sv.LangSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.LangSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// Language Info
                                    sv.LangTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.LangGrade = Convert.ToString(GetGradeList(sv.LangTotal));
                                }
                                else if ((arr[i] == "HC&G") && Result.Count != 0)
                                {
                                    sv.HcSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.HcSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// H&C
                                    sv.HcTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.HcGrade = Convert.ToString(GetGradeList(sv.HcTotal));
                                }
                                else if ((arr[i] == "Mathematics") && Result.Count != 0)
                                {
                                    sv.MathsSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.MathsSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// Maths Info
                                    sv.MathsTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.MathsGrade = Convert.ToString(GetGradeList(sv.MathsTotal));
                                }
                                else if ((arr[i] == "Biology") && Result.Count != 0)
                                {
                                    sv.BioSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.BioSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// Biology
                                    sv.BioTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.BioGrade = Convert.ToString(GetGradeList(sv.BioTotal));

                                }
                                else if ((arr[i] == "Physics") && Result.Count != 0)
                                {
                                    sv.PhySemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.PhySemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// Physics
                                    sv.PhyTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.PhyGrade = Convert.ToString(GetGradeList(sv.PhyTotal));
                                }
                                else if ((arr[i] == "Chemistry") && Result.Count != 0)
                                {
                                    sv.CheSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.CheSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// Chemistry
                                    sv.CheTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.CheGrade = Convert.ToString(GetGradeList(sv.CheTotal));
                                }
                                else if ((arr[i] == "ICT") && Result.Count != 0)
                                {
                                    sv.IctSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.IctSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// ICT
                                    sv.IctTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.IctGrade = Convert.ToString(GetGradeList(sv.IctTotal));
                                }
                                else if ((arr[i] == "Economics") && Result.Count != 0)
                                {
                                    sv.EcoSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.EcoSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// ICT
                                    sv.EcoTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.EcoGrade = Convert.ToString(GetGradeList(sv.EcoTotal));
                                }
                                else if ((arr[i] == "Physical Education") && Result.Count != 0)
                                {
                                    sv.PhyEduSemI = Result[0].SemI == null ? "" : Result[0].SemI;
                                    sv.PhyEduSemII = Result[0].SemII == null ? "" : Result[0].SemII;
                                    /// ICT
                                    sv.PhyEduTotal = Convert.ToString(Result[0].TotalMarks);
                                    sv.PhyEduGrade = Convert.ToString(GetGradeList(sv.PhyEduTotal));
                                }
                                else { }
                            }
                            if ((grade == "IX" || grade == "X") && (section == "A" || section == "B"))
                            {
                                double x, y, z, a, b, c, round1, round2;
                                x = !string.IsNullOrEmpty(sv.PhySemI) ? x = Convert.ToDouble(sv.PhySemI) : x = 0; ;
                                y = !string.IsNullOrEmpty(sv.CheSemI) ? y = Convert.ToDouble(sv.CheSemI) : y = 0; ;
                                z = !string.IsNullOrEmpty(sv.BioSemI) ? z = Convert.ToDouble(sv.BioSemI) : z = 0; ;
                                round1 = ((x + y + z) / 3);

                                sv.CombSemI = Convert.ToString(Math.Round(round1, 1));
                                a = !string.IsNullOrEmpty(sv.PhySemII) ? a = Convert.ToDouble(sv.PhySemII) : a = 0; ;
                                b = !string.IsNullOrEmpty(sv.CheSemII) ? b = Convert.ToDouble(sv.CheSemII) : b = 0; ;
                                c = !string.IsNullOrEmpty(sv.BioSemII) ? c = Convert.ToDouble(sv.BioSemII) : c = 0; ;
                                round2 = ((a + b + c) / 3);

                                sv.CombSemII = Convert.ToString(Math.Round(round2, 1));
                                /// Combine Science
                                if ((sv.CombSemI) != "0" && (sv.CombSemII) != "0") { combtotal = Convert.ToDouble((Convert.ToDecimal(sv.CombSemI) + Convert.ToDecimal(sv.CombSemII)) / 2); }
                                else if ((sv.CombSemI) != "0") { combtotal = Convert.ToDouble(Convert.ToDecimal(sv.CombSemI)); }
                                else if ((sv.CombSemII) != "0") { combtotal = Convert.ToDouble(Convert.ToDecimal(sv.CombSemII)); }
                                else { combtotal = Convert.ToDouble(0); }
                                sv.CombTotal = Convert.ToString(Math.Round(combtotal, 1));
                                sv.CombGrade = Convert.ToString(GetGradeList(sv.CombTotal));

                                // overall grand total,percentage and overall Grade
                                Double grandtotal = Convert.ToDouble(Convert.ToDecimal(sv.EngTotal) + Convert.ToDecimal(sv.LangTotal) + Convert.ToDecimal(sv.EcoTotal)
                                    + Convert.ToDecimal(sv.MathsTotal) + Convert.ToDecimal(sv.CombTotal) + Convert.ToDecimal(sv.IctTotal) + Convert.ToDecimal((sv.PhyEduTotal)));
                                int count = 0;
                                if (Convert.ToDecimal(sv.EngTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.LangTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.EcoTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.MathsTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.CombTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.IctTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.PhyEduTotal) != 0) { count = count + 1; }

                                sv.GrandTotal = Convert.ToString(Math.Round(grandtotal, 1));
                                Double percentage = Convert.ToDouble(Convert.ToDouble((Convert.ToDecimal(sv.GrandTotal) / (count * 100)) * 100));
                                // Double percentage = Convert.ToDouble(Convert.ToDouble((Convert.ToDecimal(sv.GrandTotal) / 700) * 100));
                                sv.Percentage = Convert.ToString(Math.Round(percentage, 1));
                                sv.OverallGrade = Convert.ToString(GetGradeList(sv.Percentage));
                            }
                            else if ((grade == "IX" || grade == "X") && (section == "C" || section == "D"))
                            {
                                // overall grand total,percentage and overall Grade
                                Double grandtotal = Convert.ToDouble(Convert.ToDecimal(sv.EngTotal) + Convert.ToDecimal(sv.LangTotal) + Convert.ToDecimal(sv.EcoTotal)
                                    + Convert.ToDecimal(sv.MathsTotal) + Convert.ToDecimal(sv.BioTotal) + Convert.ToDecimal(sv.PhyTotal)
                                    + Convert.ToDecimal(sv.CheTotal) + Convert.ToDecimal(sv.IctTotal));

                                sv.GrandTotal = Convert.ToString(Math.Round(grandtotal, 1));
                                int count = 0;
                                if (Convert.ToDecimal(sv.EngTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.LangTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.EcoTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.MathsTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.BioTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.PhyTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.CheTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.IctTotal) != 0) { count = count + 1; }
                                Double percentage = Convert.ToDouble(Convert.ToDouble((Convert.ToDecimal(sv.GrandTotal) / (count * 100)) * 100));
                                //Double percentage = Convert.ToDouble(Convert.ToDouble((Convert.ToDecimal(sv.GrandTotal) / 800) * 100));
                                sv.Percentage = Convert.ToString(Math.Round(percentage, 1));
                                sv.OverallGrade = Convert.ToString(GetGradeList(sv.Percentage));
                            }
                            else
                            {
                                // overall grand total,percentage and overall Grade
                                Double grandtotal = Convert.ToDouble(Convert.ToDecimal(sv.EngTotal) + Convert.ToDecimal(sv.LangTotal) + Convert.ToDecimal(sv.HcTotal)
                                    + Convert.ToDecimal(sv.MathsTotal) + Convert.ToDecimal(sv.BioTotal) + Convert.ToDecimal(sv.PhyTotal)
                                    + Convert.ToDecimal(sv.CheTotal) + Convert.ToDecimal(sv.IctTotal));
                                sv.GrandTotal = Convert.ToString(Math.Round(grandtotal, 1));

                                int count = 0;
                                if (Convert.ToDecimal(sv.EngTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.LangTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.HcTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.MathsTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.BioTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.PhyTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.CheTotal) != 0) { count = count + 1; }
                                if (Convert.ToDecimal(sv.IctTotal) != 0) { count = count + 1; }

                                Double percentage = Convert.ToDouble(Convert.ToDouble((Convert.ToDecimal(sv.GrandTotal) / (count * 100)) * 100));
                                //Double percentage = Convert.ToDouble(Convert.ToDouble((Convert.ToDecimal(sv.GrandTotal) / 800) * 100));
                                sv.Percentage = Convert.ToString(Math.Round(percentage, 1));
                                sv.OverallGrade = Convert.ToString(GetGradeList(sv.Percentage));
                            }
                        }
                        else { }
                    }
                    // End of Foreach Methods...
                    if ((grade == "IX" || grade == "X") && (section == "A" || section == "B"))
                    {
                        if (ExportType == "Excel")
                        {
                            string details = "<table><tr><td>Campus - " + campus + "</td><td>Grade - " + grade + "</td><td>Section - " + section + "</td></tr></table>";
                            string headerTable = @"<Table border='1px' cellpadding='9' cellspacing='0'><tr><td colspan='33' align='center' style='font-size: large;'>The Indian Public School</td></tr>
                                                    <tr>
                                                        <td colspan='1' rowspan='3' style='vertical-align:middle;'><b>Admin No</b></td>
                                                        <td colspan='1' rowspan='3' style='vertical-align:middle;'><b>Name of the Student</b></td>
                                                        <td colspan='4' align='center'><b>English</b></td>
                                                        <td colspan='4' align='center'><b>Language</b></td>
                                                        <td colspan='4' align='center'><b>Economics</b></td>
                                                        <td colspan='4' align='center'><b>Mathematics</b></td>
                                                        <td colspan='4' align='center'><b>Combine Science</b></td>
                                                        <td colspan='4' align='center'><b>ICT</b></td>
                                                        <td colspan='4' align='center'><b>Physical Education</b></td>
                                                        <td align='center'  valign='middle'><b>Grand total</b></td>
                                                        <td align='center'  valign='middle'><b>Percentage</b></td>
                                                        <td align='center'  rowspan='3' style='vertical-align:middle;'><b>Grade</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center' rowspan='2'><b> 700 </b></td>
                                                        <td align='center'><b> % </b></td>
                                                    </tr>
                                                    <tr>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                    </tr> </b></Table>";
                            var List = GetStudentList.First().Value.ToList();
                            ExptToXL_FinalResult(List, "StudentMarks", (items => new
                            {
                                items.NewId,
                                items.Name,
                                items.EngSemI,
                                items.EngSemII,
                                items.EngTotal,
                                items.EngGrade,
                                items.LangSemI,
                                items.LangSemII,
                                items.LangTotal,
                                items.LangGrade,
                                items.EcoSemI,
                                items.EcoSemII,
                                items.EcoTotal,
                                items.EcoGrade,
                                items.MathsSemI,
                                items.MathsSemII,
                                items.MathsTotal,
                                items.MathsGrade,
                                items.CombSemI,
                                items.CombSemII,
                                items.CombTotal,
                                items.CombGrade,
                                items.IctSemI,
                                items.IctSemII,
                                items.IctTotal,
                                items.IctGrade,
                                items.PhyEduSemI,
                                items.PhyEduSemII,
                                items.PhyEduTotal,
                                items.PhyEduGrade,
                                items.GrandTotal,
                                items.Percentage,
                                items.OverallGrade,
                            }), headerTable, details);
                            return new EmptyResult();
                        }
                        else
                        {
                            long totalrecords = GetStudentList.First().Key;
                            int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                            var jsonresult = new
                            {
                                total = totalPages,
                                page = page,
                                records = totalrecords,

                                rows = (from items in GetStudentList.First().Value
                                        select new
                                        {
                                            cell = new string[] {
                                                       items.PreRegNum.ToString(),
                                                       items.NewId,
                                                       items.Name,
                                                       items.EngSemI,items.EngSemII,items.EngTotal,items.EngGrade,
                                                       items.LangSemI,items.LangSemII,items.LangTotal,items.LangGrade,
                                                       items.EcoSemI,items.EcoSemII,items.EcoTotal,items.EcoGrade,
                                                       items.MathsSemI,items.MathsSemII,items.MathsTotal,items.MathsGrade,
                                                       items.CombSemI,items.CombSemII,items.CombTotal,items.CombGrade,
                                                       items.IctSemI,items.IctSemII,items.IctTotal,items.IctGrade,
                                                       items.PhyEduSemI,items.PhyEduSemII,items.PhyEduTotal,items.PhyEduGrade,
                                                       items.GrandTotal,items.Percentage,items.OverallGrade,
                                                    }
                                        })
                            };
                            return Json(jsonresult, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if ((grade == "IX" || grade == "X") && (section == "C" || section == "D"))
                    {

                        if (ExportType == "Excel")
                        {
                            string details = "<table><tr><td>Campus - " + campus + "</td><td>Grade - " + grade + "</td><td>Section - " + section + "</td></tr></table>";
                            string headerTable = @"<Table border='1px' cellpadding='10' cellspacing='0'><tr><td colspan='37' align='center' style='font-size: large;'>The Indian Public School</td></tr>
                                                    <tr>
                                                        <td colspan='1' rowspan='3' style='vertical-align:middle;'><b>Admin No</b></td>
                                                        <td colspan='1' rowspan='3' style='vertical-align:middle;'><b>Name of the Student</b></td>
                                                        <td colspan='4' align='center'><b>English</b></td>
                                                        <td colspan='4' align='center'><b>Language</b></td>
                                                        <td colspan='4' align='center'><b>Economics</b></td>
                                                        <td colspan='4' align='center'><b>Mathematics</b></td>
                                                        <td colspan='4' align='center'><b>Biology</b></td>
                                                        <td colspan='4' align='center'><b>Physics</b></td>
                                                        <td colspan='4' align='center'><b>Chemistry</b></td>
                                                        <td colspan='4' align='center'><b>ICT</b></td>
                                                        <td align='center'  valign='middle'><b>Grand total</b></td>
                                                        <td align='center'  valign='middle'><b>Percentage</b></td>
                                                        <td align='center'  rowspan='3' style='vertical-align:middle;'><b>Grade</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center' rowspan='2'><b> 800 </b></td>
                                                        <td align='center'><b> % </b></td>
                                                    </tr>
                                                    <tr>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                    </tr> </b></Table>";
                            var List = GetStudentList.First().Value.ToList();
                            ExptToXL_FinalResult(List, "StudentMarks", (items => new
                            {
                                items.NewId,
                                items.Name,
                                items.EngSemI,
                                items.EngSemII,
                                items.EngTotal,
                                items.EngGrade,
                                items.LangSemI,
                                items.LangSemII,
                                items.LangTotal,
                                items.LangGrade,
                                items.EcoSemI,
                                items.EcoSemII,
                                items.EcoTotal,
                                items.EcoGrade,
                                items.MathsSemI,
                                items.MathsSemII,
                                items.MathsTotal,
                                items.MathsGrade,
                                items.BioSemI,
                                items.BioSemII,
                                items.BioTotal,
                                items.BioGrade,
                                items.PhySemI,
                                items.PhySemII,
                                items.PhyTotal,
                                items.PhyGrade,
                                items.CheSemI,
                                items.CheSemII,
                                items.CheTotal,
                                items.CheGrade,
                                items.IctSemI,
                                items.IctSemII,
                                items.IctTotal,
                                items.IctGrade,
                                items.GrandTotal,
                                items.Percentage,
                                items.OverallGrade,
                            }), headerTable, details);
                            return new EmptyResult();
                        }
                        else
                        {
                            long totalrecords = GetStudentList.First().Key;
                            int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                            var jsonresult = new
                            {
                                total = totalPages,
                                page = page,
                                records = totalrecords,

                                rows = (from items in GetStudentList.First().Value
                                        select new
                                        {
                                            cell = new string[] {
                                                       items.PreRegNum.ToString(),
                                                       items.NewId,
                                                       items.Name,
                                                       items.EngSemI,items.EngSemII,items.EngTotal,items.EngGrade,
                                                       items.LangSemI,items.LangSemII,items.LangTotal,items.LangGrade,
                                                       items.EcoSemI,items.EcoSemII,items.EcoTotal,items.EcoGrade,
                                                       items.MathsSemI,items.MathsSemII,items.MathsTotal,items.MathsGrade,
                                                       items.BioSemI,items.BioSemII,items.BioTotal,items.BioGrade,
                                                       items.PhySemI,items.PhySemII,items.PhyTotal,items.PhyGrade,
                                                       items.CheSemI,items.CheSemII,items.CheTotal,items.CheGrade,
                                                       items.IctSemI,items.IctSemII,items.IctTotal,items.IctGrade,
                                                       items.GrandTotal,items.Percentage,items.OverallGrade,
                                                    }
                                        })
                            };
                            return Json(jsonresult, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        if (ExportType == "Excel")
                        {
                            string details = "<table><tr><td>Campus - " + campus + "</td><td>Grade - " + grade + "</td><td>Section - " + section + "</td></tr></table>";
                            string headerTable = @"<Table border='1px' cellpadding='10' cellspacing='0'><tr><td colspan='37' align='center' style='font-size: large;'>The Indian Public School</td></tr>
                                                    <tr>
                                                        <td colspan='1' rowspan='3' style='vertical-align:middle;'><b>Admin No</b></td>
                                                        <td colspan='1' rowspan='3' style='vertical-align:middle;'><b>Name of the Student</b></td>
                                                        <td colspan='4' align='center'><b>English</b></td>
                                                        <td colspan='4' align='center'><b>Language</b></td>
                                                        <td colspan='4' align='center'><b>HC&G</b></td>
                                                        <td colspan='4' align='center'><b>Mathematics</b></td>
                                                        <td colspan='4' align='center'><b>Biology</b></td>
                                                        <td colspan='4' align='center'><b>Physics</b></td>
                                                        <td colspan='4' align='center'><b>Chemistry</b></td>
                                                        <td colspan='4' align='center'><b>ICT</b></td>
                                                        <td align='center'  valign='middle'><b>Grand total</b></td>
                                                        <td align='center'  valign='middle'><b>Percentage</b></td>
                                                        <td align='center'  rowspan='3' style='vertical-align:middle;'><b>Grade</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center'><b> Sem I </b></td>
                                                        <td align='center'><b> Sem II </b></td>
                                                        <td align='center'><b> Overall Total </b></td>
                                                        <td align='center' rowspan='2' style='vertical-align:middle;'><b> Overall Grade </b></td>
                                                        <td align='center' rowspan='2'><b> 800 </b></td>
                                                        <td align='center'><b> % </b></td>
                                                    </tr>
                                                    <tr>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                        <td align='center'><b> 100 </b></td>
                                                    </tr> </b></Table>";
                            var List = GetStudentList.First().Value.ToList();
                            ExptToXL_FinalResult(List, "StudentMarks", (items => new
                            {
                                items.NewId,
                                items.Name,
                                items.EngSemI,
                                items.EngSemII,
                                items.EngTotal,
                                items.EngGrade,
                                items.LangSemI,
                                items.LangSemII,
                                items.LangTotal,
                                items.LangGrade,
                                items.HcSemI,
                                items.HcSemII,
                                items.HcTotal,
                                items.HcGrade,
                                items.MathsSemI,
                                items.MathsSemII,
                                items.MathsTotal,
                                items.MathsGrade,
                                items.BioSemI,
                                items.BioSemII,
                                items.BioTotal,
                                items.BioGrade,
                                items.PhySemI,
                                items.PhySemII,
                                items.PhyTotal,
                                items.PhyGrade,
                                items.CheSemI,
                                items.CheSemII,
                                items.CheTotal,
                                items.CheGrade,
                                items.IctSemI,
                                items.IctSemII,
                                items.IctTotal,
                                items.IctGrade,
                                items.GrandTotal,
                                items.Percentage,
                                items.OverallGrade,
                            }), headerTable, details);
                            return new EmptyResult();
                        }
                        else
                        {
                            long totalrecords = GetStudentList.First().Key;
                            int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                            var jsonresult = new
                            {
                                total = totalPages,
                                page = page,
                                records = totalrecords,

                                rows = (from items in GetStudentList.First().Value
                                        select new
                                        {
                                            cell = new string[] {
                                                       items.PreRegNum.ToString(),
                                                       items.NewId,
                                                       items.Name,
                                                       items.EngSemI,items.EngSemII,items.EngTotal,items.EngGrade,
                                                       items.LangSemI,items.LangSemII,items.LangTotal,items.LangGrade,
                                                       items.HcSemI,items.HcSemII,items.HcTotal,items.HcGrade,
                                                       items.MathsSemI,items.MathsSemII,items.MathsTotal,items.MathsGrade,
                                                       items.BioSemI,items.BioSemII,items.BioTotal,items.BioGrade,
                                                       items.PhySemI,items.PhySemII,items.PhyTotal,items.PhyGrade,
                                                       items.CheSemI,items.CheSemII,items.CheTotal,items.CheGrade,
                                                       items.IctSemI,items.IctSemII,items.IctTotal,items.IctGrade,
                                                       items.GrandTotal,items.Percentage,items.OverallGrade,
                                                    }
                                        })
                            };
                            return Json(jsonresult, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        #endregion "End"

        #region "Subject Marks"
        public ActionResult SubjectMarks()
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult GetSubjectMarksJqGrid(string campus, string grade, string section, string subject, string semester, string academicyear, string ExportType, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                if (!string.IsNullOrEmpty(campus) && !string.IsNullOrEmpty(grade) && !string.IsNullOrEmpty(section) && !string.IsNullOrEmpty(subject) && !string.IsNullOrEmpty(semester))
                {
                    Assess360Service A360 = new Assess360Service();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                    criteria.Add("AcademicYear", academicyear);
                    criteria.Add("AdmissionStatus", "Registered");
                    sord = sord == "desc" ? "Desc" : "Asc";

                    Dictionary<long, IList<SubjectStudentTemplate>> GetSubjectMarksList = A360.GetSubjectMarksViewListWithCriteria(page - 1, rows, sidx, sord, criteria);
                    criteria.Clear();
                    if (subject == "Language-Hindi" || subject == "Language-French") { criteria.Add("Subject", "Language"); } else { criteria.Add("Subject", subject); }
                    criteria.Add("AcademicYear", academicyear);
                    criteria.Add("Semester", semester);
                    Dictionary<long, IList<SubjectMarks>> GetSubjectMarksList1 = A360.GetSubjectMarksViewListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    List<SubjectMarks> alreadyExists = GetSubjectMarksList1.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (SubjectStudentTemplate sv in GetSubjectMarksList.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((sv.PreRegNum)))
                        {
                            Dictionary<string, object> criteria1 = new Dictionary<string, object>();
                            var SubLang = "";
                            if (subject == "Language-Hindi" || subject == "Language-French") { SubLang = "Language"; } else { SubLang = subject; }

                            var GetList = (from u in GetSubjectMarksList1.First().Value
                                           where u.PreRegNum == sv.PreRegNum && u.Subject == SubLang && u.Semester == semester && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.MarksId = GetList[0].Id;
                            sv.Test1 = GetList[0].Test1;
                            sv.Test2 = GetList[0].Test2;
                            sv.Test3 = GetList[0].Test3;
                            sv.Project = GetList[0].Project;
                            sv.FATotal = GetList[0].FATotal;
                            sv.SATotal = GetList[0].SATotal;
                            sv.Outof = GetList[0].Outof;
                            sv.Fa1andFa2 = GetList[0].Fa1andFa2;
                            sv.SEMGrade = GetList[0].SEMGrade;
                            // sv.Subject = GetList[0].Subject + "-" + GetList[0].SecondLanguage;
                            if (SubLang == "Language") { sv.Subject = GetList[0].Subject + "-" + GetList[0].SecondLanguage; } else { sv.Subject = GetList[0].Subject; }
                            sv.Semester = GetList[0].Semester;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.CreatedBy = GetList[0].CreatedBy;
                            sv.AcademicYear = GetList[0].AcademicYear;

                        }
                        else
                        {
                            sv.Test1 = ""; sv.Test2 = ""; sv.Test3 = ""; sv.Project = ""; sv.FATotal = ""; sv.SATotal = ""; sv.Outof = ""; sv.Grade = "";
                            sv.Subject = subject; sv.Semester = semester; sv.Campus = campus; sv.Grade = grade; sv.CreatedBy = Session["UserId"].ToString(); sv.AcademicYear = academicyear;
                        }
                    }

                    if (GetSubjectMarksList != null && GetSubjectMarksList.Count > 0)
                    {

                        if (ExportType == "Excel")
                        {
                            string details = "<table><tr><td colspan='2'>Campus - " + campus + "</td><td colspan='2' >Grade - " + grade + "</td><td colspan='2' >Section - " + section + "</td><td colspan='2' >Subject - " + subject + "</td><td colspan='2' >Semester - " + semester + "</td></tr></table>";

                            string headerTable = @"<Table border='1px' cellpadding='10' cellspacing='0'>
                                                    <tr><td rowspan='1' colspan='10' align='center' style='font-size: large;'>The Indian Public School</td></tr>
                                                    <tr>
                                                    <td colspan='1' rowspan='2' style='vertical-align:middle;'><b>Student Name</b></td>
                                                    <td colspan='5' rowspan='1' align='center'><b>Formative Assessment (FA)</b></td>
                                                    <td colspan='2' rowspan='1' align='center'><b>Summative Assessment (SA)</b></td>
                                                    <td colspan='2' rowspan='1' align='center'><b>SEM</b></td>
                                                    </tr>
                                                    <tr>
                                                    <td align='center' >Test I (10)</td>
                                                    <td align='center' >Test II (10)</td>
                                                    <td align='center' >Test III (10)</td>
                                                    <td align='center' >Project (20)</td>
                                                    <td align='center' >Total (50)</td>
                                                    <td align='center' >Total (100)</td>
                                                    <td align='center' >OutOf (50)</td>
                                                    <td align='center' >FA + SA</td>
                                                    <td align='center' >Grade</td>
                                                    </tr>
                                                    </b></Table>";
                            var List = GetSubjectMarksList.First().Value.ToList();
                            ExptToXL_SubjectMarks(List, "StudentMarks", (items => new
                            {
                                items.Name,
                                items.Test1,
                                items.Test2,
                                items.Test3,
                                items.Project,
                                items.FATotal,
                                items.SATotal,
                                items.Outof,
                                items.Fa1andFa2,
                                items.SEMGrade,
                            }), headerTable, details);
                            return new EmptyResult();

                        }

                        long totalrecords = GetSubjectMarksList.First().Key;
                        int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var jsonresult = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalrecords,

                            rows = (from items in GetSubjectMarksList.First().Value
                                    select new
                                    {
                                        cell = new string[] {
                                        items.MarksId.ToString(),
                                        items.PreRegNum.ToString(),
                                        items.Name,
                                        items.Test1,
                                        items.Test2,
                                        items.Test3,
                                        items.Project,
                                        items.FATotal,
                                        items.SATotal,
                                        items.Outof,
                                        items.Fa1andFa2,
                                        items.SEMGrade,
                                        items.Subject,
                                        items.Semester,
                                        items.Campus,
                                        items.Grade,
                                        items.Section,
                                        items.AcademicYear,
"<img src='/Images/result.png ' id='ImgHistory' onclick=\"ShowComments( '" + items.PreRegNum +"' , '"+items.Campus+"','"+items.Grade+"','"+items.Section+"');\" />",
"<img src='/Images/result.png ' id='ImgHistory' onclick=\"ShowComments1( '" + items.PreRegNum +"' , '"+items.Campus+"','"+items.Grade+"','"+items.Section+"');\" />",

items.CreatedBy,
}
                                    })
                        };
                        return Json(jsonresult, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult GetSubjectEditRowList(SubjectStudentTemplate sub)
        {
            try
            {
                //DateTime DateNow = DateTime.Now;
                //string academicyear = "";
                //if (DateNow.Month >= 5)
                //{ academicyear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString(); }
                //else { academicyear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString(); }
                Assess360Service a360service = new Assess360Service();
                if (sub.MarksId != 0)
                {
                    SubjectMarks Checkexistlist = a360service.CheckExistdatainSubjectMarks(sub.MarksId);
                    Checkexistlist.Test1 = sub.Test1;
                    Checkexistlist.Test2 = sub.Test2;
                    Checkexistlist.Test3 = sub.Test3;
                    Checkexistlist.Project = sub.Project;
                    Checkexistlist.SATotal = sub.SATotal;
                    if (sub.Subject == "Language-Hindi") { Checkexistlist.Subject = "Language"; Checkexistlist.SecondLanguage = "Hindi"; }
                    else if (sub.Subject == "Language-French") { Checkexistlist.Subject = "Language"; Checkexistlist.SecondLanguage = "French"; }
                    else { Checkexistlist.Subject = sub.Subject; }
                    Checkexistlist.Semester = sub.Semester;
                    Checkexistlist.Campus = sub.Campus;
                    Checkexistlist.Section = sub.Section;
                    Checkexistlist.Grade = sub.Grade;
                    Checkexistlist.AcademicYear = sub.AcademicYear;
                    Checkexistlist.ModifiedBy = ValidateUser();
                    Checkexistlist.ModifiedDate = DateTime.Now;
                    Double fatotal = Convert.ToDouble(Convert.ToDouble(sub.Test1) + Convert.ToDouble(sub.Test2) + Convert.ToDouble(sub.Test3) + Convert.ToDouble(sub.Project));
                    Checkexistlist.FATotal = Convert.ToString(Math.Round(fatotal, 1));
                    Double outof = (Convert.ToDouble(sub.SATotal) / 2);
                    Checkexistlist.Outof = Convert.ToString(Math.Round(outof, 1));
                    Double fa1andfa2 = Convert.ToDouble(Convert.ToDouble(Checkexistlist.FATotal) + Convert.ToDouble(Checkexistlist.Outof));
                    Checkexistlist.Fa1andFa2 = Convert.ToString(Math.Round(fa1andfa2, 1));
                    Checkexistlist.SEMGrade = GetGradeList(Checkexistlist.Fa1andFa2);
                    if (ValidateUser() != "") { a360service.CreateOrUpdateSubjectMarks(Checkexistlist); }
                }
                else
                {
                    SubjectMarks sm = new SubjectMarks();
                    sm.PreRegNum = sub.PreRegNum;
                    sm.Test1 = sub.Test1;
                    sm.Test2 = sub.Test2;
                    sm.Test3 = sub.Test3;
                    sm.Project = sub.Project;
                    sm.SATotal = sub.SATotal;
                    if (sub.Subject == "Language-Hindi") { sm.Subject = "Language"; sm.SecondLanguage = "Hindi"; }
                    else if (sub.Subject == "Language-French") { sm.Subject = "Language"; sm.SecondLanguage = "French"; }
                    else { sm.Subject = sub.Subject; }
                    sm.Semester = sub.Semester;
                    sm.Campus = sub.Campus;
                    sm.Section = sub.Section;
                    sm.Grade = sub.Grade;
                    sm.CreatedBy = ValidateUser();
                    sm.AcademicYear = sub.AcademicYear;
                    sm.CreatedDate = DateTime.Now;
                    Double fatotal = Convert.ToDouble(Convert.ToDouble(sub.Test1) + Convert.ToDouble(sub.Test2) + Convert.ToDouble(sub.Test3) + Convert.ToDouble(sub.Project));
                    sm.FATotal = Convert.ToString(Math.Round(fatotal, 1));
                    Double outof = (Convert.ToDouble(sub.SATotal) / 2);
                    sm.Outof = Convert.ToString(Math.Round(outof, 1));
                    Double fa1andfa2 = Convert.ToDouble(Convert.ToDouble(sm.FATotal) + Convert.ToDouble(sm.Outof));
                    sm.Fa1andFa2 = Convert.ToString(Math.Round(fa1andfa2, 1));
                    sm.SEMGrade = GetGradeList(sm.Fa1andFa2);
                    if (ValidateUser() != "") { a360service.CreateOrUpdateSubjectMarks(sm); }

                }
                return Json(null, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        #endregion "End"

        #region " Semester and Over all Grade Validation"
        public ActionResult SemesterResultVaild(string PreRegNum, string campus, string grade, string section, string semester, string academicyear)
        {
            Assess360Service A360 = new Assess360Service();
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            if (!string.IsNullOrEmpty(PreRegNum)) { criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum)); }
            if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
            if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
            if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
            if (!string.IsNullOrEmpty(semester)) { criteria.Add("Semester", semester); }
            if (!string.IsNullOrEmpty(academicyear)) { criteria.Add("AcademicYear", academicyear); }
            Dictionary<long, IList<SubjectMarks>> SemMarklist = A360.GetSubjectMarksViewListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
            if (SemMarklist.FirstOrDefault().Value.Count == 0)
            {
                return Json("Failed", JsonRequestBehavior.AllowGet);
            }
            else { return Json("Success", JsonRequestBehavior.AllowGet); }
        }
        public ActionResult OverAllGradeMarksValidation(string PreRegNum, string campus, string grade, string section, string semester, string academicyear)
        {
            Assess360Service A360 = new Assess360Service();
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            if (!string.IsNullOrEmpty(PreRegNum)) { criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum)); }
            if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
            if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
            if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
            if (!string.IsNullOrEmpty(academicyear)) { criteria.Add("AcademicYear", academicyear); }
            Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
            if (Totalsemlist.FirstOrDefault().Value.Count == 0)
            {
                return Json("Failed", JsonRequestBehavior.AllowGet);
            }
            else { return Json("Success", JsonRequestBehavior.AllowGet); }
        }
        #endregion "End"

        #region "Pdf Export Excel Generation"
        public void ExptToXL_FinalResult<T, TResult>(IList<T> stuList, string filename, Func<T, TResult> selector, string headerTable, string ex)
        {
            Response.ClearContent();
            Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".xls");
            Response.ContentType = "application/vnd.ms-excel";
            System.IO.StringWriter stw = new System.IO.StringWriter();
            HtmlTextWriter htextw = new HtmlTextWriter(stw);
            DataGrid dg = new DataGrid();

            dg.HeaderStyle.BackColor = System.Drawing.Color.FromName("#5090C1");
            dg.HeaderStyle.Font.Bold = true;
            dg.HeaderStyle.ForeColor = System.Drawing.Color.White;

            dg.DataSource = stuList.Select(selector);
            dg.DataBind();
            dg.RenderControl(htextw);
            Response.Write(ex);
            Response.Write(headerTable);

            Response.Write(stw.ToString().Remove(stw.ToString().IndexOf("<tr "), (stw.ToString().IndexOf("</tr>") - stw.ToString().IndexOf("<tr ")) + 5));
            Response.End();
        }
        public void ExportToPDF_SemesterMarks(string Title, string preregnum, string name, string[] Total, string[] Grade, string OverallGrandtotal, string OverallGrade, string campus, string grade, string section, string createdby)
        {
            try
            {
                string Report = "SemesterMarks";
                string Path = @"D:\" + Report + @"\";
                if (!System.IO.Directory.Exists(Path))
                {
                    System.IO.Directory.CreateDirectory(Path);
                }

                Document pdfDoc = new Document();
                pdfDoc.AddTitle(Title);
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, new FileStream(Path + preregnum + ".pdf", FileMode.Create));
                pdfDoc.Open();


                PdfPTable table = new PdfPTable(4);
                table.TotalWidth = 450f;
                table.LockedWidth = true;

                #region "Logo Image"
                iTextSharp.text.Image LogoImage;
                PdfPCell imgcel1 = new PdfPCell();
                imgcel1.Rowspan = 2;
                imgcel1.PaddingTop = 1;
                imgcel1.Border = 0;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";
                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(50, 50);
                imgcel1.AddElement(LogoImage);
                imgcel1.PaddingLeft = 1;
                table.AddCell(imgcel1);
                #endregion "Logo Image"

                PdfPCell headercell = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                headercell.Border = 0;
                headercell.PaddingBottom = 2;
                headercell.PaddingTop = 2;
                headercell.Colspan = 3;
                headercell.HorizontalAlignment = Element.ALIGN_CENTER;
                table.AddCell(headercell);


                PdfPCell headercell1 = new PdfPCell(new Phrase("OVERALL ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                headercell1.Border = 0;
                headercell1.PaddingBottom = 2;
                headercell1.PaddingTop = 2;
                headercell1.Colspan = 3;
                headercell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table.AddCell(headercell1);



                PdfPTable table1 = new PdfPTable(4);
                table1.TotalWidth = 450f;
                table1.LockedWidth = true;

                PdfPCell cell1 = new PdfPCell(new Phrase(" "));
                cell1.Border = 0;
                cell1.Colspan = 4;
                table.AddCell(cell1);

                PdfPCell cell3 = new PdfPCell(new Phrase("Student : " + name + " ", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                cell3.Padding = 4;
                cell3.PaddingBottom = 4;
                cell3.Rowspan = 2;
                cell3.Colspan = 2;
                table1.AddCell(cell3);

                PdfPCell cell4 = new PdfPCell(new Phrase("Teacher : " + createdby + " ", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                cell4.Padding = 4;
                cell4.PaddingBottom = 4;
                cell4.Rowspan = 2;
                cell4.Colspan = 2;
                table1.AddCell(cell4);

                PdfPCell cell5 = new PdfPCell(new Phrase("Grade :   " + grade + "-" + section + "", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                cell5.Padding = 4;
                cell5.Rowspan = 2;
                cell5.Colspan = 2;
                table1.AddCell(cell5);

                PdfPCell cell6 = new PdfPCell(new Phrase("Date : " + DateTime.Now.ToString("dd-MM-yyyy") + "", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                cell6.Padding = 4;
                cell6.Rowspan = 2;
                cell6.Colspan = 2;
                table1.AddCell(cell6);

                PdfPCell cell7 = new PdfPCell(new Phrase(" "));
                cell7.PaddingTop = 20;
                cell7.Border = 0;
                cell7.Colspan = 4;
                table1.AddCell(cell7);

                PdfPTable table2 = null;
                float[] widths = null;
                if (grade == "IX")
                {
                    table2 = new PdfPTable(4);
                    widths = new float[] { 50f, 245f, 90f, 55f };
                    table2.SetWidths(widths);
                }
                else
                {
                    table2 = new PdfPTable(3);
                    widths = new float[] { 50f, 245f, 55f };
                }
                table2.TotalWidth = 450f;
                table2.LockedWidth = true;
                table2.SetWidths(widths);

                //  Headerlist
                PdfPCell cell20 = new PdfPCell(new Phrase("S.NO", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell20.Padding = 5;
                cell20.HorizontalAlignment = Element.ALIGN_CENTER;
                table2.AddCell(cell20);

                PdfPCell cell21 = new PdfPCell(new Phrase("SUBJECT", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell21.Padding = 5;
                cell21.HorizontalAlignment = Element.ALIGN_CENTER;
                table2.AddCell(cell21);

                if (grade == "IX")
                {
                    PdfPCell cell22 = new PdfPCell(new Phrase("MARKS", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                    cell22.Padding = 5;
                    cell22.HorizontalAlignment = Element.ALIGN_CENTER;
                    table2.AddCell(cell22);
                }

                PdfPCell cell23 = new PdfPCell(new Phrase("GRADE", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell23.Padding = 5;
                cell23.HorizontalAlignment = Element.ALIGN_CENTER;
                table2.AddCell(cell23);

                //  English list

                PdfPCell english = new PdfPCell(new Phrase("1", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                english.HorizontalAlignment = Element.ALIGN_CENTER;
                english.Padding = 3;
                table2.AddCell(english);

                PdfPCell english1 = new PdfPCell(new Phrase("English", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                english1.Padding = 3;
                table2.AddCell(english1);
                if (grade == "IX")
                {
                    PdfPCell english2 = new PdfPCell(new Phrase(Total[0], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    english2.HorizontalAlignment = Element.ALIGN_CENTER;
                    english2.Padding = 3;
                    table2.AddCell(english2);
                }

                PdfPCell english3 = new PdfPCell(new Phrase(Grade[0], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                english3.HorizontalAlignment = Element.ALIGN_CENTER;
                english3.Padding = 3;
                table2.AddCell(english3);

                //   Language list

                PdfPCell language = new PdfPCell(new Phrase("2", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                language.HorizontalAlignment = Element.ALIGN_CENTER;
                language.Padding = 3;
                table2.AddCell(language);

                PdfPCell language1 = new PdfPCell(new Phrase("Language", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                language1.Padding = 3;
                table2.AddCell(language1);

                if (grade == "IX")
                {
                    PdfPCell language2 = new PdfPCell(new Phrase(Total[1], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    language2.Padding = 3;
                    language2.HorizontalAlignment = Element.ALIGN_CENTER;
                    table2.AddCell(language2);
                }

                PdfPCell language3 = new PdfPCell(new Phrase(Grade[1], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                language3.HorizontalAlignment = Element.ALIGN_CENTER;
                language3.Padding = 3;
                table2.AddCell(language3);

                //  Maths list

                PdfPCell maths = new PdfPCell(new Phrase("3", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                maths.HorizontalAlignment = Element.ALIGN_CENTER;
                maths.Padding = 3;
                table2.AddCell(maths);

                PdfPCell maths1 = new PdfPCell(new Phrase("Mathematics", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                maths1.Padding = 3;
                table2.AddCell(maths1);

                if (grade == "IX")
                {
                    PdfPCell maths2 = new PdfPCell(new Phrase(Total[2], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    maths2.HorizontalAlignment = Element.ALIGN_CENTER;
                    maths2.Padding = 3;
                    table2.AddCell(maths2);
                }

                PdfPCell maths3 = new PdfPCell(new Phrase(Grade[2], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                maths3.HorizontalAlignment = Element.ALIGN_CENTER;
                maths3.Padding = 3;
                table2.AddCell(maths3);

                //   Physics list

                PdfPCell physics = new PdfPCell(new Phrase("4", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                physics.HorizontalAlignment = Element.ALIGN_CENTER;
                physics.Padding = 3;
                table2.AddCell(physics);

                PdfPCell physics1 = new PdfPCell(new Phrase("Physics", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                physics1.Padding = 3;
                table2.AddCell(physics1);

                if (grade == "IX")
                {
                    PdfPCell physics2 = new PdfPCell(new Phrase(Total[3], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    physics2.HorizontalAlignment = Element.ALIGN_CENTER;
                    physics2.Padding = 3;
                    table2.AddCell(physics2);
                }

                PdfPCell physics3 = new PdfPCell(new Phrase(Grade[3], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                physics3.HorizontalAlignment = Element.ALIGN_CENTER;
                physics3.Padding = 3;
                table2.AddCell(physics3);

                //  Chemistry  list

                PdfPCell chemistry = new PdfPCell(new Phrase("5", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                chemistry.HorizontalAlignment = Element.ALIGN_CENTER;
                chemistry.Padding = 3;
                table2.AddCell(chemistry);

                PdfPCell chemistry1 = new PdfPCell(new Phrase("Chemistry", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                chemistry1.Padding = 3;
                table2.AddCell(chemistry1);

                if (grade == "IX")
                {
                    PdfPCell chemistry2 = new PdfPCell(new Phrase(Total[4], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    chemistry2.HorizontalAlignment = Element.ALIGN_CENTER;
                    chemistry2.Padding = 3;
                    table2.AddCell(chemistry2);
                }

                PdfPCell chemistry3 = new PdfPCell(new Phrase(Grade[4], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                chemistry3.HorizontalAlignment = Element.ALIGN_CENTER;
                chemistry3.Padding = 3;
                table2.AddCell(chemistry3);

                //   Biology list

                PdfPCell biology = new PdfPCell(new Phrase("6", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                biology.HorizontalAlignment = Element.ALIGN_CENTER;
                biology.Padding = 3;
                table2.AddCell(biology);

                PdfPCell biology1 = new PdfPCell(new Phrase("Biology", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                biology1.Padding = 3;
                table2.AddCell(biology1);

                if (grade == "IX")
                {
                    PdfPCell biology2 = new PdfPCell(new Phrase(Total[5], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    biology2.HorizontalAlignment = Element.ALIGN_CENTER;
                    biology2.Padding = 3;
                    table2.AddCell(biology2);
                }

                PdfPCell biology3 = new PdfPCell(new Phrase(Grade[5], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                biology3.HorizontalAlignment = Element.ALIGN_CENTER;
                biology3.Padding = 3;
                table2.AddCell(biology3);

                //  HC&G list

                PdfPCell hc = new PdfPCell(new Phrase("7", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                hc.HorizontalAlignment = Element.ALIGN_CENTER;
                hc.Padding = 3;
                table2.AddCell(hc);

                PdfPCell hc1 = new PdfPCell(new Phrase("History & Geography", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                hc1.Padding = 3;
                table2.AddCell(hc1);

                if (grade == "IX")
                {
                    PdfPCell hc2 = new PdfPCell(new Phrase(Total[6], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    hc2.HorizontalAlignment = Element.ALIGN_CENTER;
                    hc2.Padding = 3;
                    table2.AddCell(hc2);
                }

                PdfPCell hc3 = new PdfPCell(new Phrase(Grade[6], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                hc3.HorizontalAlignment = Element.ALIGN_CENTER;
                hc3.Padding = 3;
                table2.AddCell(hc3);

                // ICT list

                PdfPCell ict = new PdfPCell(new Phrase("8", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                ict.HorizontalAlignment = Element.ALIGN_CENTER;
                ict.Padding = 3;
                table2.AddCell(ict);

                PdfPCell ict1 = new PdfPCell(new Phrase("ICT", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                ict1.Padding = 3;
                table2.AddCell(ict1);

                if (grade == "IX")
                {
                    PdfPCell ict2 = new PdfPCell(new Phrase(Total[7], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                    ict2.HorizontalAlignment = Element.ALIGN_CENTER;
                    ict2.Padding = 3;
                    table2.AddCell(ict2);
                }


                PdfPCell ict3 = new PdfPCell(new Phrase(Grade[7], new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                ict3.HorizontalAlignment = Element.ALIGN_CENTER;
                ict3.Padding = 3;
                table2.AddCell(ict3);

                PdfPCell cell8 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                cell8.Border = 0;
                cell8.Colspan = 4;
                table2.AddCell(cell8);

                PdfPCell cell9 = new PdfPCell(new Phrase("Overall Percentage    :   " + OverallGrandtotal + "", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell9.Padding = 4;
                cell9.Border = 0;
                cell9.Colspan = 4;
                table2.AddCell(cell9);

                PdfPCell cell10 = new PdfPCell(new Phrase("Overall Grade            :   " + OverallGrade + "", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell10.Padding = 4;
                cell10.Border = 0;
                cell10.Colspan = 4;
                table2.AddCell(cell10);

                PdfPCell cell11 = new PdfPCell(new Phrase(" "));
                cell11.Border = 0;
                cell11.Colspan = 4;
                table2.AddCell(cell11);

                //Signature list

                PdfPTable table3 = new PdfPTable(4);
                table3.TotalWidth = 480;
                table3.LockedWidth = true;

                PdfPCell cell12 = new PdfPCell(new Phrase("Class Teacher", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell12.PaddingTop = 80;
                cell12.PaddingBottom = 10;
                cell12.HorizontalAlignment = Element.ALIGN_CENTER;
                table3.AddCell(cell12);

                PdfPCell cell13 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell13.PaddingTop = 80;
                cell13.PaddingBottom = 10;
                cell13.HorizontalAlignment = Element.ALIGN_CENTER;
                table3.AddCell(cell13);

                PdfPCell cell14 = new PdfPCell(new Phrase("MYP Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell14.PaddingTop = 80;
                cell14.PaddingBottom = 10;
                cell14.HorizontalAlignment = Element.ALIGN_CENTER;
                table3.AddCell(cell14);

                PdfPCell cell15 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell15.PaddingTop = 80;
                cell15.PaddingBottom = 10;
                cell15.HorizontalAlignment = Element.ALIGN_CENTER;
                table3.AddCell(cell15);

                PdfPCell cell16 = new PdfPCell(new Phrase(" "));
                cell16.Border = 0;
                cell16.Colspan = 4;
                cell16.PaddingTop = 40;
                table3.AddCell(cell16);


                PdfPTable table4 = new PdfPTable(10);
                table4.TotalWidth = 510f;
                table4.LockedWidth = true;
                table4.HorizontalAlignment = Element.ALIGN_CENTER;


                PdfPCell cell17 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                cell17.Colspan = 10;
                cell17.Padding = 15;
                cell17.Border = 0;
                cell17.HorizontalAlignment = Element.ALIGN_CENTER;
                table4.AddCell(cell17);


                //  title for criteria of assessment
                PdfPCell grad1 = new PdfPCell(new Phrase("Grade", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad1.HorizontalAlignment = Element.ALIGN_CENTER;
                grad1.Padding = 5;
                table4.AddCell(grad1);

                PdfPCell grad2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad2.HorizontalAlignment = Element.ALIGN_CENTER;
                grad2.Padding = 5;
                table4.AddCell(grad2);

                PdfPCell grad3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad3.HorizontalAlignment = Element.ALIGN_CENTER;
                grad3.Padding = 5;
                table4.AddCell(grad3);

                PdfPCell grad4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad4.HorizontalAlignment = Element.ALIGN_CENTER;
                grad4.Padding = 5;
                table4.AddCell(grad4);

                PdfPCell grad5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad5.HorizontalAlignment = Element.ALIGN_CENTER;
                grad5.Padding = 5;
                table4.AddCell(grad5);

                PdfPCell grad6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad6.HorizontalAlignment = Element.ALIGN_CENTER;
                grad6.Padding = 5;
                table4.AddCell(grad6);

                PdfPCell grad7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad7.HorizontalAlignment = Element.ALIGN_CENTER;
                grad7.Padding = 5;
                table4.AddCell(grad7);

                PdfPCell grad8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad8.HorizontalAlignment = Element.ALIGN_CENTER;
                grad8.Padding = 5;
                table4.AddCell(grad8);

                PdfPCell grad9 = new PdfPCell(new Phrase("G", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad9.HorizontalAlignment = Element.ALIGN_CENTER;
                grad9.Padding = 5;
                table4.AddCell(grad9);

                PdfPCell grad10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grad10.HorizontalAlignment = Element.ALIGN_CENTER;
                grad10.Padding = 5;
                table4.AddCell(grad10);

                //  add marks for criteria of assessment

                PdfPCell marks1 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks1.HorizontalAlignment = Element.ALIGN_CENTER;
                marks1.Padding = 5;
                table4.AddCell(marks1);

                PdfPCell marks2 = new PdfPCell(new Phrase(" 90-100", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks2.HorizontalAlignment = Element.ALIGN_CENTER;
                marks2.Padding = 5;
                table4.AddCell(marks2);

                PdfPCell marks3 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                new PdfPCell(new Phrase("80-89"));
                marks3.HorizontalAlignment = Element.ALIGN_CENTER;
                marks3.Padding = 5;
                table4.AddCell(marks3);

                PdfPCell marks4 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks4.HorizontalAlignment = Element.ALIGN_CENTER;
                marks4.Padding = 5;
                table4.AddCell(marks4);

                PdfPCell marks5 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks5.HorizontalAlignment = Element.ALIGN_CENTER;
                marks5.Padding = 5;
                table4.AddCell(marks5);

                PdfPCell marks6 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks6.HorizontalAlignment = Element.ALIGN_CENTER;
                marks6.Padding = 5;
                table4.AddCell(marks6);

                PdfPCell marks7 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks7.HorizontalAlignment = Element.ALIGN_CENTER;
                marks7.Padding = 5;
                table4.AddCell(marks7);

                PdfPCell marks8 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks8.HorizontalAlignment = Element.ALIGN_CENTER;
                marks8.Padding = 5;
                table4.AddCell(marks8);

                PdfPCell marks9 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks9.HorizontalAlignment = Element.ALIGN_CENTER;
                marks9.Padding = 5;
                table4.AddCell(marks9);

                PdfPCell marks10 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("Times New Roman", 8.0f, new BaseColor(0, 0, 0)))));
                marks10.HorizontalAlignment = Element.ALIGN_CENTER;
                marks10.Padding = 5;
                table4.AddCell(marks10);

                pdfDoc.Add(table);
                pdfDoc.Add(table1);
                pdfDoc.Add(table2);
                pdfDoc.Add(table3);
                pdfDoc.Add(table4);
                pdfDoc.Close();
                pdfWriter.Close();

            }
            catch (Exception ex)
            {

                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public void ExptToXL_SubjectMarks<T, TResult>(IList<T> stuList, string filename, Func<T, TResult> selector, string headerTable, string details)
        {
            Response.ClearContent();
            Response.AddHeader("content-disposition", "attachment; filename=" + filename + ".xls");
            Response.ContentType = "application/vnd.ms-excel";
            System.IO.StringWriter stw = new System.IO.StringWriter();
            HtmlTextWriter htextw = new HtmlTextWriter(stw);
            DataGrid dg = new DataGrid();

            dg.HeaderStyle.BackColor = System.Drawing.Color.FromName("#B6B6B6");
            dg.HeaderStyle.Font.Bold = true;
            dg.HeaderStyle.ForeColor = System.Drawing.Color.White;

            dg.DataSource = stuList.Select(selector);
            dg.DataBind();
            dg.RenderControl(htextw);
            Response.Write(details);
            Response.Write(headerTable);
            Response.Write(stw.ToString().Remove(stw.ToString().IndexOf("<tr"), (stw.ToString().IndexOf("</tr>") - stw.ToString().IndexOf("<tr")) + 5));
            Response.End();
        }
        public void FinalResultPDF(string PreRegNum, string campus, string grade, string section, string semester, string academicyear)
        {
            try
            {
                Assess360Service A360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                string over = "Single";
                string title = "MarkList_" + PreRegNum + "";
                var total = string.Empty;
                var comgrade = string.Empty;
                string name = string.Empty;
                string TeacherName = string.Empty;
                string SecondLange = string.Empty;
                string RepDate = string.Empty;
                Double phy, che, bio, tot;
                criteria.Clear();
                criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                criteria.Add("Section", section);
                criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(semester))
                {
                    if (semester == "Sem I") { criteria.Add("Semester", Convert.ToInt64(1)); }
                    else if (semester == "Sem II") { criteria.Add("Semester", Convert.ToInt64(2)); }
                }
                ReportCardService rptCardSrvc = new ReportCardService();
                Dictionary<long, IList<RptCardInBoxView>> dcnRptCardLst = rptCardSrvc.GetRepCardInBoxListWithPagingAndCriteriaEQSearch(0, 999, string.Empty, string.Empty, criteria);
                if (dcnRptCardLst != null && dcnRptCardLst.Count > 0 && dcnRptCardLst.FirstOrDefault().Key > 0)
                {
                    IList<RptCardInBoxView> TeacherandSeconLan = dcnRptCardLst.FirstOrDefault().Value.ToList();
                    TeacherName = TeacherandSeconLan[0].TeacherName;
                    if (TeacherandSeconLan[0].Second_Language != null)
                        SecondLange = " - " + TeacherandSeconLan[0].Second_Language;
                    RepDate = TeacherandSeconLan[0].RptDate.Value.ToString("dd/MM/yyyy");
                }
                criteria.Clear();
                criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                criteria.Add("Section", section);
                criteria.Add("AcademicYear", academicyear);
                Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                List<Totalsemlist> TotalList = Totalsemlist.FirstOrDefault().Value.ToList();
                if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                {
                    name = TotalList[0].Name;
                    var arrlang = (from a in TotalList
                                   select new { a.Subject }).ToList();
                }
                if ((grade == "IX" || grade == "X") && (section == "A" || section == "B"))
                {
                    string[] arr = new string[] { "English", "Language", "Biology", "Mathematics", "Physics", "Chemistry", "ICT", "Economics", "Physical Education" };
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("Semester", semester);
                    criteria.Add("Subject", arr);
                    criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<SubjectMarks>> GetSubjectList = A360.GetSubjectMarksViewListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    List<SubjectMarks> Subjectlist = GetSubjectList.FirstOrDefault().Value.ToList();
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXAB>> GetClassIXABSubjectList = A360.GetClassIXABSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXAB> ClassIXABList = GetClassIXABSubjectList.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in Subjectlist
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();
                    if (GetSubjectList != null && GetSubjectList.Count > 0 && GetSubjectList.FirstOrDefault().Key > 0)
                    {
                        var Physics = (from u in GetSubjectList.First().Value
                                       where u.Subject == "Physics"
                                       select u.Fa1andFa2).ToList();
                        var Chemistry = (from u in GetSubjectList.First().Value
                                         where u.Subject == "Chemistry"
                                         select u.Fa1andFa2).ToList();
                        var Biology = (from u in GetSubjectList.First().Value
                                       where u.Subject == "Biology"
                                       select u.Fa1andFa2).ToList();
                        if (Physics.Count == 0) { phy = 0; } else { phy = Convert.ToDouble(Physics[0]); }
                        if (Chemistry.Count == 0) { che = 0; } else { che = Convert.ToDouble(Chemistry[0]); }
                        if (Biology.Count == 0) { bio = 0; } else { bio = Convert.ToDouble(Biology[0]); }

                        tot = Convert.ToDouble((phy + che + bio) / 3);
                        total = Convert.ToString(Math.Round(tot, 1));
                        comgrade = Convert.ToString((GetGradeList(total)));
                    }

                    if (GetSubjectList != null && GetSubjectList.Count > 0 && GetSubjectList.FirstOrDefault().Key > 0)
                    {
                        foreach (ClassforIXAB item in ClassIXABList)
                        {
                            var GetSubject = (from u in GetSubjectList.First().Value
                                              where u.Subject == item.Subject
                                              select u).ToList();

                            if (blksubject.Contains(item.Subject))
                            {
                                item.Subject = GetSubject[0].Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = GetSubject[0].Fa1andFa2;
                                item.Grade = GetSubject[0].SEMGrade;
                            }
                            else
                            {
                                if (item.Subject == "Combined science")
                                {
                                    item.Subject = item.Subject; item.Marks = total; item.Grade = comgrade;
                                }
                                else
                                {
                                    item.Subject = item.Subject;
                                    if (item.Subject == "Language" && GetSubject.Count != 0)
                                    { item.Subject = item.Subject + " - " + SecondLange; }
                                    item.Marks = string.Empty;
                                    item.Grade = string.Empty;
                                }
                            }

                        }
                        string Overallgrade = string.Empty;
                        Double mrkdtotal = 0;
                        string Percentage = string.Empty;
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {

                                if (!string.IsNullOrEmpty(ClassIXABList[i].Marks))
                                    mrkdtotal = Convert.ToDouble(ClassIXABList[i].Marks);
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(ClassIXABList[i].Marks))
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXABList[i].Marks);
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };
                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (ClassIXABList[i].Marks == string.Empty)
                            { ClassIXABList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXABList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }

                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));
                        var ass = (from a in ClassIXABList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        GradeIX_ExportToPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                }
                else if ((grade == "IX" || grade == "X") && (section == "C" || section == "D"))
                {
                    string[] arr = new string[] { "English", "Language", "Biology", "Mathematics", "Physics", "Chemistry", "ICT", "Economics" };
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("Semester", semester);
                    criteria.Add("Subject", arr);
                    criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<SubjectMarks>> GetSubjectList = A360.GetSubjectMarksViewListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    List<SubjectMarks> Subjectlist = GetSubjectList.FirstOrDefault().Value.ToList();
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXCD>> GetClassIXCDSubjectList = A360.GetClassIXCDSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXCD> ClassIXCDList = GetClassIXCDSubjectList.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in Subjectlist
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();
                    if (GetSubjectList != null && GetSubjectList.Count > 0 && GetSubjectList.FirstOrDefault().Key > 0)
                    {
                        foreach (ClassforIXCD item in ClassIXCDList)
                        {
                            var GetSubject = (from u in GetSubjectList.First().Value
                                              where u.Subject == item.Subject
                                              select u).ToList();
                            if (blksubject.Contains(item.Subject))
                            {


                                item.Subject = GetSubject[0].Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = GetSubject[0].Fa1andFa2;
                                item.Grade = GetSubject[0].SEMGrade;
                            }
                            else
                            {
                                item.Subject = item.Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = string.Empty;
                                item.Grade = string.Empty;
                            }
                        }
                        string Overallgrade = string.Empty;
                        Double mrkdtotal = 0;
                        string Percentage = string.Empty;
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {

                                if (!string.IsNullOrEmpty(ClassIXCDList[i].Marks))
                                    mrkdtotal = Convert.ToDouble(ClassIXCDList[i].Marks);
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(ClassIXCDList[i].Marks))
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXCDList[i].Marks);
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };

                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (string.IsNullOrEmpty(ClassIXCDList[i].Marks))
                            { ClassIXCDList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXCDList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }
                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));
                        var ass = (from a in ClassIXCDList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        GradeIX_ExportToPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                    else { }
                }
                else
                {
                    criteria.Clear();
                    string[] arrnew = new string[] { "English", "Language", "Biology", "Mathematics", "Physics", "Chemistry", "ICT", "HC&G" };
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("AcademicYear", academicyear);
                    criteria.Add("Subject", arrnew);
                    Dictionary<long, IList<Vw_FinalResult>> StudentMarksVItoVIII = A360.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<Vw_FinalResult> MarkList = StudentMarksVItoVIII.FirstOrDefault().Value.ToList();
                    criteria.Clear();
                    Dictionary<long, IList<ClassforVItoVIII>> GetClassVItoVIIISubjectList = A360.GetClassVItoVIIISubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforVItoVIII> ClassList = GetClassVItoVIIISubjectList.FirstOrDefault().Value.ToList();
                    if (MarkList != null)
                    {
                        Double totalmrks = 0;
                        Double Prtage = 0;
                        int i = 0;
                        foreach (var item in MarkList)
                        {
                            i++;
                            if (semester == "Sem I")
                                totalmrks = totalmrks + Convert.ToDouble(item.SemI);
                            if (semester == "Sem II")
                                totalmrks = totalmrks + Convert.ToDouble(item.SemII);
                            else
                                totalmrks = totalmrks + Convert.ToDouble(item.SemIII);
                        }
                        foreach (ClassforVItoVIII clsitem in ClassList)
                        {
                            var GetSemMarks = (from u in MarkList
                                               where u.Subject == clsitem.Subject
                                               select new { u.Subject, u.SemI, u.SemII, u.SemIII }).ToList();
                            if (GetSemMarks.Count > 0)
                            {
                                if (GetSemMarks[0].Subject == "Language")
                                    clsitem.Subject = GetSemMarks[0].Subject + SecondLange;
                                if (semester == "Sem I")
                                    clsitem.Grade = GetSemMarks[0].SemI != null ? GetGradeList(Convert.ToString(GetSemMarks[0].SemI)) : null;
                                if (semester == "Sem II")
                                    clsitem.Grade = GetSemMarks[0].SemII != null ? GetGradeList(Convert.ToString(GetSemMarks[0].SemII)) : null;
                                else
                                    clsitem.Grade = GetSemMarks[0].SemIII != null ? GetGradeList(Convert.ToString(GetSemMarks[0].SemIII)) : null;
                            }

                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 40f };

                        // remove empty mark column for the list
                        for (int k = 0; k < ClassList.Count; k++)
                        {
                            if (string.IsNullOrEmpty(ClassList[k].Grade))
                            { ClassList.RemoveAt(k); k = k - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }
                        Prtage = totalmrks / (idNum - 1 * 100) * 100;
                        Prtage = Math.Round(Convert.ToDouble(Prtage), 2);
                        string Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Prtage))));
                        var assessment = (from a in ClassList
                                          select new { a.Id, a.Subject, a.Grade }).ToList();
                        DataTable datatbl = ListToDataTable(assessment);
                        GradeVItoVIII_ExportToPDF(title, TblHeaders, widths, datatbl, name, grade, section, semester, Prtage, Overallgrade, RepDate, TeacherName, SecondLange);
                    }
                    else
                    { }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "AdmissionPolicy");
                throw ex;
            }
        }
        public void GradeVItoVIII_ExportToPDF(string Title, string[] TblHeaders, float[] widths, DataTable datatbl, string name, string grade, string section, string semester, double Prtage, string Overallgrade, string RepDate, string TeacherName, string SecondLange)
        {
            try
            {
                string Sem = (semester == "Sem I") ? "I" : "II";
                Document document = new Document(PageSize.A4, 10.25f, 10.25f, 10.5f, 10.5f);

                iTextSharp.text.Image LogonaceImage;
                string LogonaceImagePath = ConfigurationManager.AppSettings["AppLogos"] + "logonace.jpg";

                LogonaceImage = iTextSharp.text.Image.GetInstance(LogonaceImagePath);
                LogonaceImage.ScaleAbsolute(55, 55);

                iTextSharp.text.Image LogoImage;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";

                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(55, 55);

                // For PDF export we are using the free open-source iTextSharp library.
                string month = DateTime.Now.ToString("MMMM");
                Document pdfDoc = new Document();
                pdfDoc.AddTitle(Title);
                MemoryStream pdfStream = new MemoryStream();
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

                pdfDoc.Open();//Open Document to write
                pdfDoc.NewPage();

                Font Heading = FontFactory.GetFont("ARIAL", 9, BaseColor.BLACK);
                Font Content = FontFactory.GetFont("ARIAL", 9);

                PdfPTable nace = new PdfPTable(4);
                float[] width = new float[] { 50f, 245f, 200f, 55f };
                nace.SetWidths(width);

                PdfPCell nace1 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));
                nace1.Border = 0;
                nace1.AddElement(LogonaceImage);
                nace.AddCell(nace1);

                PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE                                      SEMESTER " + Sem + "  ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                nace2.Padding = 5;
                nace2.Border = 0;
                nace2.Colspan = 2;
                nace.AddCell(nace2);


                PdfPCell nace4 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));

                nace4.Border = 0;
                nace4.AddElement(LogoImage);
                nace.AddCell(nace4);
                pdfDoc.Add(nace);

                PdfPTable p5 = new PdfPTable(4);
                PdfPCell pe1 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe1.Border = 0;
                pe1.Colspan = 4;
                p5.AddCell(pe1);

                PdfPCell pe0 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe0.Border = 0;
                pe0.Colspan = 4;
                p5.AddCell(pe0);

                pdfDoc.Add(p5);

                PdfPTable PdfTable = new PdfPTable(4);

                PdfPCell PdfPCel1 = new PdfPCell(new Phrase("Student : " + name + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel1.Padding = 4;
                PdfPCel1.Colspan = 2;
                PdfTable.AddCell(PdfPCel1);
                PdfPCell PdfPCel2 = new PdfPCell(new Phrase("Teacher    :" + TeacherName + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel2.Padding = 4;
                PdfPCel2.Colspan = 2;
                PdfTable.AddCell(PdfPCel2);
                PdfPCell PdfPCel3 = new PdfPCell(new Phrase("Grade    : " + grade + "-" + section + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel3.Padding = 4;
                PdfPCel3.Colspan = 2;
                PdfTable.AddCell(PdfPCel3);
                PdfPCell PdfPCel4 = new PdfPCell(new Phrase("Date       : " + RepDate + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel4.Colspan = 2;
                PdfPCel4.Padding = 4;
                PdfTable.AddCell(PdfPCel4);
                pdfDoc.Add(PdfTable); // add pdf table to the document

                PdfPTable Empt = new PdfPTable(4);
                PdfPCell Empt1 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt1.Border = 0;
                Empt1.Colspan = 4;
                Empt.AddCell(Empt1);

                PdfPCell Empt00 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt00.Border = 0;
                Empt00.Colspan = 4;
                Empt.AddCell(Empt00);

                pdfDoc.Add(Empt);

                PdfPTable Table = new PdfPTable(datatbl.Columns.Count);
                PdfPCell PdfPCell = new PdfPCell();
                for (int column = 0; column < datatbl.Columns.Count; column++)
                {
                    PdfPCell = new PdfPCell(new Phrase(new Chunk(TblHeaders[column], Heading)));
                    PdfPCell.Padding = 4;
                    PdfPCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    Table.TotalWidth = 420f;
                    Table.LockedWidth = true;
                    Table.SetWidths(widths);
                    Table.AddCell(PdfPCell);
                }
                //How add the data from datatable to pdf table
                for (int rows = 0; rows < datatbl.Rows.Count; rows++)
                {
                    for (int column = 0; column < datatbl.Columns.Count; column++)
                    {
                        if (datatbl.Rows[rows][column].ToString() == "HC&G")
                        {
                            PdfPCell = new PdfPCell(new Phrase(new Chunk("History & Geography", Content)));
                        }
                        else
                        {
                            PdfPCell = new PdfPCell(new Phrase(new Chunk(datatbl.Rows[rows][column].ToString(), Content)));
                        }
                        PdfPCell.Padding = 4;
                        Table.AddCell(PdfPCell);
                    }
                }
                pdfDoc.Add(Table); // add Table to the document

                PdfPTable Emp = new PdfPTable(4);
                PdfPCell Empt2 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt2.Border = 0;
                Empt2.Colspan = 4;
                Emp.AddCell(Empt2);

                pdfDoc.Add(Emp);

                PdfPTable per = new PdfPTable(4);
                PdfPCell per1 = new PdfPCell(new Phrase("Percentage:  " + Prtage + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per1.Border = 0;
                per1.Padding = 10;
                per1.Colspan = 4;
                per.AddCell(per1);

                PdfPCell per2 = new PdfPCell(new Phrase("Grade : " + Overallgrade + " ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per2.Border = 0;
                per2.Padding = 10;
                per2.Colspan = 4;
                per.AddCell(per2);
                pdfDoc.Add(per);


                PdfPTable repot = new PdfPTable(4);
                float[] widt = new float[] { 10f, 50f, 20f, 20f };
                PdfPCell repot1 = new PdfPCell(new Phrase("Class Teacher ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot1.HorizontalAlignment = Element.ALIGN_CENTER;
                repot1.PaddingTop = 50;
                repot.AddCell(repot1);
                PdfPCell repot2 = new PdfPCell(new Phrase("MYP Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot2.HorizontalAlignment = Element.ALIGN_CENTER;
                repot2.PaddingTop = 50;
                repot.AddCell(repot2);
                PdfPCell repot3 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot3.HorizontalAlignment = Element.ALIGN_CENTER;
                repot3.PaddingTop = 50;
                repot.AddCell(repot3);
                PdfPCell repot4 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot4.HorizontalAlignment = Element.ALIGN_CENTER;
                repot4.PaddingTop = 50;
                repot.AddCell(repot4);
                pdfDoc.Add(repot);

                PdfPTable Emp1 = new PdfPTable(4);
                PdfPCell Empt21 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt21.Border = 0;
                Empt21.Colspan = 4;
                Emp1.AddCell(Empt21);

                PdfPCell Empt41 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt41.Border = 0;
                Empt41.Colspan = 4;
                Emp1.AddCell(Empt41);
                pdfDoc.Add(Emp1);

                PdfPTable end = new PdfPTable(10);
                PdfPCell end1 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                end1.HorizontalAlignment = Element.ALIGN_CENTER;
                end1.Padding = 10;
                end1.Colspan = 10;
                end.AddCell(end1);

                PdfPCell t1 = new PdfPCell(new Phrase("Grade ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t1.HorizontalAlignment = Element.ALIGN_CENTER;
                t1.Padding = 6;
                end.AddCell(t1);

                PdfPCell t2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t2.Padding = 10;
                t2.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t2);

                PdfPCell t3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t3.Padding = 10;
                t3.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t3);

                PdfPCell t4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t4.Padding = 10;
                t4.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t4);

                PdfPCell t5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t5.Padding = 10;
                t5.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t5);


                PdfPCell t6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t6.Padding = 10;
                t6.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t6);


                PdfPCell t7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t7.Padding = 10;
                t7.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t7);

                PdfPCell t8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t8.Padding = 10;
                t8.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t8);

                PdfPCell t9 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t9.Padding = 10;
                t9.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t9);

                PdfPCell t10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t10.Padding = 10;
                t10.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t10);

                PdfPCell t11 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t11.Padding = 4;
                t11.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t11);

                PdfPCell t12 = new PdfPCell(new Phrase("90-100 ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t12.Padding = 4;
                t12.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t12);

                PdfPCell t13 = new PdfPCell(new Phrase("80-89", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t13.Padding = 4;
                t13.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t13);

                PdfPCell t14 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t14.Padding = 4;
                t14.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t14);

                PdfPCell t15 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t15.Padding = 4;
                t15.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t15);

                PdfPCell t16 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t16.Padding = 4;
                t16.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t16);


                PdfPCell t17 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t17.Padding = 4;
                t17.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t17);

                PdfPCell t18 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t18.Padding = 4;
                t18.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t18);

                PdfPCell t19 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t19.Padding = 4;
                t19.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t19);

                PdfPCell t20 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t20.Padding = 4;
                t20.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t20);
                pdfDoc.Add(end);

                Table.SpacingBefore = 7f; // Give some space after the text or it may overlap the table  

                pdfDoc.Close();
                pdfWriter.Close();

                Response.ClearContent();
                Response.ClearHeaders();
                Response.ContentType = "application/pdf";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + Title + ".pdf");
                Response.BinaryWrite(pdfStream.ToArray());
                Response.End();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "AdmissionPolicy");
                throw ex;
            }
        }
        public void GradeIX_ExportToPDF(string Title, string[] TblHeaders, float[] widths, DataTable dt, string name, string campus, string grade, string section, string semester, string Percentage, string Overallgrade, string over, string TeacherName, string SecondLange, string RepDate)
        {
            try
            {
                MastersService msSvc = new MastersService();
                string Sem = (semester == "Sem I") ? "I" : (semester == "Sem II") ? "II" : "III";

                Document document = new Document(PageSize.A4, 10.25f, 10.25f, 10.5f, 10.5f);
                CampusMaster cm = msSvc.GetCampusByCampus(campus);
                iTextSharp.text.Image LogonaceImage;
                string LogonaceImagePath = ConfigurationManager.AppSettings["AppLogos"] + "logonace.jpg";

                LogonaceImage = iTextSharp.text.Image.GetInstance(LogonaceImagePath);
                LogonaceImage.ScaleAbsolute(55, 55);

                iTextSharp.text.Image LogoImage;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";

                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(55, 55);

                // For PDF export we are using the free open-source iTextSharp library.
                string month = DateTime.Now.ToString("MMMM");
                Document pdfDoc = new Document();
                pdfDoc.AddTitle(Title);
                MemoryStream pdfStream = new MemoryStream();
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

                pdfDoc.Open();//Open Document to write
                pdfDoc.NewPage();

                Font Heading = FontFactory.GetFont("ARIAL", 9, BaseColor.BLACK);
                Font Content = FontFactory.GetFont("ARIAL", 9);

                PdfPTable nace = new PdfPTable(4);
                float[] width = new float[] { 50f, 245f, 200f, 55f };
                nace.SetWidths(width);

                PdfPCell nace1 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));
                nace1.Border = 0;
                nace1.AddElement(LogonaceImage);
                nace.AddCell(nace1);

                if (over == "Single")
                {
                    PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, " + cm.Location + "                                      SEMESTER " + Sem + "  ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                    nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                    nace2.Padding = 5;
                    nace2.Border = 0;
                    nace2.Colspan = 2;
                    nace.AddCell(nace2);
                }
                else
                {
                    PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, " + cm.Location + "                                      OVERALL ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                    nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                    nace2.Padding = 5;
                    nace2.Border = 0;
                    nace2.Colspan = 2;
                    nace.AddCell(nace2);
                }

                PdfPCell nace4 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));

                nace4.Border = 0;
                nace4.AddElement(LogoImage);
                nace.AddCell(nace4);
                pdfDoc.Add(nace);

                PdfPTable p5 = new PdfPTable(4);
                PdfPCell pe1 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe1.Border = 0;
                pe1.Colspan = 4;
                p5.AddCell(pe1);

                PdfPCell pe0 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe0.Border = 0;
                pe0.Colspan = 4;
                p5.AddCell(pe0);

                pdfDoc.Add(p5);

                PdfPTable PdfTable = new PdfPTable(4);

                PdfPCell PdfPCel1 = new PdfPCell(new Phrase("Student : " + name + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel1.Padding = 4;
                PdfPCel1.Colspan = 2;
                PdfTable.AddCell(PdfPCel1);
                PdfPCell PdfPCel2 = new PdfPCell(new Phrase("Teacher    : " + TeacherName + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel2.Padding = 4;
                PdfPCel2.Colspan = 2;
                PdfTable.AddCell(PdfPCel2);
                PdfPCell PdfPCel3 = new PdfPCell(new Phrase("Grade    : " + grade + "-" + section + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel3.Padding = 4;
                PdfPCel3.Colspan = 2;
                PdfTable.AddCell(PdfPCel3);
                PdfPCell PdfPCel4 = new PdfPCell(new Phrase("Date       : " + RepDate + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel4.Colspan = 2;
                PdfPCel4.Padding = 4;
                PdfTable.AddCell(PdfPCel4);
                pdfDoc.Add(PdfTable); // add pdf table to the document

                PdfPTable Empt = new PdfPTable(4);
                PdfPCell Empt1 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt1.Border = 0;
                Empt1.Colspan = 4;
                Empt.AddCell(Empt1);

                PdfPCell Empt00 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt00.Border = 0;
                Empt00.Colspan = 4;
                Empt.AddCell(Empt00);

                pdfDoc.Add(Empt);

                PdfPTable Table = new PdfPTable(dt.Columns.Count);
                PdfPCell PdfPCell = new PdfPCell();
                for (int column = 0; column < dt.Columns.Count; column++)
                {
                    PdfPCell = new PdfPCell(new Phrase(new Chunk(TblHeaders[column], Heading)));
                    PdfPCell.Padding = 4;
                    PdfPCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    Table.TotalWidth = 420f;
                    Table.LockedWidth = true;
                    Table.SetWidths(widths);
                    Table.AddCell(PdfPCell);
                }
                //How add the data from datatable to pdf table
                for (int rows = 0; rows < dt.Rows.Count; rows++)
                {
                    for (int column = 0; column < dt.Columns.Count; column++)
                    {
                        PdfPCell = new PdfPCell(new Phrase(new Chunk(dt.Rows[rows][column].ToString(), Content)));
                        PdfPCell.Padding = 4;
                        Table.AddCell(PdfPCell);
                    }
                }
                pdfDoc.Add(Table); // add Table to the document

                PdfPTable Emp = new PdfPTable(4);
                PdfPCell Empt2 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt2.Border = 0;
                Empt2.Colspan = 4;
                Emp.AddCell(Empt2);

                pdfDoc.Add(Emp);

                PdfPTable per = new PdfPTable(4);
                PdfPCell per1 = new PdfPCell(new Phrase("Overall Percentage:  " + Percentage + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per1.Border = 0;
                per1.Padding = 10;
                per1.Colspan = 4;
                per.AddCell(per1);

                PdfPCell per2 = new PdfPCell(new Phrase("Overall Grade : " + Overallgrade + " ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per2.Border = 0;
                per2.Padding = 10;
                per2.Colspan = 4;
                per.AddCell(per2);
                pdfDoc.Add(per);


                PdfPTable repot = new PdfPTable(4);
                float[] widt = new float[] { 10f, 50f, 20f, 20f };
                PdfPCell repot1 = new PdfPCell(new Phrase("Class Teacher ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot1.HorizontalAlignment = Element.ALIGN_CENTER;
                repot1.PaddingTop = 50;
                repot.AddCell(repot1);
                PdfPCell repot2 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot2.HorizontalAlignment = Element.ALIGN_CENTER;
                repot2.PaddingTop = 50;
                repot.AddCell(repot2);
                PdfPCell repot3 = new PdfPCell(new Phrase("Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot3.HorizontalAlignment = Element.ALIGN_CENTER;
                repot3.PaddingTop = 50;
                repot.AddCell(repot3);
                PdfPCell repot4 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot4.HorizontalAlignment = Element.ALIGN_CENTER;
                repot4.PaddingTop = 50;
                repot.AddCell(repot4);
                pdfDoc.Add(repot);

                PdfPTable Emp1 = new PdfPTable(4);
                PdfPCell Empt21 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt21.Border = 0;
                Empt21.Colspan = 4;
                Emp1.AddCell(Empt21);

                PdfPCell Empt41 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt41.Border = 0;
                Empt41.Colspan = 4;
                Emp1.AddCell(Empt41);
                pdfDoc.Add(Emp1);

                PdfPTable end = new PdfPTable(10);
                PdfPCell end1 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                end1.HorizontalAlignment = Element.ALIGN_CENTER;
                end1.Padding = 10;
                end1.Colspan = 10;
                end.AddCell(end1);

                PdfPCell t1 = new PdfPCell(new Phrase("Grade ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t1.HorizontalAlignment = Element.ALIGN_CENTER;
                t1.Padding = 6;
                end.AddCell(t1);

                PdfPCell t2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t2.Padding = 10;
                t2.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t2);

                PdfPCell t3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t3.Padding = 10;
                t3.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t3);

                PdfPCell t4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t4.Padding = 10;
                t4.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t4);

                PdfPCell t5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t5.Padding = 10;
                t5.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t5);


                PdfPCell t6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t6.Padding = 10;
                t6.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t6);


                PdfPCell t7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t7.Padding = 10;
                t7.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t7);

                PdfPCell t8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t8.Padding = 10;
                t8.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t8);

                PdfPCell t9 = new PdfPCell(new Phrase("G", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t9.Padding = 10;
                t9.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t9);

                PdfPCell t10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t10.Padding = 10;
                t10.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t10);

                PdfPCell t11 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t11.Padding = 4;
                t11.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t11);

                PdfPCell t12 = new PdfPCell(new Phrase("90-100 ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t12.Padding = 4;
                t12.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t12);

                PdfPCell t13 = new PdfPCell(new Phrase("80-89", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t13.Padding = 4;
                t13.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t13);

                PdfPCell t14 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t14.Padding = 4;
                t14.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t14);

                PdfPCell t15 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t15.Padding = 4;
                t15.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t15);

                PdfPCell t16 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t16.Padding = 4;
                t16.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t16);


                PdfPCell t17 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t17.Padding = 4;
                t17.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t17);

                PdfPCell t18 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t18.Padding = 4;
                t18.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t18);

                PdfPCell t19 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t19.Padding = 4;
                t19.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t19);

                PdfPCell t20 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t20.Padding = 4;
                t20.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t20);
                pdfDoc.Add(end);

                Table.SpacingBefore = 7f; // Give some space after the text or it may overlap the table  

                pdfDoc.Close();
                pdfWriter.Close();

                Response.ClearContent();
                Response.ClearHeaders();
                Response.ContentType = "application/pdf";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + Title + ".pdf");
                Response.BinaryWrite(pdfStream.ToArray());
                Response.End();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "AdmissionPolicy");
                throw ex;
            }
        }
        public void OverAllGrade(string PreRegNum, string campus, string grade, string section, string semester, string academicyear)
        {
            try
            {
                Assess360Service A360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                string RepDate = string.Empty;
                string SecondLange = string.Empty;
                string TeacherName = string.Empty;
                string over = "All";
                string title = "MarkList_" + PreRegNum + "";
                var total = string.Empty;
                var comgrade = string.Empty;
                Double phy, che, bio, eng, lang, math, eco, phyedu, tot;
                string name = string.Empty;
                criteria.Clear();
                criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                criteria.Add("Section", section);
                criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(semester))
                {
                    if (semester == "Sem I") { criteria.Add("Semester", Convert.ToInt64(1)); }
                    else if (semester == "Sem II") { criteria.Add("Semester", Convert.ToInt64(2)); }
                    else if (semester == "Sem III") { criteria.Add("Semester", Convert.ToInt64(3)); }

                }
                ReportCardService rptCardSrvc = new ReportCardService();
                Dictionary<long, IList<RptCardInBoxView>> dcnRptCardLst = rptCardSrvc.GetRepCardInBoxListWithPagingAndCriteriaEQSearch(0, 9999, string.Empty, string.Empty, criteria);

                if (dcnRptCardLst != null && dcnRptCardLst.Count > 0 && dcnRptCardLst.FirstOrDefault().Key > 0)
                {
                    IList<RptCardInBoxView> TeacherandSeconLan = dcnRptCardLst.FirstOrDefault().Value.ToList();
                    TeacherName = TeacherandSeconLan[0].TeacherName;
                    SecondLange = TeacherandSeconLan[0].Second_Language;
                    RepDate = TeacherandSeconLan[0].RptDate.Value.ToString("dd/MM/yyyy");
                }

                if ((grade == "IX" || grade == "X") && (section == "A" || section == "B"))
                {
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        name = Totalsemlist.FirstOrDefault().Value[0].Name;
                        var arrlang = (from a in Totalsemlist.FirstOrDefault().Value
                                       select new { a.Subject }).ToList();
                    }
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXAB>> GetClassIXABSubjectList = A360.GetClassIXABSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXAB> ClassIXABList = GetClassIXABSubjectList.FirstOrDefault().Value.ToList();
                    List<Totalsemlist> TotalList = Totalsemlist.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in TotalList
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();
                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        var Physics = (from u in Totalsemlist.First().Value
                                       where u.Subject == "Physics"
                                       select u.totalmark).ToList();
                        var Chemistry = (from u in Totalsemlist.First().Value
                                         where u.Subject == "Chemistry"
                                         select u.totalmark).ToList();
                        var Biology = (from u in Totalsemlist.First().Value
                                       where u.Subject == "Biology"
                                       select u.totalmark).ToList();

                        if (Physics.Count == 0) { phy = 0; } else { phy = Convert.ToDouble(Physics[0]); }
                        if (Chemistry.Count == 0) { che = 0; } else { che = Convert.ToDouble(Chemistry[0]); }
                        if (Biology.Count == 0) { bio = 0; } else { bio = Convert.ToDouble(Biology[0]); }

                        tot = Convert.ToDouble((phy + che + bio) / 3);
                        total = Convert.ToString(Math.Round(tot, 1));
                        comgrade = Convert.ToString((GetGradeList(total)));
                    }
                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        foreach (ClassforIXAB item in ClassIXABList)
                        {
                            var GetSubject = (from u in Totalsemlist.First().Value
                                              where u.Subject == item.Subject
                                              select u).ToList();
                            if (blksubject.Contains(item.Subject))
                            {
                                item.Subject = GetSubject[0].Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = GetSubject[0].totalmark;
                                item.Grade = (GetGradeList(item.Marks));
                            }
                            else
                            {
                                if (item.Subject == "Combined science")
                                {
                                    item.Subject = item.Subject; item.Marks = total; item.Grade = comgrade;
                                }
                                else
                                {
                                    item.Subject = item.Subject;
                                    if (item.Subject == "Language" && GetSubject.Count != 0)
                                    { item.Subject = item.Subject + " - " + SecondLange; }

                                    item.Marks = string.Empty;
                                    item.Grade = string.Empty;
                                }
                            }

                        }
                        string Overallgrade = string.Empty;
                        Double mrkdtotal = 0;
                        string Percentage = string.Empty;
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {
                                if (ClassIXABList[i].Marks == "" || ClassIXABList[i].Marks == null)
                                {
                                }
                                else
                                {
                                    mrkdtotal = Convert.ToDouble(ClassIXABList[i].Marks);
                                }
                            }
                            else
                            {
                                if (ClassIXABList[i].Marks == "" || ClassIXABList[i].Marks == null)
                                {
                                }
                                else
                                {
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXABList[i].Marks);
                                }
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };
                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (ClassIXABList[i].Marks == string.Empty)
                            { ClassIXABList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXABList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }

                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));

                        var ass = (from a in ClassIXABList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        GradeIX_ExportToPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                }
                else if ((grade == "IX" || grade == "X") && (section == "C" || section == "D"))
                {
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    // get teacher name and secondlangue from the RptCard Table
                    criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(semester))
                    {
                        if (semester == "Sem I") { criteria.Add("Semester", Convert.ToInt64(1)); }
                        else if (semester == "Sem II") { criteria.Add("Semester", Convert.ToInt64(2)); }

                    }
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXCD>> GetClassIXCDSubjectList = A360.GetClassIXCDSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXCD> ClassIXCDList = GetClassIXCDSubjectList.FirstOrDefault().Value.ToList();
                    List<Totalsemlist> TotalList = Totalsemlist.FirstOrDefault().Value.ToList();
                    if (Totalsemlist != null && Totalsemlist.Count > 0) { name = TotalList[0].Name; }
                    IEnumerable<string> blksubject = (from p in TotalList
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();

                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        foreach (ClassforIXCD item in ClassIXCDList)
                        {
                            var GetSubject = (from u in Totalsemlist.First().Value
                                              where u.Subject == item.Subject
                                              select u).ToList();
                            if (blksubject.Contains(item.Subject))
                            {
                                item.Subject = GetSubject[0].Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = GetSubject[0].totalmark;
                                item.Grade = (GetGradeList(item.Marks));
                            }
                            else
                            {
                                if (item.Subject == "Combined science")
                                {
                                    item.Subject = item.Subject; item.Marks = total; item.Grade = comgrade;
                                }
                                else
                                {
                                    item.Subject = item.Subject;
                                    if (item.Subject == "Language" && GetSubject.Count != 0)
                                    { item.Subject = item.Subject + " - " + SecondLange; }

                                    item.Marks = string.Empty;
                                    item.Grade = string.Empty;
                                }
                            }

                        }
                        string Overallgrade = string.Empty;
                        Double mrkdtotal = 0;
                        string Percentage = string.Empty;
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                                if (!string.IsNullOrEmpty(ClassIXCDList[i].Marks)) mrkdtotal = Convert.ToDouble(ClassIXCDList[i].Marks);
                                else
                                    if (!string.IsNullOrEmpty(ClassIXCDList[i].Marks)) mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXCDList[i].Marks);
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };

                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (ClassIXCDList[i].Marks == string.Empty)
                            { ClassIXCDList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXCDList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }

                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));

                        var ass = (from a in ClassIXCDList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        GradeIX_ExportToPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                }
                else
                {
                    List<decimal> SingleStudMrks = new List<decimal>();
                    decimal EngMrks, LangMrks, BioMrks, MathsMrks, PhyMrks, CheMrks, IcdMrks, HcgMrks, TotalMrks, PercentageMrks;
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    Dictionary<long, IList<Vw_FinalResult>> Totalsemlist = A360.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<Vw_FinalResult> ListfromVItoVII = Totalsemlist.FirstOrDefault().Value.ToList();
                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        var English = (from u in Totalsemlist.FirstOrDefault().Value
                                       where u.Subject == "English"
                                       select u.TotalMarks).ToList();

                        EngMrks = (English.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(English[0]);
                        SingleStudMrks.Add(EngMrks);//0

                        var Language = (from u in Totalsemlist.FirstOrDefault().Value
                                        where u.Subject == "Language"
                                        select u.TotalMarks).ToList();
                        LangMrks = (Language.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Language[0]);
                        SingleStudMrks.Add(LangMrks);//1
                        var Biology = (from u in Totalsemlist.FirstOrDefault().Value
                                       where u.Subject == "Biology"
                                       select u.TotalMarks).ToList();
                        BioMrks = (Biology.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Biology[0]);
                        SingleStudMrks.Add(BioMrks);//2

                        var Mathematics = (from u in Totalsemlist.FirstOrDefault().Value
                                           where u.Subject == "Mathematics"
                                           select u.TotalMarks).ToList();
                        MathsMrks = (Mathematics.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Mathematics[0]);
                        SingleStudMrks.Add(MathsMrks);//3


                        var Physics = (from u in Totalsemlist.FirstOrDefault().Value
                                       where u.Subject == "Physics"
                                       select u.TotalMarks).ToList();
                        PhyMrks = (Physics.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Physics[0]);
                        SingleStudMrks.Add(PhyMrks);//4

                        var Chemistry = (from u in Totalsemlist.FirstOrDefault().Value
                                         where u.Subject == "Chemistry"
                                         select u.TotalMarks).ToList();
                        CheMrks = (Chemistry.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Chemistry[0]);
                        SingleStudMrks.Add(CheMrks);//5

                        var ICT = (from u in Totalsemlist.FirstOrDefault().Value
                                   where u.Subject == "ICT"
                                   select u.TotalMarks).ToList();
                        IcdMrks = (ICT.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(ICT[0]);
                        SingleStudMrks.Add(IcdMrks);//6

                        var HCG = (from u in Totalsemlist.FirstOrDefault().Value
                                   where u.Subject == "HC&G"
                                   select u.TotalMarks).ToList();
                        HcgMrks = (HCG.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(HCG[0]);
                        SingleStudMrks.Add(HcgMrks);//7
                        // calculate the total and percentage here.....
                        TotalMrks = (EngMrks + LangMrks + BioMrks + MathsMrks + PhyMrks + CheMrks + IcdMrks + HcgMrks);
                        SingleStudMrks.Add(TotalMrks);//8
                        // PercentageMrks = (TotalMrks / (ListfromVItoVII.Count * 100) * 100);

                        int count = 0;
                        if (EngMrks != 0) { count = count + 1; }
                        if (LangMrks != 0) { count = count + 1; }
                        if (BioMrks != 0) { count = count + 1; }
                        if (MathsMrks != 0) { count = count + 1; }
                        if (PhyMrks != 0) { count = count + 1; }
                        if (CheMrks != 0) { count = count + 1; }
                        if (IcdMrks != 0) { count = count + 1; }
                        if (HcgMrks != 0) { count = count + 1; }
                        PercentageMrks = ((TotalMrks / (count * 100)) * 100);
                        SingleStudMrks.Add((Math.Round(PercentageMrks, 1)));//9
                        PDFforVItoVIIIGrade(SingleStudMrks, PreRegNum, campus, grade, section, ListfromVItoVII[0].Name, TeacherName, SecondLange, RepDate);
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "AdmissionPolicy");
                throw ex;
            }
        }
        public void PDFforVItoVIIIGrade(IList<decimal> ListfromVItoVII, string PreRegNum, string campus, string gradeVal, string section, string NameVal, string TeacherNameVal, string SecondLangeVal, string MrksRptDate)
        {
            try
            {
                Document document = new Document(PageSize.A4, 10.25f, 10.25f, 10.5f, 10.5f);
                iTextSharp.text.Image LogonaceImage;
                string LogonaceImagePath = ConfigurationManager.AppSettings["AppLogos"] + "logonace.jpg";

                LogonaceImage = iTextSharp.text.Image.GetInstance(LogonaceImagePath);
                LogonaceImage.ScaleAbsolute(55, 55);

                iTextSharp.text.Image LogoImage;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";

                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(55, 55);

                // For PDF export we are using the free open-source iTextSharp library.
                Document pdfDoc = new Document();
                pdfDoc.AddTitle(PreRegNum);
                MemoryStream pdfStream = new MemoryStream();
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

                pdfDoc.Open();//Open Document to write
                pdfDoc.NewPage();

                PdfPTable nace = new PdfPTable(4);
                float[] width = new float[] { 50f, 245f, 200f, 55f };
                nace.SetWidths(width);

                PdfPCell nace1 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL))));
                nace1.Border = 0;
                nace1.AddElement(LogonaceImage);
                nace.AddCell(nace1);

                PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE                                      OVERALL ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                nace2.Padding = 5;
                nace2.Border = 0;
                nace2.Colspan = 2;
                nace.AddCell(nace2);

                PdfPCell nace4 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL))));

                nace4.Border = 0;
                nace4.AddElement(LogoImage);
                nace.AddCell(nace4);
                pdfDoc.Add(nace);

                PdfPTable p5 = new PdfPTable(4);
                PdfPCell pe1 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe1.Border = 0;
                pe1.Colspan = 4;
                p5.AddCell(pe1);

                PdfPCell pe0 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe0.Border = 0;
                pe0.Colspan = 4;
                p5.AddCell(pe0);

                pdfDoc.Add(p5);

                PdfPTable PdfTable = new PdfPTable(4);

                PdfPCell PdfPCel1 = new PdfPCell(new Phrase("Student    :  " + NameVal + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel1.Padding = 4;
                PdfPCel1.Colspan = 2;
                PdfTable.AddCell(PdfPCel1);
                PdfPCell PdfPCel2 = new PdfPCell(new Phrase("Teacher    :   " + TeacherNameVal + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel2.Padding = 4;
                PdfPCel2.Colspan = 2;
                PdfTable.AddCell(PdfPCel2);
                PdfPCell PdfPCel3 = new PdfPCell(new Phrase("Grade  :   " + gradeVal + " - " + section + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel3.Padding = 4;
                PdfPCel3.Colspan = 2;
                PdfTable.AddCell(PdfPCel3);
                PdfPCell PdfPCel4 = new PdfPCell(new Phrase("Date   :   " + MrksRptDate + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel4.Colspan = 2;
                PdfPCel4.Padding = 4;
                PdfTable.AddCell(PdfPCel4);
                pdfDoc.Add(PdfTable); // add pdf table to the document

                PdfPTable Empt = new PdfPTable(4);


                PdfPCell Empt1 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt1.Border = 0;
                Empt1.Colspan = 4;
                Empt.AddCell(Empt1);

                PdfPCell Empt00 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt00.Border = 0;
                Empt00.Colspan = 4;
                Empt.AddCell(Empt00);

                pdfDoc.Add(Empt);

                PdfPTable Table = new PdfPTable(3);
                float[] wid = new float[] { 10f, 80f, 10f };
                Table.SetWidths(wid);

                PdfPCell sno = new PdfPCell(new Phrase("S.NO", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                sno.HorizontalAlignment = Element.ALIGN_CENTER;
                Table.AddCell(sno);

                PdfPCell subject = new PdfPCell(new Phrase("Subject", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                subject.HorizontalAlignment = Element.ALIGN_CENTER;
                Table.AddCell(subject);

                PdfPCell grade = new PdfPCell(new Phrase("Grade", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grade.HorizontalAlignment = Element.ALIGN_CENTER;
                Table.AddCell(grade);

                PdfPCell snoone = new PdfPCell(new Phrase("1", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoone.Padding = 4;
                Table.AddCell(snoone);

                PdfPCell English = new PdfPCell(new Phrase("English", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                English.Padding = 4;
                Table.AddCell(English);

                PdfPCell Englishgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[0].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Englishgrade.Padding = 4;
                Table.AddCell(Englishgrade);

                PdfPCell snoTwo = new PdfPCell(new Phrase("2", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoTwo.Padding = 4;
                Table.AddCell(snoTwo);

                PdfPCell Language = new PdfPCell(new Phrase("Language - " + SecondLangeVal + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Language.Padding = 4;
                Table.AddCell(Language);

                PdfPCell Languagegrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[1].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Languagegrade.Padding = 4;
                Table.AddCell(Languagegrade);

                PdfPCell snoThree = new PdfPCell(new Phrase("3", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoThree.Padding = 4;
                Table.AddCell(snoThree);

                PdfPCell Biology = new PdfPCell(new Phrase("Biology", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Biology.Padding = 4;
                Table.AddCell(Biology);

                PdfPCell Biologygrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[2].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Biologygrade.Padding = 4;
                Table.AddCell(Biologygrade);

                PdfPCell snoFour = new PdfPCell(new Phrase("4", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoFour.Padding = 4;
                Table.AddCell(snoFour);

                PdfPCell Mathematics = new PdfPCell(new Phrase("Mathematics", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Mathematics.Padding = 4;
                Table.AddCell(Mathematics);

                PdfPCell Mathematicsgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[3].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Mathematicsgrade.Padding = 4;
                Table.AddCell(Mathematicsgrade);

                PdfPCell snoFive = new PdfPCell(new Phrase("5", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoFive.Padding = 4;
                Table.AddCell(snoFive);

                PdfPCell Physics = new PdfPCell(new Phrase("Physics", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Physics.Padding = 4;
                Table.AddCell(Physics);

                PdfPCell Physicsgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[4].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Physicsgrade.Padding = 3;
                Table.AddCell(Physicsgrade);

                PdfPCell snoSix = new PdfPCell(new Phrase("6", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoSix.Padding = 4;
                Table.AddCell(snoSix);

                PdfPCell Chemistry = new PdfPCell(new Phrase("Chemistry", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Chemistry.Padding = 4;
                Table.AddCell(Chemistry);

                PdfPCell Chemistrygrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[5].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Chemistrygrade.Padding = 4;
                Table.AddCell(Chemistrygrade);

                PdfPCell snoSeven = new PdfPCell(new Phrase("7", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoSeven.Padding = 4;
                Table.AddCell(snoSeven);

                PdfPCell ICT = new PdfPCell(new Phrase("ICT", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                ICT.Padding = 4;
                Table.AddCell(ICT);

                PdfPCell ICTgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[6].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                ICTgrade.Padding = 4;
                Table.AddCell(ICTgrade);

                PdfPCell snoEight = new PdfPCell(new Phrase("8", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoEight.Padding = 4;
                Table.AddCell(snoEight);

                PdfPCell HCG = new PdfPCell(new Phrase("History & Geography", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                HCG.Padding = 4;
                Table.AddCell(HCG);

                PdfPCell HCGgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[7].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                HCGgrade.Padding = 4;
                Table.AddCell(HCGgrade);
                pdfDoc.Add(Table); // add Table to the document

                PdfPTable Emp = new PdfPTable(4);
                PdfPCell Empt2 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt2.Border = 0;
                Empt2.Colspan = 4;
                Emp.AddCell(Empt2);

                pdfDoc.Add(Emp);

                PdfPTable per = new PdfPTable(4);

                PdfPCell per2 = new PdfPCell(new Phrase("Overall Grade : " + GetGradeList(ListfromVItoVII[9].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per2.Border = 0;
                per2.Padding = 10;
                per2.Colspan = 4;
                per.AddCell(per2);


                PdfPCell per1 = new PdfPCell(new Phrase("Promoted / Conditional Promotion / Not Promoted to :   ----------------------------------", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per1.Border = 0;
                per1.Padding = 10;
                per1.Colspan = 4;
                per.AddCell(per1);
                pdfDoc.Add(per);

                PdfPTable repot = new PdfPTable(4);
                float[] widt = new float[] { 10f, 50f, 20f, 20f };
                PdfPCell repot1 = new PdfPCell(new Phrase("Class Teacher ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot1.HorizontalAlignment = Element.ALIGN_CENTER;
                repot1.PaddingTop = 50;
                repot.AddCell(repot1);
                PdfPCell repot2 = new PdfPCell(new Phrase("MYP Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot2.HorizontalAlignment = Element.ALIGN_CENTER;
                repot2.PaddingTop = 50;
                repot.AddCell(repot2);
                PdfPCell repot3 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot3.HorizontalAlignment = Element.ALIGN_CENTER;
                repot3.PaddingTop = 50;
                repot.AddCell(repot3);
                PdfPCell repot4 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot4.HorizontalAlignment = Element.ALIGN_CENTER;
                repot4.PaddingTop = 50;
                repot.AddCell(repot4);
                pdfDoc.Add(repot);

                PdfPTable Emp1 = new PdfPTable(4);
                PdfPCell Empt21 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt21.Border = 0;
                Empt21.Colspan = 4;
                Emp1.AddCell(Empt21);

                PdfPCell Empt41 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt41.Border = 0;
                Empt41.Colspan = 4;
                Emp1.AddCell(Empt41);
                pdfDoc.Add(Emp1);

                PdfPTable end = new PdfPTable(10);
                PdfPCell end1 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                end1.HorizontalAlignment = Element.ALIGN_CENTER;
                end1.Padding = 10;
                end1.Colspan = 10;
                end.AddCell(end1);

                PdfPCell t1 = new PdfPCell(new Phrase("Grade ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t1.HorizontalAlignment = Element.ALIGN_CENTER;
                t1.Padding = 6;
                end.AddCell(t1);

                PdfPCell t2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t2.Padding = 10;
                t2.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t2);

                PdfPCell t3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t3.Padding = 10;
                t3.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t3);

                PdfPCell t4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t4.Padding = 10;
                t4.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t4);

                PdfPCell t5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t5.Padding = 10;
                t5.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t5);


                PdfPCell t6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t6.Padding = 10;
                t6.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t6);


                PdfPCell t7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t7.Padding = 10;
                t7.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t7);

                PdfPCell t8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t8.Padding = 10;
                t8.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t8);

                PdfPCell t9 = new PdfPCell(new Phrase("G", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t9.Padding = 10;
                t9.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t9);

                PdfPCell t10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t10.Padding = 10;
                t10.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t10);

                PdfPCell t11 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t11.Padding = 4;
                t11.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t11);

                PdfPCell t12 = new PdfPCell(new Phrase("90-100 ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t12.Padding = 4;
                t12.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t12);

                PdfPCell t13 = new PdfPCell(new Phrase("80-89", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t13.Padding = 4;
                t13.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t13);

                PdfPCell t14 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t14.Padding = 4;
                t14.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t14);

                PdfPCell t15 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t15.Padding = 4;
                t15.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t15);

                PdfPCell t16 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t16.Padding = 4;
                t16.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t16);


                PdfPCell t17 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t17.Padding = 4;
                t17.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t17);

                PdfPCell t18 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t18.Padding = 4;
                t18.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t18);

                PdfPCell t19 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t19.Padding = 4;
                t19.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t19);

                PdfPCell t20 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t20.Padding = 4;
                t20.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t20);
                pdfDoc.Add(end);

                //  Table.SpacingBefore = 7f; // Give some space after the text or it may overlap the table  

                pdfDoc.Close();
                pdfWriter.Close();

                Response.ClearContent();
                Response.ClearHeaders();
                Response.ContentType = "application/pdf";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + PreRegNum + ".pdf");
                Response.BinaryWrite(pdfStream.ToArray());
                Response.End();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "AdmissionPolicy");
                throw ex;
            }
        }
        #endregion "End"

        #endregion end new subject based semester marks

        #region Assess360 Request Creation

        public ActionResult Ass360RequestCreation()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null || (Userobj != null && Userobj.UserId == null))
                { return RedirectToAction("LogOff", "Account"); }
                ViewBag.createdBy = (Userobj.UserId != null) ? Userobj.UserId : "";
                ViewBag.userRole = (Userobj.Role != null) ? Userobj.Role : "";
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult GetjQgridAss360RequestCreation(string campus, string grade, string section, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    Assess360Service assSrvc = new Assess360Service();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    criteria.Add("AdmissionStatus", "Registered");
                    //DateTime DateNow = DateTime.Now;
                    //if (DateNow.Month >= 5)
                    //{ criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString()); }
                    //else
                    //{ criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString()); }
                    Dictionary<long, IList<StudTempForAss360ReqCreation>> GetStudentList = assSrvc.GetStudTemplateListWithCriteria(page - 1, rows, sidx, sord, criteria);
                    long totalrecords = GetStudentList.First().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsonresult = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,

                        rows = (from items in GetStudentList.First().Value
                                select new
                                {
                                    cell = new string[] {
                                        items.Id.ToString(),
                                        items.PreRegNum.ToString(),
                                        items.NewId,
                                        items.Name,
                                        items.Campus,
                                        items.Grade,
                                        items.Section,
                                        items.AdmissionStatus,
                                        items.AcademicYear,
                            }
                                })
                    };
                    return Json(jsonresult, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex) { throw ex; }
        }

        public ActionResult Ass360RequestSaveFunction(Assess360 ass360)
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) { return RedirectToAction("LogOff", "Account"); }
                Assess360Service assSrvc = new Assess360Service();
                assSrvc.CreateOrUpdateAssess360List(ass360);
                return null;
            }
            catch (Exception ex) { throw ex; }
        }
        #endregion
        #region Show Past Year Records

        public ActionResult ShowPastYearSubjectMarks()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null || (Userobj != null && Userobj.UserId == null))
                { return RedirectToAction("LogOff", "Account"); }
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public JsonResult GetJqgridShowPastYearMarks(SubjectMarks sm, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                if (string.IsNullOrEmpty(sm.Campus) && string.IsNullOrEmpty(sm.Grade) && string.IsNullOrEmpty(sm.Section) && string.IsNullOrEmpty(sm.Semester) && string.IsNullOrEmpty(sm.Subject))
                {
                    return null;
                }
                else
                {
                    Assess360Service A360 = new Assess360Service();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrWhiteSpace(sm.Campus)) { criteria.Add("Campus", sm.Campus); }
                    if (!string.IsNullOrWhiteSpace(sm.Grade)) { criteria.Add("Grade", sm.Grade); }
                    if (!string.IsNullOrWhiteSpace(sm.Section)) { criteria.Add("Section", sm.Section); }
                    if (!string.IsNullOrWhiteSpace(sm.Subject)) { criteria.Add("Subject", (sm.Subject == "Language-Hindi" || sm.Subject == "Language-French") ? "Language" : sm.Subject); }
                    if (!string.IsNullOrWhiteSpace(sm.Semester)) { criteria.Add("Semester", sm.Semester); }
                    if (!string.IsNullOrWhiteSpace(sm.AcademicYear)) { criteria.Add("AcademicYear", sm.AcademicYear); }
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<ShowPastYearSubjectMarks>> GetSubjectMarksList = A360.GetMarklistfromSubjectMarksWithCriteria(0, 9999, sidx, sord, criteria);
                    long totalrecords = GetSubjectMarksList.First().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsonresult = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,

                        rows = (from items in GetSubjectMarksList.First().Value
                                select new
                                {
                                    cell = new string[] {
                                items.Id.ToString(),
                                        items.PreRegNum.ToString(),
                                        items.Name,
                                        items.Test1,
                                        items.Test2,
                                        items.Test3,
                                        items.Project,
                                        items.FATotal,
                                        items.SATotal,
                                        items.Outof,
                                        items.Fa1andFa2,
                                        items.SEMGrade,
                                        items.Subject,
                                        items.Semester,
                                        items.Campus,
                                        items.Grade,
                                        items.Section,
                                        items.CreatedBy,
                                }
                                })
                    };
                    return Json(jsonresult, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        #endregion end.

        public ActionResult NotUsedAssignmentList()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null || (Userobj != null && Userobj.UserId == null))
                { return RedirectToAction("LogOff", "Account"); }
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult NotUsedAssignmentListJqGrid(string ExportType, string Campus, string Grade, string Subject, string AssignmentName, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();

                if (!string.IsNullOrWhiteSpace(Campus) && Campus != "null")
                {
                    var campusArr = Campus.Split(',');
                    criteria.Add("Campus", campusArr);
                }
                if (!string.IsNullOrWhiteSpace(Grade) && Grade != "null")
                {
                    var gradeArr = Grade.Split(',');
                    criteria.Add("Grade", gradeArr);
                }

                if (!string.IsNullOrWhiteSpace(Subject))
                {
                    criteria.Add("Subject", Subject);
                }

                if (!string.IsNullOrWhiteSpace(AssignmentName))
                {
                    criteria.Add("AssignmentName", AssignmentName);
                }
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<NotUsedAssignmentList>> AssignmentList = null;
                if (!string.IsNullOrWhiteSpace(Grade))
                {
                    AssignmentList = a360.GetNotUsedAssignmentListWithPagingAndCriteriaEqSearch(page - 1, rows, sord, sidx, criteria);
                }
                else
                    AssignmentList = a360.GetNotUsedAssignmentListWithPagingAndCriteriaLikeSearch(page - 1, rows, sidx, sord, criteria);
                if (AssignmentList != null && AssignmentList.Count > 0)
                {
                    if (ExportType == "Excel")
                    {
                        var List = AssignmentList.First().Value.ToList();
                        base.ExptToXL(List, "NotUsedAssignmentList", (items => new
                        {
                            items.Id,
                            items.Campus,
                            items.Grade,
                            items.Subject,
                            items.AssignmentName,
                        }));
                        return new EmptyResult();
                    }
                    else
                    {
                        long totalrecords = AssignmentList.First().Key;
                        int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var AssLst = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalrecords,

                            rows = (
                                 from items in AssignmentList.First().Value

                                 select new
                                 {
                                     cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.Campus,
                                            items.Grade,
                                            items.Subject,
                                            items.AssignmentName,
                                         }
                                 }).ToList()
                        };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        #region "ReportCardForTirupuandKarur CBSE By Micheal"

        public ActionResult ReportCardRequest()
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null)
            {
                return RedirectToAction("LogOff", "Account");
            }
            else
            {
                MastersService ms = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                var usrcmp = Session["UserCampus"] as IEnumerable<string>;
                if (usrcmp != null && usrcmp.Count() != 0)
                {
                    if (usrcmp.First() != null)            // to check if the usrcmp obj is null or with data
                    {
                        criteria.Add("Name", usrcmp);
                    }
                }
                Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                criteria.Clear();
                Dictionary<long, IList<GradeMaster>> GradeMaster = ms.GetGradeMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                Dictionary<long, IList<SectionMaster>> SectionMaster = ms.GetSectionMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                Dictionary<long, IList<AcademicyrMaster>> AcademicyrMaster = ms.GetAcademicyrMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                ViewBag.campusddl = CampusMaster.First().Value;
                ViewBag.gradeddl = GradeMaster.First().Value;
                ViewBag.sectionddl = SectionMaster.First().Value;
                ViewBag.acadyrddl = AcademicyrMaster.First().Value;
                ViewBag.CurYear = DateTime.Now.Year.ToString() + '-' + Convert.ToString(DateTime.Now.Year + 1);
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
        }

        public ActionResult ReportCardRequestJqGrid(string Campus, string Grade, string Section, string AcYear, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                ReportCardService rptSvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus)) criteria.Add("Campus", Campus);
                if (!string.IsNullOrEmpty(Grade)) criteria.Add("Grade", Grade);
                if (!string.IsNullOrEmpty(Section)) criteria.Add("Section", Section);
                if (!string.IsNullOrEmpty(AcYear)) criteria.Add("AcademicYear", AcYear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<ReportCardRequest>> RptCrdRequest = rptSvc.GetReportCardRequestListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                if (RptCrdRequest.Values != null && RptCrdRequest.First().Value.Count > 0)
                {
                    long totalrecords = RptCrdRequest.First().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsondat = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,
                        rows = (from items in RptCrdRequest.First().Value
                                select new
                                {
                                    i = 2,
                                    cell = new string[] {
                               items.Id.ToString(),
                                "<a href='#' style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"ShowReportRequest('"+ items.Id +"');\" '>"+items.RequestNo+"</a>",
                               //items.RequestNo,
                               items.Campus,
                               items.Grade,
                               items.Section,
                               items.AcademicYear,
                               items.CreatedBy,
                               items.CreatedDate.ToString("dd/MM/yyyy"),
                               items.ModifiedBy,
                               items.ModifiedDate.ToString()
                            }
                                })
                    };
                    return Json(jsondat, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw ex;
            }
        }

        public ActionResult CreateReportCardRequest(string Campus, string Grade, string Section, string AcYear)
        {
            try
            {
                ReportCardService rptSvc = new ReportCardService();
                MastersService msSvc = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus)) criteria.Add("Campus", Campus);
                if (!string.IsNullOrEmpty(Grade)) criteria.Add("Grade", Grade);
                if (!string.IsNullOrEmpty(Section)) criteria.Add("Section", Section);
                if (!string.IsNullOrEmpty(AcYear)) criteria.Add("AcademicYear", AcYear);
                Dictionary<long, IList<ReportCardRequest>> chkRptCrdRequest = rptSvc.GetReportCardRequestListWithPagingAndCriteria(0, 10, string.Empty, string.Empty, criteria);
                if (chkRptCrdRequest.Values != null && chkRptCrdRequest.First().Value.Count > 0)
                {
                    var script = string.Format("Request already added!</br> Please Refer Request #{0}", chkRptCrdRequest.FirstOrDefault().Value[0].RequestNo);
                    return Json(script, JsonRequestBehavior.AllowGet);
                    // var script = string.Format("Request already added!</br> Please Refer Request #{0}",chkRptCrdRequest.FirstOrDefault().Value[0].RequestNo);
                    // return JavaScript(@"ErrMsg(" + script + ");");
                }
                else
                {
                    TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                    ReportCardRequest req = new ReportCardRequest();
                    req.Campus = Campus;
                    req.Grade = Grade;
                    req.Section = Section;
                    req.AcademicYear = AcYear;
                    CampusMaster cm = msSvc.GetCampusByCampus(Campus);
                    //string campus = Regex.Replace(Campus, @"\s+", "");
                    req.RequestNo = "Req-" + cm.Code + "-" + Grade + "-" + Section;
                    req.CreatedBy = Userobj.UserId;
                    req.CreatedDate = DateTime.Now;
                    req.ModifiedBy = Userobj.UserId;
                    req.ModifiedDate = DateTime.Now;
                    rptSvc.CreateOrUpdateReportCardRequest(req);
                    return Json("Success", JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw ex;
            }
        }

        public ActionResult ReportCardCBSE(long RptRequestId, string Subject, string Language)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) { return RedirectToAction("LogOff", "Account"); }
            else
            {
                try
                {
                    ReportCardService rptSvc = new ReportCardService();
                    ReportCardRequest RptCardReq = rptSvc.GetRepoetCardRequestById(RptRequestId);
                    Dictionary<string, object> Criteria = new Dictionary<string, object>();
                    Criteria.Add("AcademicYear", RptCardReq.AcademicYear);
                    Criteria.Add("Grade", RptCardReq.Grade);
                    Criteria.Add("Campus", RptCardReq.Campus);
                    Dictionary<long, IList<CoScholasticMaster>> CoSholasticMaster = rptSvc.GetCoScholictMasterListWithPagingAndCriteria(0, 99999, string.Empty, "CoScholasticCode", Criteria);
                    ViewBag.CoScholastic = CoSholasticMaster.FirstOrDefault().Value;
                    //ReportCardCBSE rptCard = new ReportCardCBSE();
                    if (!string.IsNullOrEmpty(Subject))
                    {
                        if (Subject == "Language")
                            RptCardReq.Language = Language;
                        else
                            RptCardReq.Language = "";
                        RptCardReq.Subject = Subject;
                        ViewBag.TabFreez = "No";
                    }
                    else
                        ViewBag.TabFreez = "Yes";
                    var rle = Session["userrolesarray"] as IEnumerable<string>;
                    if (rle.Contains("RCAPP"))
                    { ViewBag.AppEdit = "Yes"; }
                    else { ViewBag.AppEdit = "No"; }
                    return View(RptCardReq);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }
        [HttpPost]
        public ActionResult ReportCardCBSE(ReportCardRequest rptReq)
        {
            ReportCardService rptSvc = new ReportCardService();
            if (rptReq.Id > 0)
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null) { return RedirectToAction("LogOff", "Account"); }
                rptReq.ModifiedDate = DateTime.Now;
                rptReq.ModifiedBy = Userobj.UserId;
                rptSvc.CreateOrUpdateReportCardRequest(rptReq);
                if (rptReq.TofWorkingDayT2 != 0)
                    ViewBag.TabSelected = "Common2";
                else
                    ViewBag.TabSelected = "Common1";
            }
            if (rptReq.Subject != null)
                ViewBag.TabFreez = "No";
            else
                ViewBag.TabFreez = "Yes";
            var rle = Session["userrolesarray"] as IEnumerable<string>;
            if (rle.Contains("RCAPP"))
            { ViewBag.AppEdit = "Yes"; }
            else { ViewBag.AppEdit = "No"; }
            return View(rptReq);
        }

        public ActionResult ReportCardCBSEValidation(long PreRegNum, string AcademicYear, long ReqId)
        {
            ReportCardService rptCrdSrvc = new ReportCardService();
            Dictionary<string, object> criteria = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(AcademicYear) && ReqId > 0 && PreRegNum > 0)
            {
                criteria.Add("PreRegNum", PreRegNum);
                criteria.Add("RptRequestId", ReqId);
                criteria.Add("AcademicYear", AcademicYear);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(0, 99999, string.Empty, string.Empty, criteria);
                if (RptCrdCBSEMrkList != null && RptCrdCBSEMrkList.Count > 0 && RptCrdCBSEMrkList.FirstOrDefault().Key > 0 && RptCrdCBSEMrkList.FirstOrDefault().Value != null)
                    return Json("Success", JsonRequestBehavior.AllowGet);
                else
                    return Json("Failure", JsonRequestBehavior.AllowGet);
            }
            else
                return Json(null, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SaveWorkingDay(long RequestId, string Term1or2, long NofDays)
        {
            ReportCardService rptSvc = new ReportCardService();
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (RequestId > 0)
            {
                ReportCardRequest rptReq = rptSvc.GetRepoetCardRequestById(RequestId);
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", rptReq.Campus);
                criteria.Add("Grade", rptReq.Grade);
                criteria.Add("Section", rptReq.Section);
                criteria.Add("AcademicYear", rptReq.AcademicYear);
                if (Term1or2 == "Term1")
                {
                    rptReq.TofWorkingDayT1 = NofDays;

                    Dictionary<long, IList<ReportCardCBSECommon>> RptCrdCBSECommonList = rptSvc.GetRptCardForCBSECommonListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    if (RptCrdCBSECommonList != null && RptCrdCBSECommonList.FirstOrDefault().Value.Count > 0)
                    {
                        foreach (var Saveditem in RptCrdCBSECommonList.FirstOrDefault().Value)
                        {
                            Saveditem.TofWorkingDayT1 = rptReq.TofWorkingDayT1;
                            rptSvc.SaveOrUpdateRptCardForCBSECommon(Saveditem);
                        }
                    }
                }
                else if (Term1or2 == "Term2")
                {
                    rptReq.TofWorkingDayT2 = NofDays;
                    Dictionary<long, IList<ReportCardCBSECommon>> RptCrdCBSECommonList = rptSvc.GetRptCardForCBSECommonListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    if (RptCrdCBSECommonList != null && RptCrdCBSECommonList.FirstOrDefault().Value.Count > 0)
                    {
                        foreach (var Saveditem in RptCrdCBSECommonList.FirstOrDefault().Value)
                        {
                            Saveditem.TofWorkingDayT2 = rptReq.TofWorkingDayT2;
                            rptSvc.SaveOrUpdateRptCardForCBSECommon(Saveditem);
                        }
                    }
                }
                else
                    rptReq.TofWorkingDayT1 = rptReq.TofWorkingDayT2 = 0;
                rptReq.ModifiedDate = DateTime.Now;
                rptReq.ModifiedBy = Userobj.UserId;
                rptSvc.CreateOrUpdateReportCardRequest(rptReq);
                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            else return Json(null, JsonRequestBehavior.AllowGet);
        }

        public ActionResult JqGridFormativeAssessment1(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.FA1ASlip = GetList[0].FA1ASlip == null ? "" : GetList[0].Absent.Contains("FA1A") ? "ABS" : GetList[0].FA1ASlip.ToString();
                        sv.FA1ASlipTotal = GetList[0].FA1ASlipTotal == null ? "" : GetList[0].Absent.Contains("FA1A") ? "ABS" : GetList[0].FA1ASlipTotal.ToString();
                        sv.FA1BTotal = GetList[0].FA1BTotal == null ? "" : GetList[0].Absent.Contains("FA1B") ? "ABS" : GetList[0].FA1BTotal.ToString();
                        sv.FA1CTotal = GetList[0].FA1CTotal == null ? "" : GetList[0].Absent.Contains("FA1C") ? "ABS" : GetList[0].FA1CTotal.ToString();
                        sv.FA1DTotal = GetList[0].FA1DTotal == null ? "" : GetList[0].Absent.Contains("FA1D") ? "ABS" : GetList[0].FA1DTotal.ToString();
                        sv.FA1Total = GetList[0].FA1Total != null ? GetList[0].FA1Total.ToString() : "";
                        sv.FA1 = GetList[0].FA1 != null ? GetList[0].FA1.ToString() : "";
                        sv.FA1Grade = GetList[0].FA1Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.FA1ASlip != "" ? sv.FA1BTotal != "" ? sv.FA1CTotal != "" ? sv.FA1DTotal != "" ? 1 : 0 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;
                    }
                    else
                    {
                        sv.EditRowId = 0; sv.RptId = 0; sv.FA1Grade = string.Empty; sv.TermAbsents = string.Empty; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-I-FA1", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.FA1ASlip,
                        items.FA1ASlipTotal,
                        items.FA1BTotal,
                        items.FA1CTotal,
                        items.FA1DTotal,
                        items.FA1Total,
                        items.FA1,
                        items.FA1Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.FA1ASlip,
                            items.FA1ASlipTotal,
                            items.FA1BTotal,
                            items.FA1CTotal,
                            items.FA1DTotal,
                            items.FA1Total,
                            items.FA1,
                            items.FA1Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridFormativeAssessment2(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.FA2ASlip = GetList[0].FA2ASlip == null ? "" : GetList[0].Absent.Contains("FA2A") ? "ABS" : GetList[0].FA2ASlip.ToString();
                        sv.FA2ASlipTotal = GetList[0].FA2ASlipTotal == null ? "" : GetList[0].Absent.Contains("FA2A") ? "ABS" : GetList[0].FA2ASlipTotal.ToString();
                        sv.FA2BTotal = GetList[0].FA2BTotal == null ? "" : GetList[0].Absent.Contains("FA2B") ? "ABS" : GetList[0].FA2BTotal.ToString();
                        sv.FA2CTotal = GetList[0].FA2CTotal == null ? "" : GetList[0].Absent.Contains("FA2C") ? "ABS" : GetList[0].FA2CTotal.ToString();
                        sv.FA2DTotal = GetList[0].FA2DTotal == null ? "" : GetList[0].Absent.Contains("FA2D") ? "ABS" : GetList[0].FA2DTotal.ToString();
                        sv.FA2Total = GetList[0].FA2Total != null ? GetList[0].FA2Total.ToString() : "";
                        sv.FA2 = GetList[0].FA2 != null ? GetList[0].FA2.ToString() : "";
                        sv.FA2Grade = GetList[0].FA2Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.FA2ASlip != "" ? sv.FA2BTotal != "" ? sv.FA2CTotal != "" ? sv.FA2DTotal != "" ? 1 : 0 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;

                    }
                    else
                    {
                        sv.EditRowId = 0; sv.RptId = 0; sv.FA2Grade = string.Empty; sv.TermAbsents = string.Empty; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;

                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-I-FA2", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.FA2ASlip,
                        items.FA2ASlipTotal,
                        items.FA2BTotal,
                        items.FA2CTotal,
                        items.FA2DTotal,
                        items.FA2Total,
                        items.FA2,
                        items.FA2Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.FA2ASlip,
                            items.FA2ASlipTotal,
                            items.FA2BTotal,
                            items.FA2CTotal,
                            items.FA2DTotal,
                            items.FA2Total,
                            items.FA2,
                            items.FA2Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridFormativeAssessment3(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {

            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.Id = GetList[0].Id;
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.FA3ASlip = GetList[0].FA3ASlip == null ? "" : GetList[0].Absent.Contains("FA3A") ? "ABS" : GetList[0].FA3ASlip.ToString();
                        sv.FA3ASlipTotal = GetList[0].FA3ASlipTotal == null ? "" : GetList[0].Absent.Contains("FA3A") ? "ABS" : GetList[0].FA3ASlipTotal.ToString();
                        sv.FA3BTotal = GetList[0].FA3BTotal == null ? "" : GetList[0].Absent.Contains("FA3B") ? "ABS" : GetList[0].FA3BTotal.ToString();
                        sv.FA3CTotal = GetList[0].FA3CTotal == null ? "" : GetList[0].Absent.Contains("FA3C") ? "ABS" : GetList[0].FA3CTotal.ToString();
                        sv.FA3DTotal = GetList[0].FA3DTotal == null ? "" : GetList[0].Absent.Contains("FA3D") ? "ABS" : GetList[0].FA3DTotal.ToString();
                        sv.FA3Total = GetList[0].FA3Total != null ? GetList[0].FA3Total.ToString() : "";
                        sv.FA3 = GetList[0].FA3 != null ? GetList[0].FA3.ToString() : "";
                        sv.FA3Grade = GetList[0].FA3Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.FA3ASlip != "" ? sv.FA3BTotal != "" ? sv.FA3CTotal != "" ? sv.FA3DTotal != "" ? 1 : 0 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;

                    }
                    else
                    {
                        sv.EditRowId = 0; sv.RptId = 0; sv.FA3Grade = string.Empty; sv.TermAbsents = string.Empty; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;

                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-II-FA3", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.FA3ASlip,
                        items.FA3ASlipTotal,
                        items.FA3BTotal,
                        items.FA3CTotal,
                        items.FA3DTotal,
                        items.FA3Total,
                        items.FA3,
                        items.FA3Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.FA3ASlip,
                            items.FA3ASlipTotal,
                            items.FA3BTotal,
                            items.FA3CTotal,
                            items.FA3DTotal,
                            items.FA3Total,
                            items.FA3,
                            items.FA3Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridFormativeAssessment4(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {

            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.FA4ASlip = GetList[0].FA4ASlip == null ? "" : GetList[0].Absent.Contains("FA4A") ? "ABS" : GetList[0].FA4ASlip.ToString();
                        sv.FA4ASlipTotal = GetList[0].FA4ASlipTotal == null ? "" : GetList[0].Absent.Contains("FA4A") ? "ABS" : GetList[0].FA4ASlipTotal.ToString();
                        sv.FA4BTotal = GetList[0].FA4BTotal == null ? "" : GetList[0].Absent.Contains("FA4B") ? "ABS" : GetList[0].FA4BTotal.ToString();
                        sv.FA4CTotal = GetList[0].FA4CTotal == null ? "" : GetList[0].Absent.Contains("FA4C") ? "ABS" : GetList[0].FA4CTotal.ToString();
                        sv.FA4DTotal = GetList[0].FA4DTotal == null ? "" : GetList[0].Absent.Contains("FA4D") ? "ABS" : GetList[0].FA4DTotal.ToString();
                        sv.FA4Total = GetList[0].FA4Total != null ? GetList[0].FA4Total.ToString() : "";
                        sv.FA4 = GetList[0].FA4 != null ? GetList[0].FA4.ToString() : "";
                        sv.FA4Grade = GetList[0].FA3Grade;
                        sv.FA4Grade = GetList[0].FA4Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.FA4ASlip != "" ? sv.FA4BTotal != "" ? sv.FA4CTotal != "" ? sv.FA4DTotal != "" ? 1 : 0 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;

                    }
                    else
                    {
                        sv.EditRowId = 0; sv.RptId = 0; sv.FA4Grade = string.Empty; sv.TermAbsents = string.Empty; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;

                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-II-FA4", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.FA4ASlip,
                        items.FA4ASlipTotal,
                        items.FA4BTotal,
                        items.FA4CTotal,
                        items.FA4DTotal,
                        items.FA4Total,
                        items.FA4,
                        items.FA4Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.FA4ASlip,
                            items.FA4ASlipTotal,
                            items.FA4BTotal,
                            items.FA4CTotal,
                            items.FA4DTotal,
                            items.FA4Total,
                            items.FA4,
                            items.FA4Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridSummativeAssessment1(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {

            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.SA1 = GetList[0].SA1 != null ? GetList[0].SA1.ToString() : GetList[0].Absent.Contains("SA1") ? "ABS" : "";
                        sv.SA1Total = GetList[0].SA1Total != null ? GetList[0].SA1Total.ToString() : "";
                        sv.TermAbsents = GetList[0].Absent;
                        sv.SA1Grade = GetList[0].SA1Grade;
                        sv.EditRowId = sv.SA1Total != "" ? 1 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;
                    }
                    else
                    {
                        sv.EditRowId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.RptId = 0; sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.TermAbsents = string.Empty; sv.SA1Grade = string.Empty;
                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-I-SA1", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.SA1Total,
                        items.SA1,
                        items.SA1Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.SA1Total,
                            items.SA1,
                            items.SA1Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridSummativeAssessment2(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.SA2 = GetList[0].SA2 != null ? GetList[0].SA2.ToString() : GetList[0].Absent.Contains("SA2") ? "ABS" : "";
                        sv.SA2Total = GetList[0].SA2Total != null ? GetList[0].SA2Total.ToString() : "";
                        sv.SA2Grade = GetList[0].SA2Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.SA2Total != "" ? 1 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;
                    }
                    else
                    {
                        sv.RptId = 0; sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.TermAbsents = string.Empty; sv.Grade = string.Empty;
                        sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-II-SA2", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.SA2Total,
                        items.SA2,
                        items.SA2Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.SA2Total,
                            items.SA2,
                            items.SA2Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridCommonTerm1(long RptRequestId, string campus, string grade, string section, string academicyear, long NofDays, int rows, string sidx, string sord, int? page = 1)
        {
            if ((string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section)) && NofDays <= 0)
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                Dictionary<long, IList<ReportCardCBSECommon>> RptCrdCBSECommonList = rptCrdSrvc.GetRptCardForCBSECommonListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSECommon> alreadyExists = RptCrdCBSECommonList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSECommonList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.TofWorkingDayT1 = GetList[0].TofWorkingDayT1 == 0 ? NofDays : GetList[0].TofWorkingDayT1;
                        sv.TotalAttendenceT1 = GetList[0].TotalAttendenceT1;
                        sv.HeightT1 = GetList[0].HeightT1;
                        sv.WeightT1 = GetList[0].WeightT1;
                        sv.EditRowId = sv.TotalAttendenceT1 != 0 ? sv.HeightT1 != 0 ? sv.WeightT1 != 0 ? 1 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;
                    }
                    else
                    {
                        sv.EditRowId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.RptId = 0; sv.TofWorkingDayT1 = NofDays; sv.TotalAttendenceT1 = 0; sv.HeightT1 = 0; sv.WeightT1 = 0; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                    }
                }
                long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                var jsonData = new
                {
                    total = totalPages,
                    page = page,
                    records = totalRecords,
                    rows = (
                    from items in rptStdntDtls.FirstOrDefault().Value
                    select new
                    {
                        i = items.Id,
                        cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.TofWorkingDayT1==0?"":items.TofWorkingDayT1.ToString(),
                            items.TotalAttendenceT1==0?"":items.TotalAttendenceT1.ToString(),
                            items.HeightT1 ==0?"":items.HeightT1.ToString(),
                            items.WeightT1 ==0?"":items.WeightT1.ToString(),
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                            "<span class='fa fa-file-pdf-o red' id='ImgHistory' onclick=\"GeneratePDF( '" + items.PreRegNum +"','"+items.AcademicYear+"','"+items.RptRequestId+"','Term1');\" ></span>",
                       }
                    })
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult JqGridCommonTerm2(long RptRequestId, string campus, string grade, string section, string academicyear, long NofDays, int rows, string sidx, string sord, int? page = 1)
        {
            if ((string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section)) || NofDays <= 0)
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                Dictionary<long, IList<ReportCardCBSECommon>> RptCrdCBSECommonList = rptCrdSrvc.GetRptCardForCBSECommonListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSECommon> alreadyExists = RptCrdCBSECommonList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains(Convert.ToInt64(sv.PreRegNum)))
                    {
                        var GetList = (from u in RptCrdCBSECommonList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.TofWorkingDayT2 = GetList[0].TofWorkingDayT2 == 0 ? NofDays : GetList[0].TofWorkingDayT2;
                        sv.TotalAttendenceT2 = GetList[0].TotalAttendenceT2;
                        sv.HeightT2 = GetList[0].HeightT2;
                        sv.WeightT2 = GetList[0].WeightT2;
                        sv.EditRowId = sv.TotalAttendenceT2 != 0 ? sv.HeightT2 != 0 ? sv.WeightT2 != 0 ? 1 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;
                    }
                    else
                    {
                        sv.EditRowId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.RptId = 0; sv.TofWorkingDayT2 = NofDays; sv.TotalAttendenceT2 = 0; sv.HeightT2 = 0; sv.WeightT2 = 0; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                    }
                }
                long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                var jsonData = new
                {
                    total = totalPages,
                    page = page,
                    records = totalRecords,
                    rows = (
                    from items in rptStdntDtls.FirstOrDefault().Value
                    select new
                    {
                        i = items.Id,
                        cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.TofWorkingDayT2==0?"":items.TofWorkingDayT2.ToString(),
                            items.TotalAttendenceT2==0?"":items.TotalAttendenceT2.ToString(),
                            items.HeightT2 ==0?"":items.HeightT2.ToString(),
                            items.WeightT2 ==0?"":items.WeightT2.ToString(),
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                            "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GeneratePDF( '" + items.PreRegNum +"','"+items.AcademicYear+"','"+items.RptRequestId+"','Term2');\" />",
                       }
                    })
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult SaveReportCardCBSEFA1(ReportCardCBSEFA1 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");

            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSE rptCard = rptsvc.GetReportCardCBSEById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA1ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA1BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA1CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA1DTotal))
                    {
                        rptCard.FA1ASlip = rptCrdObj.FA1ASlip == "ABS" || rptCrdObj.FA1ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1ASlip);
                        rptCard.FA1BTotal = rptCrdObj.FA1BTotal == "ABS" || rptCrdObj.FA1BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1BTotal);
                        rptCard.FA1CTotal = rptCrdObj.FA1CTotal == "ABS" || rptCrdObj.FA1CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1CTotal);
                        rptCard.FA1DTotal = rptCrdObj.FA1DTotal == "ABS" || rptCrdObj.FA1DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1DTotal);
                        rptCard.Absent = rptCrdObj.FA1ASlip == "ABS" || rptCrdObj.FA1ASlip == "abs" ? rptCard.Absent + ",FA1A" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA1BTotal == "ABS" || rptCrdObj.FA1BTotal == "abs" ? rptCard.Absent + ",FA1B" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA1CTotal == "ABS" || rptCrdObj.FA1CTotal == "abs" ? rptCard.Absent + ",FA1C" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA1DTotal == "ABS" || rptCrdObj.FA1DTotal == "abs" ? rptCard.Absent + ",FA1D" : rptCard.Absent;
                        rptCard.FA1ASlipTotal = rptCard.FA1ASlip / 20 * 5;
                        rptCard.FA1Total = rptCard.FA1ASlipTotal + rptCard.FA1BTotal + rptCard.FA1CTotal + rptCard.FA1DTotal;
                        rptCard.FA1 = rptCard.FA1Total / 20 * 10;
                        rptCard.FA1Grade = GradeCalulation(Convert.ToDecimal(rptCard.FA1), "FA1");
                        rptCard.Term1Total = (2 * rptCard.FA1) + (2 * (rptCard.FA2 == null ? 0 : rptCard.FA2)) + (2 * (rptCard.SA1 == null ? 0 : rptCard.SA1));
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA1ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA1BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA1CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA1DTotal))
                    {
                        ReportCardCBSE newRptCard = new ReportCardCBSE();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.FA1ASlip = rptCrdObj.FA1ASlip == "ABS" || rptCrdObj.FA1ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1ASlip);
                        newRptCard.FA1BTotal = rptCrdObj.FA1BTotal == "ABS" || rptCrdObj.FA1BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1BTotal);
                        newRptCard.FA1CTotal = rptCrdObj.FA1CTotal == "ABS" || rptCrdObj.FA1CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1CTotal);
                        newRptCard.FA1DTotal = rptCrdObj.FA1DTotal == "ABS" || rptCrdObj.FA1DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA1DTotal);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.FA1ASlip == "ABS" || rptCrdObj.FA1ASlip == "abs" ? newRptCard.Absent + ",FA1A" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA1BTotal == "ABS" || rptCrdObj.FA1BTotal == "abs" ? newRptCard.Absent + ",FA1B" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA1CTotal == "ABS" || rptCrdObj.FA1CTotal == "abs" ? newRptCard.Absent + ",FA1C" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA1DTotal == "ABS" || rptCrdObj.FA1DTotal == "abs" ? newRptCard.Absent + ",FA1D" : newRptCard.Absent;
                        newRptCard.FA1ASlipTotal = newRptCard.FA1ASlip / 20 * 5;
                        newRptCard.FA1Total = newRptCard.FA1ASlipTotal + newRptCard.FA1BTotal + newRptCard.FA1CTotal + newRptCard.FA1DTotal;
                        newRptCard.FA1 = newRptCard.FA1Total / 20 * 10;
                        newRptCard.FA1Grade = GradeCalulation(Convert.ToDecimal(newRptCard.FA1), "FA1");
                        newRptCard.Term1Total = 2 * newRptCard.FA1;
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        //rptCrdObj.CreatedDate = DateTime.Now;
                        rptsvc.SaveOrUpdateRptCardForCBSE(newRptCard);
                    }
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSEFA2(ReportCardCBSEFA2 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSE rptCard = rptsvc.GetReportCardCBSEById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA2ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA2BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA2CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA2DTotal))
                    {
                        rptCard.FA2ASlip = rptCrdObj.FA2ASlip == "ABS" || rptCrdObj.FA2ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2ASlip);
                        rptCard.FA2BTotal = rptCrdObj.FA2BTotal == "ABS" || rptCrdObj.FA2BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2BTotal);
                        rptCard.FA2CTotal = rptCrdObj.FA2CTotal == "ABS" || rptCrdObj.FA2CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2CTotal);
                        rptCard.FA2DTotal = rptCrdObj.FA2DTotal == "ABS" || rptCrdObj.FA2DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2DTotal);

                        rptCard.Absent = rptCrdObj.FA2ASlip == "ABS" || rptCrdObj.FA2ASlip == "abs" ? rptCard.Absent + ",FA2A" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA2BTotal == "ABS" || rptCrdObj.FA2BTotal == "abs" ? rptCard.Absent + ",FA2B" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA2CTotal == "ABS" || rptCrdObj.FA2CTotal == "abs" ? rptCard.Absent + ",FA2C" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA2DTotal == "ABS" || rptCrdObj.FA2DTotal == "abs" ? rptCard.Absent + ",FA2D" : rptCard.Absent;

                        rptCard.FA2ASlipTotal = rptCard.FA2ASlip / 20 * 5;
                        rptCard.FA2Total = rptCard.FA2ASlipTotal + rptCard.FA2BTotal + rptCard.FA2CTotal + rptCard.FA2DTotal;
                        rptCard.FA2 = rptCard.FA2Total / 20 * 10;
                        rptCard.FA2Grade = GradeCalulation(Convert.ToDecimal(rptCard.FA2), "FA2");
                        rptCard.Term1Total = (2 * rptCard.FA2) + (2 * (rptCard.SA1 == null ? 0 : rptCard.SA1)) + (2 * (rptCard.FA1 == null ? 0 : rptCard.FA1));
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA2ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA2BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA2CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA2DTotal))
                    {
                        ReportCardCBSE newRptCard = new ReportCardCBSE();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.FA2ASlip = rptCrdObj.FA2ASlip == "ABS" || rptCrdObj.FA2ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2ASlip);
                        newRptCard.FA2BTotal = rptCrdObj.FA2BTotal == "ABS" || rptCrdObj.FA2BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2BTotal);
                        newRptCard.FA2CTotal = rptCrdObj.FA2CTotal == "ABS" || rptCrdObj.FA2CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2CTotal);
                        newRptCard.FA2DTotal = rptCrdObj.FA2DTotal == "ABS" || rptCrdObj.FA2DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA2DTotal);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.FA2ASlip == "ABS" || rptCrdObj.FA2ASlip == "abs" ? newRptCard.Absent + ",FA2A" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA2BTotal == "ABS" || rptCrdObj.FA2BTotal == "abs" ? newRptCard.Absent + ",FA2B" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA2CTotal == "ABS" || rptCrdObj.FA2CTotal == "abs" ? newRptCard.Absent + ",FA2C" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA2DTotal == "ABS" || rptCrdObj.FA2DTotal == "abs" ? newRptCard.Absent + ",FA2D" : newRptCard.Absent;
                        newRptCard.FA2ASlipTotal = newRptCard.FA2ASlip / 20 * 5;
                        newRptCard.FA2Total = newRptCard.FA2ASlipTotal + newRptCard.FA2BTotal + newRptCard.FA2CTotal + newRptCard.FA2DTotal;
                        newRptCard.FA2 = newRptCard.FA2Total / 20 * 10;
                        newRptCard.FA2Grade = GradeCalulation(Convert.ToDecimal(newRptCard.FA2), "FA2");
                        newRptCard.Term1Total = 2 * newRptCard.FA2;
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(newRptCard);
                    }
                }

            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSEFA3(ReportCardCBSEFA3 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSE rptCard = rptsvc.GetReportCardCBSEById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA3ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA3BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA3CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA3DTotal))
                    {
                        rptCard.FA3ASlip = rptCrdObj.FA3ASlip == "ABS" || rptCrdObj.FA3ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3ASlip);
                        rptCard.FA3BTotal = rptCrdObj.FA3BTotal == "ABS" || rptCrdObj.FA3BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3BTotal);
                        rptCard.FA3CTotal = rptCrdObj.FA3CTotal == "ABS" || rptCrdObj.FA3CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3CTotal);
                        rptCard.FA3DTotal = rptCrdObj.FA3DTotal == "ABS" || rptCrdObj.FA3DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3DTotal);
                        rptCard.Absent = rptCrdObj.FA3ASlip == "ABS" || rptCrdObj.FA3ASlip == "abs" ? rptCard.Absent + ",FA3A" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA3BTotal == "ABS" || rptCrdObj.FA3BTotal == "abs" ? rptCard.Absent + ",FA3B" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA3CTotal == "ABS" || rptCrdObj.FA3CTotal == "abs" ? rptCard.Absent + ",FA3C" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA3DTotal == "ABS" || rptCrdObj.FA3DTotal == "abs" ? rptCard.Absent + ",FA3D" : rptCard.Absent;
                        rptCard.FA3ASlipTotal = rptCard.FA3ASlip / 20 * 5;
                        rptCard.FA3Total = rptCard.FA3ASlipTotal + rptCard.FA3BTotal + rptCard.FA3CTotal + rptCard.FA3DTotal;
                        rptCard.FA3 = rptCard.FA3Total / 20 * 10;
                        rptCard.FA3Grade = GradeCalulation(Convert.ToDecimal(rptCard.FA3), "FA3");
                        rptCard.Term2Total = (2 * rptCard.FA3) + (2 * (rptCard.FA4 == null ? 0 : rptCard.FA4)) + (2 * (rptCard.SA2 == null ? 0 : rptCard.SA2));
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA3ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA3BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA3CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA3DTotal))
                    {
                        ReportCardCBSE newRptCard = new ReportCardCBSE();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.FA3ASlip = rptCrdObj.FA3ASlip == "ABS" || rptCrdObj.FA3ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3ASlip);
                        newRptCard.FA3BTotal = rptCrdObj.FA3BTotal == "ABS" || rptCrdObj.FA3BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3BTotal);
                        newRptCard.FA3CTotal = rptCrdObj.FA3CTotal == "ABS" || rptCrdObj.FA3CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3CTotal);
                        newRptCard.FA3DTotal = rptCrdObj.FA3DTotal == "ABS" || rptCrdObj.FA3DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA3DTotal);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.FA3ASlip == "ABS" || rptCrdObj.FA3ASlip == "abs" ? newRptCard.Absent + ",FA3A" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA3BTotal == "ABS" || rptCrdObj.FA3BTotal == "abs" ? newRptCard.Absent + ",FA3B" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA3CTotal == "ABS" || rptCrdObj.FA3CTotal == "abs" ? newRptCard.Absent + ",FA3C" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA3DTotal == "ABS" || rptCrdObj.FA3DTotal == "abs" ? newRptCard.Absent + ",FA3D" : newRptCard.Absent;
                        newRptCard.FA3ASlipTotal = newRptCard.FA3ASlip / 20 * 5;
                        newRptCard.FA3Total = newRptCard.FA3ASlipTotal + newRptCard.FA3BTotal + newRptCard.FA3CTotal + newRptCard.FA3DTotal;
                        newRptCard.FA3 = newRptCard.FA3Total / 20 * 10;
                        newRptCard.FA3Grade = GradeCalulation(Convert.ToDecimal(newRptCard.FA3), "FA3");
                        newRptCard.Term2Total = 2 * newRptCard.FA3;
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(newRptCard);
                    }
                }

            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSEFA4(ReportCardCBSEFA4 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSE rptCard = rptsvc.GetReportCardCBSEById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA4ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA4BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA4CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA4DTotal))
                    {
                        rptCard.FA4ASlip = rptCrdObj.FA4ASlip == "ABS" || rptCrdObj.FA4ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4ASlip);
                        rptCard.FA4BTotal = rptCrdObj.FA4BTotal == "ABS" || rptCrdObj.FA4BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4BTotal);
                        rptCard.FA4CTotal = rptCrdObj.FA4CTotal == "ABS" || rptCrdObj.FA4CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4CTotal);
                        rptCard.FA4DTotal = rptCrdObj.FA4DTotal == "ABS" || rptCrdObj.FA4DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4DTotal);
                        rptCard.Absent = rptCrdObj.FA4ASlip == "ABS" || rptCrdObj.FA4ASlip == "abs" ? rptCard.Absent + ",FA4A" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA4BTotal == "ABS" || rptCrdObj.FA4BTotal == "abs" ? rptCard.Absent + ",FA4B" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA4CTotal == "ABS" || rptCrdObj.FA4CTotal == "abs" ? rptCard.Absent + ",FA4C" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.FA4DTotal == "ABS" || rptCrdObj.FA4DTotal == "abs" ? rptCard.Absent + ",FA4D" : rptCard.Absent;
                        rptCard.FA4ASlipTotal = rptCard.FA4ASlip / 20 * 5;
                        rptCard.FA4Total = rptCard.FA4ASlipTotal + rptCard.FA4BTotal + rptCard.FA4CTotal + rptCard.FA4DTotal;
                        rptCard.FA4 = rptCard.FA4Total / 20 * 10;
                        rptCard.FA4Grade = GradeCalulation(Convert.ToDecimal(rptCard.FA4), "FA4");
                        rptCard.Term2Total = (2 * rptCard.FA4) + (2 * (rptCard.SA2 == null ? 0 : rptCard.SA2)) + (2 * (rptCard.FA3 == null ? 0 : rptCard.FA3));
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.FA4ASlip) && !string.IsNullOrEmpty(rptCrdObj.FA4BTotal) && !string.IsNullOrEmpty(rptCrdObj.FA4CTotal) && !string.IsNullOrEmpty(rptCrdObj.FA4DTotal))
                    {
                        ReportCardCBSE newRptCard = new ReportCardCBSE();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.FA4ASlip = rptCrdObj.FA4ASlip == "ABS" || rptCrdObj.FA4ASlip == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4ASlip);
                        newRptCard.FA4BTotal = rptCrdObj.FA4BTotal == "ABS" || rptCrdObj.FA4BTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4BTotal);
                        newRptCard.FA4CTotal = rptCrdObj.FA4CTotal == "ABS" || rptCrdObj.FA4CTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4CTotal);
                        newRptCard.FA4DTotal = rptCrdObj.FA4DTotal == "ABS" || rptCrdObj.FA4DTotal == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.FA4DTotal);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.FA4ASlip == "ABS" || rptCrdObj.FA4ASlip == "abs" ? newRptCard.Absent + ",FA4A" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA4BTotal == "ABS" || rptCrdObj.FA4BTotal == "abs" ? newRptCard.Absent + ",FA4B" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA4CTotal == "ABS" || rptCrdObj.FA4CTotal == "abs" ? newRptCard.Absent + ",FA4C" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.FA4DTotal == "ABS" || rptCrdObj.FA4DTotal == "abs" ? newRptCard.Absent + ",FA4D" : newRptCard.Absent;
                        newRptCard.FA4ASlipTotal = newRptCard.FA4ASlip / 20 * 5;
                        newRptCard.FA4Total = newRptCard.FA4ASlipTotal + newRptCard.FA4BTotal + newRptCard.FA4CTotal + newRptCard.FA4DTotal;
                        newRptCard.FA4 = newRptCard.FA4Total / 20 * 10;
                        newRptCard.FA4Grade = GradeCalulation(Convert.ToDecimal(newRptCard.FA4), "FA4");
                        newRptCard.Term2Total = 2 * newRptCard.FA4;
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(newRptCard);
                    }
                }

            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSESA1(ReportCardCBSESA1 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSE rptCard = rptsvc.GetReportCardCBSEById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.SA1Total))
                    {
                        rptCard.SA1Total = rptCrdObj.SA1Total == "ABS" || rptCrdObj.SA1Total == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SA1Total);
                        rptCard.Absent = rptCrdObj.SA1Total == "ABS" || rptCrdObj.SA1Total == "abs" ? rptCard.Absent + ",SA1" : rptCard.Absent;
                        rptCard.SA1 = rptCard.SA1Total / 90 * 30;
                        decimal tot100 = Convert.ToDecimal(rptCard.SA1Total / 90 * 100);
                        rptCard.SA1Grade = GradeCalulation(tot100, "OverALL");
                        rptCard.Term1Total = (2 * rptCard.SA1) + (2 * (rptCard.FA1 == null ? 0 : rptCard.FA1)) + (2 * (rptCard.FA2 == null ? 0 : rptCard.FA2));
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.SA1Total))
                    {
                        ReportCardCBSE newRptCard = new ReportCardCBSE();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.SA1Total = rptCrdObj.SA1Total == "ABS" || rptCrdObj.SA1Total == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SA1Total);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.SA1Total == "ABS" || rptCrdObj.SA1Total == "abs" ? newRptCard.Absent + ",SA1" : newRptCard.Absent;
                        newRptCard.SA1 = newRptCard.SA1Total / 90 * 30;
                        decimal tot100 = Convert.ToDecimal(newRptCard.SA1Total / 90 * 100);
                        newRptCard.SA1Grade = GradeCalulation(tot100, "OverALL");
                        newRptCard.Term1Total = 2 * newRptCard.SA1;
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(newRptCard);
                    }
                }

            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSESA2(ReportCardCBSESA2 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSE rptCard = rptsvc.GetReportCardCBSEById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.SA2Total))
                    {
                        rptCard.SA2Total = rptCrdObj.SA2Total == "ABS" || rptCrdObj.SA2Total == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SA2Total);
                        rptCard.Absent = rptCrdObj.SA2Total == "ABS" || rptCrdObj.SA2Total == "abs" ? rptCard.Absent + ",SA2" : rptCard.Absent;
                        rptCard.SA2 = rptCard.SA2Total / 90 * 30;
                        decimal tot100 = Convert.ToDecimal(rptCard.SA2Total / 90 * 100);
                        rptCard.SA2Grade = GradeCalulation(tot100, "OverALL");
                        rptCard.Term2Total = (2 * rptCard.SA2) + (2 * (rptCard.FA3 == null ? 0 : rptCard.FA3)) + (2 * (rptCard.FA4 == null ? 0 : rptCard.FA4));
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.SA2Total))
                    {
                        ReportCardCBSE newRptCard = new ReportCardCBSE();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.SA2Total = rptCrdObj.SA2Total == "ABS" || rptCrdObj.SA2Total == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SA2Total);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.SA2Total == "ABS" || rptCrdObj.SA2Total == "abs" ? newRptCard.Absent + ",SA2" : newRptCard.Absent;
                        newRptCard.SA2 = newRptCard.SA2Total / 90 * 30;
                        decimal tot100 = Convert.ToDecimal(newRptCard.SA2Total / 90 * 100);
                        newRptCard.SA2Grade = GradeCalulation(tot100, "OverALL");
                        newRptCard.Term2Total = 2 * newRptCard.SA2;
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSE(newRptCard);
                    }
                }

            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSECommonTerm1(ReportCardCBSECommon rptCrdCommonObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdCommonObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECommon rptCardCommon = rptsvc.GetReportCardCBSECommonById(rptCrdCommonObj.RptId);
                if (rptCardCommon != null)
                {
                    if (rptCrdCommonObj.TofWorkingDayT1 != 0 && rptCrdCommonObj.TotalAttendenceT1 != 0 && rptCrdCommonObj.HeightT1 != 0 && rptCrdCommonObj.WeightT1 != 0)
                    {
                        rptCardCommon.TofWorkingDayT1 = rptCrdCommonObj.TofWorkingDayT1;
                        rptCardCommon.TotalAttendenceT1 = rptCrdCommonObj.TotalAttendenceT1;
                        rptCardCommon.HeightT1 = rptCrdCommonObj.HeightT1;
                        rptCardCommon.WeightT1 = rptCrdCommonObj.WeightT1;
                        rptCardCommon.ModifiedDate = DateTime.Now;
                        rptCardCommon.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSECommon(rptCardCommon);
                    }
                }
                else
                {
                    if (rptCrdCommonObj.TofWorkingDayT1 != 0 && rptCrdCommonObj.TotalAttendenceT1 != 0 && rptCrdCommonObj.HeightT1 != 0 && rptCrdCommonObj.WeightT1 != 0)
                    {
                        ReportCardCBSECommon newRptCardCommon = new ReportCardCBSECommon();
                        newRptCardCommon.RptRequestId = rptCrdCommonObj.RptRequestId;
                        newRptCardCommon.PreRegNum = rptCrdCommonObj.PreRegNum;
                        newRptCardCommon.Name = rptCrdCommonObj.Name;
                        newRptCardCommon.Campus = rptCrdCommonObj.Campus;
                        newRptCardCommon.Grade = rptCrdCommonObj.Grade;
                        newRptCardCommon.Section = rptCrdCommonObj.Section;
                        newRptCardCommon.AcademicYear = rptCrdCommonObj.AcademicYear;
                        newRptCardCommon.TofWorkingDayT1 = rptCrdCommonObj.TofWorkingDayT1;
                        newRptCardCommon.TotalAttendenceT1 = rptCrdCommonObj.TotalAttendenceT1;
                        newRptCardCommon.HeightT1 = rptCrdCommonObj.HeightT1;
                        newRptCardCommon.WeightT1 = rptCrdCommonObj.WeightT1;
                        newRptCardCommon.CreatedDate = DateTime.Now;
                        newRptCardCommon.CreatedBy = Userobj.UserId;
                        newRptCardCommon.ModifiedDate = DateTime.Now;
                        newRptCardCommon.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSECommon(newRptCardCommon);
                    }
                }

            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSECommonTerm2(ReportCardCBSECommon rptCrdCommonObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdCommonObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECommon rptCardCommon = rptsvc.GetReportCardCBSECommonById(rptCrdCommonObj.RptId);
                if (rptCardCommon != null)
                {
                    if (rptCrdCommonObj.TofWorkingDayT2 != 0 && rptCrdCommonObj.TotalAttendenceT2 != 0 && rptCrdCommonObj.HeightT2 != 0 && rptCrdCommonObj.WeightT2 != 0)
                    {
                        rptCardCommon.TofWorkingDayT2 = rptCrdCommonObj.TofWorkingDayT2;
                        rptCardCommon.TotalAttendenceT2 = rptCrdCommonObj.TotalAttendenceT2;
                        rptCardCommon.HeightT2 = rptCrdCommonObj.HeightT2;
                        rptCardCommon.WeightT2 = rptCrdCommonObj.WeightT2;
                        rptCardCommon.ModifiedDate = DateTime.Now;
                        rptCardCommon.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSECommon(rptCardCommon);
                    }
                }
                else
                {
                    if (rptCrdCommonObj.TofWorkingDayT2 != 0 && rptCrdCommonObj.TotalAttendenceT2 != 0 && rptCrdCommonObj.HeightT2 != 0 && rptCrdCommonObj.WeightT2 != 0)
                    {
                        ReportCardCBSECommon newRptCardCommon = new ReportCardCBSECommon();
                        newRptCardCommon.RptRequestId = rptCrdCommonObj.RptRequestId;
                        newRptCardCommon.PreRegNum = rptCrdCommonObj.PreRegNum;
                        newRptCardCommon.Name = rptCrdCommonObj.Name;
                        newRptCardCommon.Campus = rptCrdCommonObj.Campus;
                        newRptCardCommon.Grade = rptCrdCommonObj.Grade;
                        newRptCardCommon.Section = rptCrdCommonObj.Section;
                        newRptCardCommon.AcademicYear = rptCrdCommonObj.AcademicYear;
                        newRptCardCommon.TofWorkingDayT2 = rptCrdCommonObj.TofWorkingDayT2;
                        newRptCardCommon.TotalAttendenceT2 = rptCrdCommonObj.TotalAttendenceT2;
                        newRptCardCommon.HeightT2 = rptCrdCommonObj.HeightT2;
                        newRptCardCommon.WeightT2 = rptCrdCommonObj.WeightT2;
                        newRptCardCommon.CreatedDate = DateTime.Now;
                        newRptCardCommon.CreatedBy = Userobj.UserId;
                        newRptCardCommon.ModifiedDate = DateTime.Now;
                        newRptCardCommon.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSECommon(newRptCardCommon);
                    }
                }

            }
            else { }
            return null;
        }

        private string GradeCalulation(decimal TotalMrks, string state)
        {
            string RptGrade = "";
            if (state == "CoScholastic")
            {
                if (TotalMrks > Convert.ToDecimal(0.0) && TotalMrks <= Convert.ToDecimal(1.0))
                {
                    RptGrade = "E";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(1.0) && TotalMrks <= Convert.ToDecimal(2.0))
                {
                    RptGrade = "D";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(2.0) && TotalMrks <= Convert.ToDecimal(3.0))
                {
                    RptGrade = "C";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(3.0) && TotalMrks <= Convert.ToDecimal(4.0))
                {
                    RptGrade = "B";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(4.0) && TotalMrks <= Convert.ToDecimal(5.0))
                {
                    RptGrade = "A";
                    return RptGrade;
                }
                else { return RptGrade; }
            }
            else if (state != "OverALL")
            {
                if (TotalMrks > Convert.ToDecimal(0.0) && TotalMrks <= Convert.ToDecimal(2.0))
                {
                    RptGrade = "E2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(2.0) && TotalMrks <= Convert.ToDecimal(3.0))
                {
                    RptGrade = "E1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(3.0) && TotalMrks <= Convert.ToDecimal(4.0))
                {
                    RptGrade = "D";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(4.0) && TotalMrks <= Convert.ToDecimal(5.0))
                {
                    RptGrade = "C2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(5.0) && TotalMrks <= Convert.ToDecimal(6.0))
                {
                    RptGrade = "C1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(6.0) && TotalMrks <= Convert.ToDecimal(7.0))
                {
                    RptGrade = "B2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(7.0) && TotalMrks <= Convert.ToDecimal(8.0))
                {
                    RptGrade = "B1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(8.0) && TotalMrks <= Convert.ToDecimal(9.0))
                {
                    RptGrade = "A2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(9.0) && TotalMrks <= Convert.ToDecimal(10.0))
                {
                    RptGrade = "A1";
                    return RptGrade;
                }
                else { return RptGrade; }
            }
            else
            {
                if (TotalMrks > Convert.ToDecimal(0.0) && TotalMrks <= Convert.ToDecimal(20.0))
                {
                    RptGrade = "E2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(20.0) && TotalMrks <= Convert.ToDecimal(30.0))
                {
                    RptGrade = "E1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(30.0) && TotalMrks <= Convert.ToDecimal(40.0))
                {
                    RptGrade = "D";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(40.0) && TotalMrks <= Convert.ToDecimal(50.0))
                {
                    RptGrade = "C2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(50.0) && TotalMrks <= Convert.ToDecimal(60.0))
                {
                    RptGrade = "C1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(60.0) && TotalMrks <= Convert.ToDecimal(70.0))
                {
                    RptGrade = "B2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(70.0) && TotalMrks <= Convert.ToDecimal(80.0))
                {
                    RptGrade = "B1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(80.0) && TotalMrks <= Convert.ToDecimal(90.0))
                {
                    RptGrade = "A2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(90.0) && TotalMrks <= Convert.ToDecimal(100.0))
                {
                    RptGrade = "A1";
                    return RptGrade;
                }
                else { return RptGrade; }
            }
        }

        public ActionResult GenerateCBSERptCardPdf(long PreRegNum, string Terms)
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    ReportCardCBSEPrintView RptCardList = CreateReportCardList(PreRegNum, Terms);
                    RptCardList.IsTerm = Terms;
                    TipsLogo(RptCardList, "TipsLogo.jpg", "logonace.jpg");
                    TipsName(RptCardList, "TipsName.jpg");
                    TipsAddress(RptCardList, RptCardList.Campus);
                    return this.ViewPdf("ReportCard report", "PrintCBSEReportCard", RptCardList, "landscape", RptCardList.FileName);
                    //return this.ViewPdf("ReportCard report", "PrintCBSEReportCard", RptCardList, "landscape");
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw ex;
            }
        }
        private void TipsLogo(ReportCardCBSEPrintView Rptcrd, string TipsLogo, string NaceLogo)
        {
            //string Scheme= 
            //string url = string.Format("{0}://{1}{2}", Request.Url.Scheme, Request.Url.Authority, Url.Content("~/"));
            //Rptcrd.TipsLogo = url + "Images/" + TipsLogo;
            //string url1 = string.Format("{0}://{1}{2}", Request.Url.Scheme, Request.Url.Authority, Url.Content("~/"));
            //Rptcrd.TipsNaceLogo = url1 + "Images/" + NaceLogo;
            Rptcrd.TipsLogo = ConfigurationManager.AppSettings["AddHeader"] + TipsLogo;
            Rptcrd.TipsNaceLogo = ConfigurationManager.AppSettings["AddHeader"] + NaceLogo;
        }
        private void TipsName(ReportCardCBSEPrintView Rptcrd, string imageName)
        {
            string url = string.Format("{0}://{1}{2}", Request.Url.Scheme, Request.Url.Authority, Url.Content("~"));
            Rptcrd.TipsName = "THE INDIAN PUBLIC SCHOOL ( C.B.S.E. Affiliation no. 1930641 )";
        }
        private void TipsAddress(ReportCardCBSEPrintView Rptcrd, string Campus)
        {
            if (Campus == "KARUR" || Campus == "Karur")
            {
                Rptcrd.TipsAddress = "379/1& 379/2 Pazhamapuram,Poolampalayam (PO),Punnam village,Karur-639136.";
            }
            else if (Campus == "TIRUPUR" || Campus == "Tirupur")
            {
                Rptcrd.TipsAddress = "No.10/720,Arulpuram (Post),Tirupur-641605 .";
            }
            else if (Campus == "IB MAIN" || Campus == "IB Main")
            { Rptcrd.TipsAddress = ""; }
            else Rptcrd.TipsAddress = "";
        }

        public ActionResult JqGridOverAllAssessment(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                    Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSE> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.Id = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.Subject = GetList[0].Subject;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Section = GetList[0].Section;
                            sv.FA1Grade = GetList[0].FA1Grade;
                            sv.FA2Grade = GetList[0].FA2Grade;
                            sv.SA1Grade = GetList[0].SA1Grade;
                            sv.Term1Total = GetList[0].Term1Total;
                            sv.Term1Grade = GradeCalulation(Convert.ToDecimal(GetList[0].Term1Total), "OverALL");
                            sv.FA3Grade = GetList[0].FA3Grade;
                            sv.FA4Grade = GetList[0].FA4Grade;
                            sv.SA2Grade = GetList[0].SA2Grade;
                            sv.Term2Total = GetList[0].Term2Total;
                            sv.Term2Grade = GradeCalulation(Convert.ToDecimal(GetList[0].Term2Total), "OverALL");
                            sv.TermAbsents = GetList[0].Absent;
                        }
                        else
                        {
                            sv.TermAbsents = string.Empty;
                            sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.FA1Grade,
                            items.FA2Grade,
                            items.SA1Grade,
                            items.Term1Total!=null?items.Term1Total.ToString():items.TermAbsents.Contains("FA1")&&items.TermAbsents.Contains("FA2")&&items.TermAbsents.Contains("SA1")?"ABS":"",
                            items.Term1Grade,
                            items.FA3Grade,
                            items.FA4Grade,
                            items.SA2Grade,
                            items.Term2Total!=null?items.Term2Total.ToString():items.TermAbsents.Contains("FA3")&&items.TermAbsents.Contains("FA4")&&items.TermAbsents.Contains("SA2")?"ABS":"",
                            items.Term2Grade,
                            "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GeneratePDF( '" + items.PreRegNum +"','"+items.AcademicYear+"','"+items.RptRequestId+"','OverAll');\" />",
                            
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ReportCardCBSEPrintView CreateReportCardList(long PreRegNum, string Terms)
        {
            ReportCardCBSEPrintView RptCardList = new ReportCardCBSEPrintView();
            AdmissionManagementService AMS = new AdmissionManagementService();
            MastersService MstSrv = new MastersService();
            ReportCardService rptCrdSrvc = new ReportCardService();
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            StudentTemplate st = AMS.GetStudentDetailsByPreRegNo(PreRegNum);
            RptCardList.Name = st.Name != null ? st.Name : "";
            RptCardList.NewId = st.NewId != null ? st.NewId : "";
            RptCardList.Grade = st.Grade != null ? st.Grade : "";
            RptCardList.Section = st.Section;
            RptCardList.AcademicYear = st.AcademicYear;
            RptCardList.Campus = st.Campus;
            RptCardList.DOB = st.DOB;
            RptCardList.FatherName = "";
            RptCardList.MotherName = "";
            RptCardList.MobileNumber = "";
            criteria.Add("PreRegNum", st.PreRegNum);
            Dictionary<long, IList<FamilyDetails>> FatherFamilyDetailsList = AMS.GetFamilyDetailsListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            if (FatherFamilyDetailsList != null && FatherFamilyDetailsList.Count > 0 && FatherFamilyDetailsList.FirstOrDefault().Key > 0)
            {
                foreach (var item in FatherFamilyDetailsList.FirstOrDefault().Value)
                {
                    RptCardList.FatherName = item.FamilyDetailType == "Father" ? item.Name : RptCardList.FatherName;
                    RptCardList.MobileNumber = item.FamilyDetailType == "Father" ? item.Mobile : RptCardList.MobileNumber;
                    RptCardList.MotherName = item.FamilyDetailType == "Mother" ? item.Name : RptCardList.MotherName;
                }
            }
            RptCardList.Address = "";
            if (st.AddressDetailsList != null && st.AddressDetailsList.Count > 0)
            {
                foreach (var item in st.AddressDetailsList)
                {
                    RptCardList.Address = item.AddressType == "Primary Address" ? item.Add1 + item.Add2 + item.Add3 + "," + item.City + "-" + item.Pin : RptCardList.Address + ".";
                }
            }
            criteria.Clear();
            criteria.Add("Campus", RptCardList.Campus);
            criteria.Add("Grade", RptCardList.Grade);
            Dictionary<long, IList<CampusSubjectMaster>> SubjectMaster = MstSrv.GetSubjectMasterByCampusListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            criteria.Add("Section", RptCardList.Section);
            criteria.Add("AcademicYear", RptCardList.AcademicYear);
            Dictionary<long, IList<ReportCardRequest>> RptCrdRequest = rptCrdSrvc.GetReportCardRequestListWithPagingAndCriteria(0, 10, string.Empty, string.Empty, criteria);
            if (RptCrdRequest != null && RptCrdRequest.Count > 0 && RptCrdRequest.FirstOrDefault().Key > 0 && RptCrdRequest.FirstOrDefault().Value != null)
            {
                ReportCardRequest RptReq = RptCrdRequest.First().Value[0];
                RptCardList.TofWorkingDayT1 = RptReq.TofWorkingDayT1;
                RptCardList.TofWorkingDayT2 = RptReq.TofWorkingDayT2;
            }
            criteria.Add("PreRegNum", PreRegNum);
            Dictionary<long, IList<ReportCardCBSE>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSEListWithCriteria(0, 99999, string.Empty, string.Empty, criteria);
            IEnumerable<string> Subjects = from p in RptCrdCBSEMrkList.FirstOrDefault().Value.ToList()
                                           where p.Campus == RptCardList.Campus && p.Grade == RptCardList.Grade && p.Section == RptCardList.Section && p.AcademicYear == RptCardList.AcademicYear
                                           orderby p.PreRegNum ascending
                                           select p.Subject;
            string[] Subjectarray = Subjects.ToArray();
            if (RptCrdCBSEMrkList != null && RptCrdCBSEMrkList.Count > 0 && RptCrdCBSEMrkList.FirstOrDefault().Key > 0 && RptCrdCBSEMrkList.FirstOrDefault().Value != null)
            {
                IList<ReportCardCBSE> obj = new List<ReportCardCBSE>();
                foreach (var item in SubjectMaster.FirstOrDefault().Value)
                {
                    if (Subjectarray.Contains(item.SubjectName) || item.SubjectName == "Language" && Subjectarray.Contains("Hindi") || item.SubjectName == "Language" && Subjectarray.Contains("French") || item.SubjectName == "Language" && Subjectarray.Contains("Tamil"))
                    {
                        List<ReportCardCBSE> RptList = new List<ReportCardCBSE>();
                        if (item.SubjectName == "Language" && Subjectarray.Contains("Hindi"))
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == "Hindi"
                                       select p).ToList();
                        }
                        else if (item.SubjectName == "Language" && Subjectarray.Contains("French"))
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == "French"
                                       select p).ToList();
                        }
                        else if (item.SubjectName == "Language" && Subjectarray.Contains("Tamil"))
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == "Tamil"
                                       select p).ToList();
                        }
                        else
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == item.SubjectName
                                       select p).ToList();
                        }
                        if (RptList.Count != 0)
                        {
                            ReportCardCBSE RptCrdSubjectMarks = new ReportCardCBSE();
                            RptCrdSubjectMarks.FA1Grade = RptList[0].FA1Grade;
                            RptCrdSubjectMarks.FA2Grade = RptList[0].FA2Grade;
                            RptCrdSubjectMarks.FA3Grade = RptList[0].FA3Grade;
                            RptCrdSubjectMarks.FA4Grade = RptList[0].FA4Grade;
                            RptCrdSubjectMarks.SA1Grade = RptList[0].SA1Grade;
                            RptCrdSubjectMarks.SA2Grade = RptList[0].SA2Grade;
                            RptCrdSubjectMarks.Term1Grade = GradeCalulation(Convert.ToDecimal(RptList[0].Term1Total), "OverALL");
                            RptCrdSubjectMarks.Term2Grade = GradeCalulation(Convert.ToDecimal(RptList[0].Term2Total), "OverALL");
                            RptCrdSubjectMarks.FA1FA2FA3FA4 = GradeCalulation(Convert.ToDecimal((RptList[0].FA1 + RptList[0].FA2 + RptList[0].FA3 + RptList[0].FA4) / 40 * 100), "OverALL");
                            RptCrdSubjectMarks.SA1SA2 = GradeCalulation(Convert.ToDecimal((RptList[0].SA1 + RptList[0].SA2) / 60 * 100), "OverALL");
                            RptCrdSubjectMarks.OverAll = GradeCalulation(Convert.ToDecimal((RptList[0].Term1Total + RptList[0].Term2Total) / 2), "OverALL");
                            RptCrdSubjectMarks.Subject = item.SubjectName;
                            obj.Add(RptCrdSubjectMarks);
                        }
                    }
                    else
                    {
                        ReportCardCBSE RptCrdSubjectOnly = new ReportCardCBSE();
                        RptCrdSubjectOnly.Subject = item.SubjectName;
                        obj.Add(RptCrdSubjectOnly);
                    }
                }
                RptCardList.RptCardObjList = obj;
            }
            criteria.Clear();
            criteria.Add("Campus", RptCardList.Campus);
            criteria.Add("Grade", RptCardList.Grade);
            criteria.Add("AcademicYear", RptCardList.AcademicYear);
            Dictionary<long, IList<CoSch_Item_Vw>> RptCrdCoSchMasterList = rptCrdSrvc.GetRptCardCosch_ItemListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
            if (RptCrdCoSchMasterList != null && RptCrdCoSchMasterList.Count > 0 && RptCrdCoSchMasterList.FirstOrDefault().Key > 0 && RptCrdCoSchMasterList.FirstOrDefault().Value != null)
            {
                foreach (CoSch_Item_Vw CoSchItem in RptCrdCoSchMasterList.FirstOrDefault().Value)
                {
                    CoSchItem.CoSchGrade = rptCrdSrvc.GetCoSchGradeByPreRegNum(st.PreRegNum, CoSchItem.CoSchCriteriaCode + "_Grade", Terms);
                }
                RptCardList.RptCardCoSchObjList = RptCrdCoSchMasterList.FirstOrDefault().Value;
                RptCardList.TitleName = (from p in RptCrdCoSchMasterList.FirstOrDefault().Value.ToList()
                                         //orderby p.CoScholasticCode ascending
                                         select p.CoScholasticSection + " : " + p.CoScholasticName).Distinct().ToArray();
                RptCardList.CoSchName = (from p in RptCrdCoSchMasterList.FirstOrDefault().Value.ToList()
                                         //orderby p.CoScholasticCode ascending
                                         select p.CoScholasticName).Distinct().ToArray();
            }
            ReportCardCBSECommon RptCmnObj = rptCrdSrvc.GetReportCardCBSECommon(st.PreRegNum, st.AcademicYear);
            if (RptCmnObj != null)
            {
                RptCardList.TotalAttendenceT1 = RptCmnObj.TotalAttendenceT1;
                RptCardList.TotalAttendenceT2 = RptCmnObj.TotalAttendenceT2;
                RptCardList.WeightT1 = RptCmnObj.WeightT1;
                RptCardList.WeightT2 = RptCmnObj.WeightT2;
                RptCardList.HeightT1 = RptCmnObj.HeightT1;
                RptCardList.HeightT2 = RptCmnObj.HeightT2;
            }
            RptCardList.FileName = st.NewId + "_" + st.Grade + "_" + st.Section + "_ReportCard";
            return RptCardList;
        }

        public ActionResult JqGridCoSchWorkandEducation(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.WE_1 = GetList[0].WE_1 == null ? "" : GetList[0].WE_1.ToString();
                            sv.WE_2 = GetList[0].WE_2 == null ? "" : GetList[0].WE_2.ToString();
                            sv.WE_3 = GetList[0].WE_3 == null ? "" : GetList[0].WE_3.ToString();
                            sv.WE_4 = GetList[0].WE_4 == null ? "" : GetList[0].WE_4.ToString();
                            sv.WE_5 = GetList[0].WE_5 == null ? "" : GetList[0].WE_5.ToString();
                            sv.WE_6 = GetList[0].WE_6 == null ? "" : GetList[0].WE_6.ToString();
                            sv.WE_7 = GetList[0].WE_7 == null ? "" : GetList[0].WE_7.ToString();
                            sv.WE_8 = GetList[0].WE_8 == null ? "" : GetList[0].WE_8.ToString();
                            sv.WE_9 = GetList[0].WE_9 == null ? "" : GetList[0].WE_9.ToString();
                            sv.WE_10 = GetList[0].WE_10 == null ? "" : GetList[0].WE_10.ToString();
                            sv.EditRowId = sv.WE_1 == "" ? 0 : sv.WE_2 == "" ? 0 : sv.WE_3 == "" ? 0 : sv.WE_4 == "" ? 0 : sv.WE_5 == "" ? 0 : sv.WE_6 == "" ? 0 : sv.WE_7 == "" ? 0 : sv.WE_8 == "" ? 0 : sv.WE_9 == "" ? 0 : sv.WE_10 == "" ? 0 : 1;
                            sv.WE_Total = GetList[0].WE_Total == null ? "" : GetList[0].WE_Total.ToString();
                            sv.WE_Average = GetList[0].WE_Average == null ? "" : GetList[0].WE_Average.ToString();
                            sv.WE_Grade = GetList[0].WE_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.WE_1 ,
                            items.WE_2,  
                            items.WE_3,
                            items.WE_4,
                            items.WE_5,
                            items.WE_6,
                            items.WE_7  ,
                            items.WE_8,  
                            items.WE_9,  
                            items.WE_10, 
                            items.WE_Total,
                            items.WE_Average,
                            items.WE_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridCoSchLiteraryCreSkill(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LndCS_1 = GetList[0].LndCS_1 == null ? "" : GetList[0].LndCS_1.ToString();
                            sv.LndCS_2 = GetList[0].LndCS_2 == null ? "" : GetList[0].LndCS_2.ToString();
                            sv.LndCS_3 = GetList[0].LndCS_3 == null ? "" : GetList[0].LndCS_3.ToString();
                            sv.LndCS_4 = GetList[0].LndCS_4 == null ? "" : GetList[0].LndCS_4.ToString();
                            sv.LndCS_5 = GetList[0].LndCS_5 == null ? "" : GetList[0].LndCS_5.ToString();
                            sv.LndCS_6 = GetList[0].LndCS_6 == null ? "" : GetList[0].LndCS_6.ToString();
                            sv.LndCS_7 = GetList[0].LndCS_7 == null ? "" : GetList[0].LndCS_7.ToString();
                            sv.LndCS_8 = GetList[0].LndCS_8 == null ? "" : GetList[0].LndCS_8.ToString();
                            sv.LndCS_9 = GetList[0].LndCS_9 == null ? "" : GetList[0].LndCS_9.ToString();
                            sv.LndCS_10 = GetList[0].LndCS_10 == null ? "" : GetList[0].LndCS_10.ToString();
                            sv.EditRowId = sv.LndCS_1 == "" ? 0 : sv.LndCS_2 == "" ? 0 : sv.LndCS_3 == "" ? 0 : sv.LndCS_4 == "" ? 0 : sv.LndCS_5 == "" ? 0 : sv.LndCS_6 == "" ? 0 : sv.LndCS_7 == "" ? 0 : sv.LndCS_8 == "" ? 0 : sv.LndCS_9 == "" ? 0 : sv.LndCS_10 == "" ? 0 : 1;
                            sv.LndCS_Total = GetList[0].LndCS_Total == null ? "" : GetList[0].LndCS_Total.ToString();
                            sv.LndCS_Average = GetList[0].LndCS_Average == null ? "" : GetList[0].LndCS_Average.ToString();
                            sv.LndCS_Grade = GetList[0].LndCS_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LndCS_1 ,
                            items.LndCS_2,  
                            items.LndCS_3,
                            items.LndCS_4,
                            items.LndCS_5,
                            items.LndCS_6,
                            items.LndCS_7  ,
                            items.LndCS_8,  
                            items.LndCS_9,  
                            items.LndCS_10, 
                            items.LndCS_Total,
                            items.LndCS_Average,
                            items.LndCS_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridICT(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.ICT_1 = GetList[0].ICT_1 == null ? "" : GetList[0].ICT_1.ToString();
                            sv.ICT_2 = GetList[0].ICT_2 == null ? "" : GetList[0].ICT_2.ToString();
                            sv.ICT_3 = GetList[0].ICT_3 == null ? "" : GetList[0].ICT_3.ToString();
                            sv.ICT_4 = GetList[0].ICT_4 == null ? "" : GetList[0].ICT_4.ToString();
                            sv.ICT_5 = GetList[0].ICT_5 == null ? "" : GetList[0].ICT_5.ToString();
                            sv.ICT_6 = GetList[0].ICT_6 == null ? "" : GetList[0].ICT_6.ToString();
                            sv.ICT_7 = GetList[0].ICT_7 == null ? "" : GetList[0].ICT_7.ToString();
                            sv.ICT_8 = GetList[0].ICT_8 == null ? "" : GetList[0].ICT_8.ToString();
                            sv.ICT_9 = GetList[0].ICT_9 == null ? "" : GetList[0].ICT_9.ToString();
                            sv.ICT_10 = GetList[0].ICT_10 == null ? "" : GetList[0].ICT_10.ToString();
                            sv.EditRowId = sv.ICT_1 == "" ? 0 : sv.ICT_2 == "" ? 0 : sv.ICT_3 == "" ? 0 : sv.ICT_4 == "" ? 0 : sv.ICT_5 == "" ? 0 : sv.ICT_6 == "" ? 0 : sv.ICT_7 == "" ? 0 : sv.ICT_8 == "" ? 0 : sv.ICT_9 == "" ? 0 : sv.ICT_10 == "" ? 0 : 1;
                            sv.ICT_Total = GetList[0].ICT_Total == null ? "" : GetList[0].ICT_Total.ToString();
                            sv.ICT_Average = GetList[0].ICT_Average == null ? "" : GetList[0].ICT_Average.ToString();
                            sv.ICT_Grade = GetList[0].ICT_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.ICT_1 ,
                            items.ICT_2,  
                            items.ICT_3,
                            items.ICT_4,
                            items.ICT_5,
                            items.ICT_6,
                            items.ICT_7,
                            items.ICT_8,  
                            items.ICT_9,  
                            items.ICT_10, 
                            items.ICT_Total,
                            items.ICT_Average,
                            items.ICT_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridHealthPET(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.HPET_1 = GetList[0].HPET_1 == null ? "" : GetList[0].HPET_1.ToString();
                            sv.HPET_2 = GetList[0].HPET_2 == null ? "" : GetList[0].HPET_2.ToString();
                            sv.HPET_3 = GetList[0].HPET_3 == null ? "" : GetList[0].HPET_3.ToString();
                            sv.HPET_4 = GetList[0].HPET_4 == null ? "" : GetList[0].HPET_4.ToString();
                            sv.HPET_5 = GetList[0].HPET_5 == null ? "" : GetList[0].HPET_5.ToString();
                            sv.HPET_6 = GetList[0].HPET_6 == null ? "" : GetList[0].HPET_6.ToString();
                            sv.HPET_7 = GetList[0].HPET_7 == null ? "" : GetList[0].HPET_7.ToString();
                            sv.HPET_8 = GetList[0].HPET_8 == null ? "" : GetList[0].HPET_8.ToString();
                            sv.HPET_9 = GetList[0].HPET_9 == null ? "" : GetList[0].HPET_9.ToString();
                            sv.HPET_10 = GetList[0].HPET_10 == null ? "" : GetList[0].HPET_10.ToString();
                            sv.EditRowId = sv.HPET_1 == "" ? 0 : sv.HPET_2 == "" ? 0 : sv.HPET_3 == "" ? 0 : sv.HPET_4 == "" ? 0 : sv.HPET_5 == "" ? 0 : sv.HPET_6 == "" ? 0 : sv.HPET_7 == "" ? 0 : sv.HPET_8 == "" ? 0 : sv.HPET_9 == "" ? 0 : sv.HPET_10 == "" ? 0 : 1;
                            sv.HPET_Total = GetList[0].HPET_Total == null ? "" : GetList[0].HPET_Total.ToString();
                            sv.HPET_Average = GetList[0].HPET_Average == null ? "" : GetList[0].HPET_Average.ToString();
                            sv.HPET_Grade = GetList[0].HPET_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.HPET_1 ,
                            items.HPET_2,  
                            items.HPET_3,
                            items.HPET_4,
                            items.HPET_5,
                            items.HPET_6,
                            items.HPET_7,
                            items.HPET_8,  
                            items.HPET_9,  
                            items.HPET_10, 
                            items.HPET_Total,
                            items.HPET_Average,
                            items.HPET_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridVS_ToABC(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.VS_ToABC_1 = GetList[0].VS_ToABC_1 == null ? "" : GetList[0].VS_ToABC_1.ToString();
                            sv.VS_ToABC_2 = GetList[0].VS_ToABC_2 == null ? "" : GetList[0].VS_ToABC_2.ToString();
                            sv.VS_ToABC_3 = GetList[0].VS_ToABC_3 == null ? "" : GetList[0].VS_ToABC_3.ToString();
                            sv.VS_ToABC_4 = GetList[0].VS_ToABC_4 == null ? "" : GetList[0].VS_ToABC_4.ToString();
                            sv.EditRowId = sv.VS_ToABC_1 == "" ? 0 : sv.VS_ToABC_2 == "" ? 0 : sv.VS_ToABC_3 == "" ? 0 : sv.VS_ToABC_4 == "" ? 0 : 1;
                            sv.VS_ToABC_Total = GetList[0].VS_ToABC_Total == null ? "" : GetList[0].VS_ToABC_Total.ToString();
                            sv.VS_ToABC_Average = GetList[0].VS_ToABC_Average == null ? "" : GetList[0].VS_ToABC_Average.ToString();
                            sv.VS_ToABC_Grade = GetList[0].VS_ToABC_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.VS_ToABC_1 ,
                            items.VS_ToABC_2,  
                            items.VS_ToABC_3,
                            items.VS_ToABC_4,
                            items.VS_ToABC_Total,
                            items.VS_ToABC_Average,
                            items.VS_ToABC_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridVS_ToCFNI(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.VS_ToCFNI_1 = GetList[0].VS_ToCFNI_1 == null ? "" : GetList[0].VS_ToCFNI_1.ToString();
                            sv.VS_ToCFNI_2 = GetList[0].VS_ToCFNI_2 == null ? "" : GetList[0].VS_ToCFNI_2.ToString();
                            sv.VS_ToCFNI_3 = GetList[0].VS_ToCFNI_3 == null ? "" : GetList[0].VS_ToCFNI_3.ToString();
                            sv.VS_ToCFNI_4 = GetList[0].VS_ToCFNI_4 == null ? "" : GetList[0].VS_ToCFNI_4.ToString();
                            sv.EditRowId = sv.VS_ToCFNI_1 == "" ? 0 : sv.VS_ToCFNI_2 == "" ? 0 : sv.VS_ToCFNI_3 == "" ? 0 : sv.VS_ToCFNI_4 == "" ? 0 : 1;
                            sv.VS_ToCFNI_Total = GetList[0].VS_ToCFNI_Total == null ? "" : GetList[0].VS_ToCFNI_Total.ToString();
                            sv.VS_ToCFNI_Average = GetList[0].VS_ToCFNI_Average == null ? "" : GetList[0].VS_ToCFNI_Average.ToString();
                            sv.VS_ToCFNI_Grade = GetList[0].VS_ToCFNI_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.VS_ToCFNI_1 ,
                            items.VS_ToCFNI_2,  
                            items.VS_ToCFNI_3,
                            items.VS_ToCFNI_4,
                            items.VS_ToCFNI_Total,
                            items.VS_ToCFNI_Average,
                            items.VS_ToCFNI_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridVS_ToUPSUI(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.VS_ToUPSUI_1 = GetList[0].VS_ToUPSUI_1 == null ? "" : GetList[0].VS_ToUPSUI_1.ToString();
                            sv.VS_ToUPSUI_2 = GetList[0].VS_ToUPSUI_2 == null ? "" : GetList[0].VS_ToUPSUI_2.ToString();
                            sv.VS_ToUPSUI_3 = GetList[0].VS_ToUPSUI_3 == null ? "" : GetList[0].VS_ToUPSUI_3.ToString();
                            sv.VS_ToUPSUI_4 = GetList[0].VS_ToUPSUI_4 == null ? "" : GetList[0].VS_ToUPSUI_4.ToString();
                            sv.EditRowId = sv.VS_ToUPSUI_1 == "" ? 0 : sv.VS_ToUPSUI_2 == "" ? 0 : sv.VS_ToUPSUI_3 == "" ? 0 : sv.VS_ToUPSUI_4 == "" ? 0 : 1;
                            sv.VS_ToUPSUI_Total = GetList[0].VS_ToUPSUI_Total == null ? "" : GetList[0].VS_ToUPSUI_Total.ToString();
                            sv.VS_ToUPSUI_Average = GetList[0].VS_ToUPSUI_Average == null ? "" : GetList[0].VS_ToUPSUI_Average.ToString();
                            sv.VS_ToUPSUI_Grade = GetList[0].VS_ToUPSUI_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.VS_ToUPSUI_1 ,
                            items.VS_ToUPSUI_2,  
                            items.VS_ToUPSUI_3,
                            items.VS_ToUPSUI_4,
                            items.VS_ToUPSUI_Total,
                            items.VS_ToUPSUI_Average,
                            items.VS_ToUPSUI_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridVS_ToRNSWCU(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.VS_ToRNSWCU_1 = GetList[0].VS_ToRNSWCU_1 == null ? "" : GetList[0].VS_ToRNSWCU_1.ToString();
                            sv.VS_ToRNSWCU_2 = GetList[0].VS_ToRNSWCU_2 == null ? "" : GetList[0].VS_ToRNSWCU_2.ToString();
                            sv.VS_ToRNSWCU_3 = GetList[0].VS_ToRNSWCU_3 == null ? "" : GetList[0].VS_ToRNSWCU_3.ToString();
                            sv.VS_ToRNSWCU_4 = GetList[0].VS_ToRNSWCU_4 == null ? "" : GetList[0].VS_ToRNSWCU_4.ToString();
                            sv.EditRowId = sv.VS_ToRNSWCU_1 == "" ? 0 : sv.VS_ToRNSWCU_2 == "" ? 0 : sv.VS_ToRNSWCU_3 == "" ? 0 : sv.VS_ToRNSWCU_4 == "" ? 0 : 1;
                            sv.VS_ToRNSWCU_Total = GetList[0].VS_ToRNSWCU_Total == null ? "" : GetList[0].VS_ToRNSWCU_Total.ToString();
                            sv.VS_ToRNSWCU_Average = GetList[0].VS_ToRNSWCU_Average == null ? "" : GetList[0].VS_ToRNSWCU_Average.ToString();
                            sv.VS_ToRNSWCU_Grade = GetList[0].VS_ToRNSWCU_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.VS_ToRNSWCU_1 ,
                            items.VS_ToRNSWCU_2,  
                            items.VS_ToRNSWCU_3,
                            items.VS_ToRNSWCU_4,
                            items.VS_ToRNSWCU_Total,
                            items.VS_ToRNSWCU_Average,
                            items.VS_ToRNSWCU_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridVS_ToPHUB(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Section = GetList[0].Section;
                            sv.Term = GetList[0].Term;
                            sv.VS_ToPHUB_1 = GetList[0].VS_ToPHUB_1 == null ? "" : GetList[0].VS_ToPHUB_1.ToString();
                            sv.VS_ToPHUB_2 = GetList[0].VS_ToPHUB_2 == null ? "" : GetList[0].VS_ToPHUB_2.ToString();
                            sv.VS_ToPHUB_3 = GetList[0].VS_ToPHUB_3 == null ? "" : GetList[0].VS_ToPHUB_3.ToString();
                            sv.VS_ToPHUB_4 = GetList[0].VS_ToPHUB_4 == null ? "" : GetList[0].VS_ToPHUB_4.ToString();
                            sv.EditRowId = sv.VS_ToPHUB_1 == "" ? 0 : sv.VS_ToPHUB_2 == "" ? 0 : sv.VS_ToPHUB_3 == "" ? 0 : sv.VS_ToPHUB_4 == "" ? 0 : 1;
                            sv.VS_ToPHUB_Total = GetList[0].VS_ToPHUB_Total == null ? "" : GetList[0].VS_ToPHUB_Total.ToString();
                            sv.VS_ToPHUB_Average = GetList[0].VS_ToPHUB_Average == null ? "" : GetList[0].VS_ToPHUB_Average.ToString();
                            sv.VS_ToPHUB_Grade = GetList[0].VS_ToPHUB_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.VS_ToPHUB_1 ,
                            items.VS_ToPHUB_2,  
                            items.VS_ToPHUB_3,
                            items.VS_ToPHUB_4,
                            items.VS_ToPHUB_Total,
                            items.VS_ToPHUB_Average,
                            items.VS_ToPHUB_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridAT_AToT(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.AT_AToT_1 = GetList[0].AT_AToT_1 == null ? "" : GetList[0].AT_AToT_1.ToString();
                            sv.AT_AToT_2 = GetList[0].AT_AToT_2 == null ? "" : GetList[0].AT_AToT_2.ToString();
                            sv.AT_AToT_3 = GetList[0].AT_AToT_3 == null ? "" : GetList[0].AT_AToT_3.ToString();
                            sv.AT_AToT_4 = GetList[0].AT_AToT_4 == null ? "" : GetList[0].AT_AToT_4.ToString();
                            sv.AT_AToT_5 = GetList[0].AT_AToT_5 == null ? "" : GetList[0].AT_AToT_5.ToString();
                            sv.AT_AToT_6 = GetList[0].AT_AToT_6 == null ? "" : GetList[0].AT_AToT_6.ToString();
                            sv.AT_AToT_7 = GetList[0].AT_AToT_7 == null ? "" : GetList[0].AT_AToT_7.ToString();
                            sv.AT_AToT_8 = GetList[0].AT_AToT_8 == null ? "" : GetList[0].AT_AToT_8.ToString();
                            sv.AT_AToT_9 = GetList[0].AT_AToT_9 == null ? "" : GetList[0].AT_AToT_9.ToString();
                            sv.AT_AToT_10 = GetList[0].AT_AToT_10 == null ? "" : GetList[0].AT_AToT_10.ToString();
                            sv.EditRowId = sv.AT_AToT_1 == "" ? 0 : sv.AT_AToT_2 == "" ? 0 : sv.AT_AToT_3 == "" ? 0 : sv.AT_AToT_4 == "" ? 0 : sv.AT_AToT_5 == "" ? 0 : sv.AT_AToT_6 == "" ? 0 : sv.AT_AToT_7 == "" ? 0 : sv.AT_AToT_8 == "" ? 0 : sv.AT_AToT_9 == "" ? 0 : sv.AT_AToT_10 == "" ? 0 : 1;
                            sv.AT_AToT_Total = GetList[0].AT_AToT_Total == null ? "" : GetList[0].AT_AToT_Total.ToString();
                            sv.AT_AToT_Average = GetList[0].AT_AToT_Average == null ? "" : GetList[0].AT_AToT_Average.ToString();
                            sv.AT_AToT_Grade = GetList[0].AT_AToT_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.AT_AToT_1 ,
                            items.AT_AToT_2,  
                            items.AT_AToT_3,
                            items.AT_AToT_4,
                            items.AT_AToT_5,
                            items.AT_AToT_6,
                            items.AT_AToT_7,
                            items.AT_AToT_8,  
                            items.AT_AToT_9,  
                            items.AT_AToT_10, 
                            items.AT_AToT_Total,
                            items.AT_AToT_Average,
                            items.AT_AToT_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridAT_AToSM(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.AT_AToSM_1 = GetList[0].AT_AToSM_1 == null ? "" : GetList[0].AT_AToSM_1.ToString();
                            sv.AT_AToSM_2 = GetList[0].AT_AToSM_2 == null ? "" : GetList[0].AT_AToSM_2.ToString();
                            sv.AT_AToSM_3 = GetList[0].AT_AToSM_3 == null ? "" : GetList[0].AT_AToSM_3.ToString();
                            sv.AT_AToSM_4 = GetList[0].AT_AToSM_4 == null ? "" : GetList[0].AT_AToSM_4.ToString();
                            sv.AT_AToSM_5 = GetList[0].AT_AToSM_5 == null ? "" : GetList[0].AT_AToSM_5.ToString();
                            sv.AT_AToSM_6 = GetList[0].AT_AToSM_6 == null ? "" : GetList[0].AT_AToSM_6.ToString();
                            sv.AT_AToSM_7 = GetList[0].AT_AToSM_7 == null ? "" : GetList[0].AT_AToSM_7.ToString();
                            sv.AT_AToSM_8 = GetList[0].AT_AToSM_8 == null ? "" : GetList[0].AT_AToSM_8.ToString();
                            sv.AT_AToSM_9 = GetList[0].AT_AToSM_9 == null ? "" : GetList[0].AT_AToSM_9.ToString();
                            sv.AT_AToSM_10 = GetList[0].AT_AToSM_10 == null ? "" : GetList[0].AT_AToSM_10.ToString();
                            sv.EditRowId = sv.AT_AToSM_1 == "" ? 0 : sv.AT_AToSM_2 == "" ? 0 : sv.AT_AToSM_3 == "" ? 0 : sv.AT_AToSM_4 == "" ? 0 : sv.AT_AToSM_5 == "" ? 0 : sv.AT_AToSM_6 == "" ? 0 : sv.AT_AToSM_7 == "" ? 0 : sv.AT_AToSM_8 == "" ? 0 : sv.AT_AToSM_9 == "" ? 0 : sv.AT_AToSM_10 == "" ? 0 : 1;
                            sv.AT_AToSM_Total = GetList[0].AT_AToSM_Total == null ? "" : GetList[0].AT_AToSM_Total.ToString();
                            sv.AT_AToSM_Average = GetList[0].AT_AToSM_Average == null ? "" : GetList[0].AT_AToSM_Average.ToString();
                            sv.AT_AToSM_Grade = GetList[0].AT_AToSM_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.AT_AToSM_1 ,
                            items.AT_AToSM_2,  
                            items.AT_AToSM_3,
                            items.AT_AToSM_4,
                            items.AT_AToSM_5,
                            items.AT_AToSM_6,
                            items.AT_AToSM_7,
                            items.AT_AToSM_8,  
                            items.AT_AToSM_9,  
                            items.AT_AToSM_10, 
                            items.AT_AToSM_Total,
                            items.AT_AToSM_Average,
                            items.AT_AToSM_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridAT_AToSPE(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.AT_AToSPE_1 = GetList[0].AT_AToSPE_1 == null ? "" : GetList[0].AT_AToSPE_1.ToString();
                            sv.AT_AToSPE_2 = GetList[0].AT_AToSPE_2 == null ? "" : GetList[0].AT_AToSPE_2.ToString();
                            sv.AT_AToSPE_3 = GetList[0].AT_AToSPE_3 == null ? "" : GetList[0].AT_AToSPE_3.ToString();
                            sv.AT_AToSPE_4 = GetList[0].AT_AToSPE_4 == null ? "" : GetList[0].AT_AToSPE_4.ToString();
                            sv.AT_AToSPE_5 = GetList[0].AT_AToSPE_5 == null ? "" : GetList[0].AT_AToSPE_5.ToString();
                            sv.AT_AToSPE_6 = GetList[0].AT_AToSPE_6 == null ? "" : GetList[0].AT_AToSPE_6.ToString();
                            sv.AT_AToSPE_7 = GetList[0].AT_AToSPE_7 == null ? "" : GetList[0].AT_AToSPE_7.ToString();
                            sv.AT_AToSPE_8 = GetList[0].AT_AToSPE_8 == null ? "" : GetList[0].AT_AToSPE_8.ToString();
                            sv.AT_AToSPE_9 = GetList[0].AT_AToSPE_9 == null ? "" : GetList[0].AT_AToSPE_9.ToString();
                            sv.AT_AToSPE_10 = GetList[0].AT_AToSPE_10 == null ? "" : GetList[0].AT_AToSPE_10.ToString();
                            sv.EditRowId = sv.AT_AToSPE_1 == "" ? 0 : sv.AT_AToSPE_2 == "" ? 0 : sv.AT_AToSPE_3 == "" ? 0 : sv.AT_AToSPE_4 == "" ? 0 : sv.AT_AToSPE_5 == "" ? 0 : sv.AT_AToSPE_6 == "" ? 0 : sv.AT_AToSPE_7 == "" ? 0 : sv.AT_AToSPE_8 == "" ? 0 : sv.AT_AToSPE_9 == "" ? 0 : sv.AT_AToSPE_10 == "" ? 0 : 1;
                            sv.AT_AToSPE_Total = GetList[0].AT_AToSPE_Total == null ? "" : GetList[0].AT_AToSPE_Total.ToString();
                            sv.AT_AToSPE_Average = GetList[0].AT_AToSPE_Average == null ? "" : GetList[0].AT_AToSPE_Average.ToString();
                            sv.AT_AToSPE_Grade = GetList[0].AT_AToSPE_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.AT_AToSPE_1 ,
                            items.AT_AToSPE_2,  
                            items.AT_AToSPE_3,
                            items.AT_AToSPE_4,
                            items.AT_AToSPE_5,
                            items.AT_AToSPE_6,
                            items.AT_AToSPE_7,
                            items.AT_AToSPE_8,  
                            items.AT_AToSPE_9,  
                            items.AT_AToSPE_10, 
                            items.AT_AToSPE_Total,
                            items.AT_AToSPE_Average,
                            items.AT_AToSPE_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridVisualArts(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.VA_1 = GetList[0].VA_1 == null ? "" : GetList[0].VA_1.ToString();
                            sv.VA_2 = GetList[0].VA_2 == null ? "" : GetList[0].VA_2.ToString();
                            sv.VA_3 = GetList[0].VA_3 == null ? "" : GetList[0].VA_3.ToString();
                            sv.VA_4 = GetList[0].VA_4 == null ? "" : GetList[0].VA_4.ToString();
                            sv.VA_5 = GetList[0].VA_5 == null ? "" : GetList[0].VA_5.ToString();
                            sv.VA_6 = GetList[0].VA_6 == null ? "" : GetList[0].VA_6.ToString();
                            sv.VA_7 = GetList[0].VA_7 == null ? "" : GetList[0].VA_7.ToString();
                            sv.VA_8 = GetList[0].VA_8 == null ? "" : GetList[0].VA_8.ToString();
                            sv.VA_9 = GetList[0].VA_9 == null ? "" : GetList[0].VA_9.ToString();
                            sv.VA_10 = GetList[0].VA_10 == null ? "" : GetList[0].VA_10.ToString();
                            sv.EditRowId = sv.VA_1 == "" ? 0 : sv.VA_2 == "" ? 0 : sv.VA_3 == "" ? 0 : sv.VA_4 == "" ? 0 : sv.VA_5 == "" ? 0 : sv.VA_6 == "" ? 0 : sv.VA_7 == "" ? 0 : sv.VA_8 == "" ? 0 : sv.VA_9 == "" ? 0 : sv.VA_10 == "" ? 0 : 1;
                            sv.VA_Total = GetList[0].VA_Total == null ? "" : GetList[0].VA_Total.ToString();
                            sv.VA_Average = GetList[0].VA_Average == null ? "" : GetList[0].VA_Average.ToString();
                            sv.VA_Grade = GetList[0].VA_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.VA_1 ,
                            items.VA_2,  
                            items.VA_3,
                            items.VA_4,
                            items.VA_5,
                            items.VA_6,
                            items.VA_7,
                            items.VA_8,  
                            items.VA_9,  
                            items.VA_10, 
                            items.VA_Total,
                            items.VA_Average,
                            items.VA_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridPerformingArts(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.PA_1 = GetList[0].PA_1 == null ? "" : GetList[0].PA_1.ToString();
                            sv.PA_2 = GetList[0].PA_2 == null ? "" : GetList[0].PA_2.ToString();
                            sv.PA_3 = GetList[0].PA_3 == null ? "" : GetList[0].PA_3.ToString();
                            sv.PA_4 = GetList[0].PA_4 == null ? "" : GetList[0].PA_4.ToString();
                            sv.PA_5 = GetList[0].PA_5 == null ? "" : GetList[0].PA_5.ToString();
                            sv.PA_6 = GetList[0].PA_6 == null ? "" : GetList[0].PA_6.ToString();
                            sv.PA_7 = GetList[0].PA_7 == null ? "" : GetList[0].PA_7.ToString();
                            sv.PA_8 = GetList[0].PA_8 == null ? "" : GetList[0].PA_8.ToString();
                            sv.PA_9 = GetList[0].PA_9 == null ? "" : GetList[0].PA_9.ToString();
                            sv.PA_10 = GetList[0].PA_10 == null ? "" : GetList[0].PA_10.ToString();
                            sv.EditRowId = sv.PA_1 == "" ? 0 : sv.PA_2 == "" ? 0 : sv.PA_3 == "" ? 0 : sv.PA_4 == "" ? 0 : sv.PA_5 == "" ? 0 : sv.PA_6 == "" ? 0 : sv.PA_7 == "" ? 0 : sv.PA_8 == "" ? 0 : sv.PA_9 == "" ? 0 : sv.PA_10 == "" ? 0 : 1;
                            sv.PA_Total = GetList[0].PA_Total == null ? "" : GetList[0].PA_Total.ToString();
                            sv.PA_Average = GetList[0].PA_Average == null ? "" : GetList[0].PA_Average.ToString();
                            sv.PA_Grade = GetList[0].PA_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.PA_1 ,
                            items.PA_2,  
                            items.PA_3,
                            items.PA_4,
                            items.PA_5,
                            items.PA_6,
                            items.PA_7,
                            items.PA_8,  
                            items.PA_9,  
                            items.PA_10, 
                            items.PA_Total,
                            items.PA_Average,
                            items.PA_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_SA(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear && u.Term == Term
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Section = GetList[0].Section;
                            sv.Term = GetList[0].Term;
                            sv.LS_SA_1 = GetList[0].LS_SA_1 == null ? "" : GetList[0].LS_SA_1.ToString();
                            sv.LS_SA_2 = GetList[0].LS_SA_2 == null ? "" : GetList[0].LS_SA_2.ToString();
                            sv.LS_SA_3 = GetList[0].LS_SA_3 == null ? "" : GetList[0].LS_SA_3.ToString();
                            sv.LS_SA_4 = GetList[0].LS_SA_4 == null ? "" : GetList[0].LS_SA_4.ToString();
                            sv.LS_SA_5 = GetList[0].LS_SA_5 == null ? "" : GetList[0].LS_SA_5.ToString();
                            sv.EditRowId = sv.LS_SA_1 == "" ? 0 : sv.LS_SA_2 == "" ? 0 : sv.LS_SA_3 == "" ? 0 : sv.LS_SA_4 == "" ? 0 : sv.LS_SA_5 == "" ? 0 : 1;
                            sv.LS_SA_Total = GetList[0].LS_SA_Total == null ? "" : GetList[0].LS_SA_Total.ToString();
                            sv.LS_SA_Average = GetList[0].LS_SA_Average == null ? "" : GetList[0].LS_SA_Average.ToString();
                            sv.LS_SA_Grade = GetList[0].LS_SA_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_SA_1 ,
                            items.LS_SA_2,  
                            items.LS_SA_3,
                            items.LS_SA_4,
                            items.LS_SA_5,
                            items.LS_SA_Total,
                            items.LS_SA_Average,
                            items.LS_SA_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_PS(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_PS_1 = GetList[0].LS_PS_1 == null ? "" : GetList[0].LS_PS_1.ToString();
                            sv.LS_PS_2 = GetList[0].LS_PS_2 == null ? "" : GetList[0].LS_PS_2.ToString();
                            sv.LS_PS_3 = GetList[0].LS_PS_3 == null ? "" : GetList[0].LS_PS_3.ToString();
                            sv.LS_PS_4 = GetList[0].LS_PS_4 == null ? "" : GetList[0].LS_PS_4.ToString();
                            sv.LS_PS_5 = GetList[0].LS_PS_5 == null ? "" : GetList[0].LS_PS_5.ToString();
                            sv.EditRowId = sv.LS_PS_1 == "" ? 0 : sv.LS_PS_2 == "" ? 0 : sv.LS_PS_3 == "" ? 0 : sv.LS_PS_4 == "" ? 0 : sv.LS_PS_5 == "" ? 0 : 1;
                            sv.LS_PS_Total = GetList[0].LS_PS_Total == null ? "" : GetList[0].LS_PS_Total.ToString();
                            sv.LS_PS_Average = GetList[0].LS_PS_Average == null ? "" : GetList[0].LS_PS_Average.ToString();
                            sv.LS_PS_Grade = GetList[0].LS_PS_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_PS_1 ,
                            items.LS_PS_2,  
                            items.LS_PS_3,
                            items.LS_PS_4,
                            items.LS_PS_5,
                            items.LS_PS_Total,
                            items.LS_PS_Average,
                            items.LS_PS_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_DM(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_DM_1 = GetList[0].LS_DM_1 == null ? "" : GetList[0].LS_DM_1.ToString();
                            sv.LS_DM_2 = GetList[0].LS_DM_2 == null ? "" : GetList[0].LS_DM_2.ToString();
                            sv.LS_DM_3 = GetList[0].LS_DM_3 == null ? "" : GetList[0].LS_DM_3.ToString();
                            sv.LS_DM_4 = GetList[0].LS_DM_4 == null ? "" : GetList[0].LS_DM_4.ToString();
                            sv.LS_DM_5 = GetList[0].LS_DM_5 == null ? "" : GetList[0].LS_DM_5.ToString();
                            sv.EditRowId = sv.LS_DM_1 == "" ? 0 : sv.LS_DM_2 == "" ? 0 : sv.LS_DM_3 == "" ? 0 : sv.LS_DM_4 == "" ? 0 : sv.LS_DM_5 == "" ? 0 : 1;
                            sv.LS_DM_Total = GetList[0].LS_DM_Total == null ? "" : GetList[0].LS_DM_Total.ToString();
                            sv.LS_DM_Average = GetList[0].LS_DM_Average == null ? "" : GetList[0].LS_DM_Average.ToString();
                            sv.LS_DM_Grade = GetList[0].LS_DM_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_DM_1 ,
                            items.LS_DM_2,  
                            items.LS_DM_3,
                            items.LS_DM_4,
                            items.LS_DM_5,
                            items.LS_DM_Total,
                            items.LS_DM_Average,
                            items.LS_DM_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_CriT(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_CriT_1 = GetList[0].LS_CriT_1 == null ? "" : GetList[0].LS_CriT_1.ToString();
                            sv.LS_CriT_2 = GetList[0].LS_CriT_2 == null ? "" : GetList[0].LS_CriT_2.ToString();
                            sv.LS_CriT_3 = GetList[0].LS_CriT_3 == null ? "" : GetList[0].LS_CriT_3.ToString();
                            sv.LS_CriT_4 = GetList[0].LS_CriT_4 == null ? "" : GetList[0].LS_CriT_4.ToString();
                            sv.LS_CriT_5 = GetList[0].LS_CriT_5 == null ? "" : GetList[0].LS_CriT_5.ToString();
                            sv.EditRowId = sv.LS_CriT_1 == "" ? 0 : sv.LS_CriT_2 == "" ? 0 : sv.LS_CriT_3 == "" ? 0 : sv.LS_CriT_4 == "" ? 0 : sv.LS_CriT_5 == "" ? 0 : 1;
                            sv.LS_CriT_Total = GetList[0].LS_CriT_Total == null ? "" : GetList[0].LS_CriT_Total.ToString();
                            sv.LS_CriT_Average = GetList[0].LS_CriT_Average == null ? "" : GetList[0].LS_CriT_Average.ToString();
                            sv.LS_CriT_Grade = GetList[0].LS_CriT_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_CriT_1 ,
                            items.LS_CriT_2,  
                            items.LS_CriT_3,
                            items.LS_CriT_4,
                            items.LS_CriT_5,
                            items.LS_CriT_Total,
                            items.LS_CriT_Average,
                            items.LS_CriT_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_CreT(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_CreT_1 = GetList[0].LS_CreT_1 == null ? "" : GetList[0].LS_CreT_1.ToString();
                            sv.LS_CreT_2 = GetList[0].LS_CreT_2 == null ? "" : GetList[0].LS_CreT_2.ToString();
                            sv.LS_CreT_3 = GetList[0].LS_CreT_3 == null ? "" : GetList[0].LS_CreT_3.ToString();
                            sv.LS_CreT_4 = GetList[0].LS_CreT_4 == null ? "" : GetList[0].LS_CreT_4.ToString();
                            sv.LS_CreT_5 = GetList[0].LS_CreT_5 == null ? "" : GetList[0].LS_CreT_5.ToString();
                            sv.EditRowId = sv.LS_CreT_1 == "" ? 0 : sv.LS_CreT_2 == "" ? 0 : sv.LS_CreT_3 == "" ? 0 : sv.LS_CreT_4 == "" ? 0 : sv.LS_CreT_5 == "" ? 0 : 1;
                            sv.LS_CreT_Total = GetList[0].LS_CreT_Total == null ? "" : GetList[0].LS_CreT_Total.ToString();
                            sv.LS_CreT_Average = GetList[0].LS_CreT_Average == null ? "" : GetList[0].LS_CreT_Average.ToString();
                            sv.LS_CreT_Grade = GetList[0].LS_CreT_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_CreT_1 ,
                            items.LS_CreT_2,  
                            items.LS_CreT_3,
                            items.LS_CreT_4,
                            items.LS_CreT_5,
                            items.LS_CreT_Total,
                            items.LS_CreT_Average,
                            items.LS_CreT_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_IR(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_IR_1 = GetList[0].LS_IR_1 == null ? "" : GetList[0].LS_IR_1.ToString();
                            sv.LS_IR_2 = GetList[0].LS_IR_2 == null ? "" : GetList[0].LS_IR_2.ToString();
                            sv.LS_IR_3 = GetList[0].LS_IR_3 == null ? "" : GetList[0].LS_IR_3.ToString();
                            sv.LS_IR_4 = GetList[0].LS_IR_4 == null ? "" : GetList[0].LS_IR_4.ToString();
                            sv.LS_IR_5 = GetList[0].LS_IR_5 == null ? "" : GetList[0].LS_IR_5.ToString();
                            sv.EditRowId = sv.LS_IR_1 == "" ? 0 : sv.LS_IR_2 == "" ? 0 : sv.LS_IR_3 == "" ? 0 : sv.LS_IR_4 == "" ? 0 : sv.LS_IR_5 == "" ? 0 : 1;
                            sv.LS_IR_Total = GetList[0].LS_IR_Total == null ? "" : GetList[0].LS_IR_Total.ToString();
                            sv.LS_IR_Average = GetList[0].LS_IR_Average == null ? "" : GetList[0].LS_IR_Average.ToString();
                            sv.LS_IR_Grade = GetList[0].LS_IR_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_IR_1 ,
                            items.LS_IR_2,  
                            items.LS_IR_3,
                            items.LS_IR_4,
                            items.LS_IR_5,
                            items.LS_IR_Total,
                            items.LS_IR_Average,
                            items.LS_IR_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_EC(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_EC_1 = GetList[0].LS_EC_1 == null ? "" : GetList[0].LS_EC_1.ToString();
                            sv.LS_EC_2 = GetList[0].LS_EC_2 == null ? "" : GetList[0].LS_EC_2.ToString();
                            sv.LS_EC_3 = GetList[0].LS_EC_3 == null ? "" : GetList[0].LS_EC_3.ToString();
                            sv.LS_EC_4 = GetList[0].LS_EC_4 == null ? "" : GetList[0].LS_EC_4.ToString();
                            sv.LS_EC_5 = GetList[0].LS_EC_5 == null ? "" : GetList[0].LS_EC_5.ToString();
                            sv.EditRowId = sv.LS_EC_1 == "" ? 0 : sv.LS_EC_2 == "" ? 0 : sv.LS_EC_3 == "" ? 0 : sv.LS_EC_4 == "" ? 0 : sv.LS_EC_5 == "" ? 0 : 1;
                            sv.LS_EC_Total = GetList[0].LS_EC_Total == null ? "" : GetList[0].LS_EC_Total.ToString();
                            sv.LS_EC_Average = GetList[0].LS_EC_Average == null ? "" : GetList[0].LS_EC_Average.ToString();
                            sv.LS_EC_Grade = GetList[0].LS_EC_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_EC_1 ,
                            items.LS_EC_2,  
                            items.LS_EC_3,
                            items.LS_EC_4,
                            items.LS_EC_5,
                            items.LS_EC_Total,
                            items.LS_EC_Average,
                            items.LS_EC_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_Emp(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_Emp_1 = GetList[0].LS_Emp_1 == null ? "" : GetList[0].LS_Emp_1.ToString();
                            sv.LS_Emp_2 = GetList[0].LS_Emp_2 == null ? "" : GetList[0].LS_Emp_2.ToString();
                            sv.LS_Emp_3 = GetList[0].LS_Emp_3 == null ? "" : GetList[0].LS_Emp_3.ToString();
                            sv.LS_Emp_4 = GetList[0].LS_Emp_4 == null ? "" : GetList[0].LS_Emp_4.ToString();
                            sv.LS_Emp_5 = GetList[0].LS_Emp_5 == null ? "" : GetList[0].LS_Emp_5.ToString();
                            sv.EditRowId = sv.LS_Emp_1 == "" ? 0 : sv.LS_Emp_2 == "" ? 0 : sv.LS_Emp_3 == "" ? 0 : sv.LS_Emp_4 == "" ? 0 : sv.LS_Emp_5 == "" ? 0 : 1;
                            sv.LS_Emp_Total = GetList[0].LS_Emp_Total == null ? "" : GetList[0].LS_Emp_Total.ToString();
                            sv.LS_Emp_Average = GetList[0].LS_Emp_Average == null ? "" : GetList[0].LS_Emp_Average.ToString();
                            sv.LS_Emp_Grade = GetList[0].LS_Emp_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_Emp_1 ,
                            items.LS_Emp_2,  
                            items.LS_Emp_3,
                            items.LS_Emp_4,
                            items.LS_Emp_5,
                            items.LS_Emp_Total,
                            items.LS_Emp_Average,
                            items.LS_Emp_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_ME(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.LS_ME_1 = GetList[0].LS_ME_1 == null ? "" : GetList[0].LS_ME_1.ToString();
                            sv.LS_ME_2 = GetList[0].LS_ME_2 == null ? "" : GetList[0].LS_ME_2.ToString();
                            sv.LS_ME_3 = GetList[0].LS_ME_3 == null ? "" : GetList[0].LS_ME_3.ToString();
                            sv.LS_ME_4 = GetList[0].LS_ME_4 == null ? "" : GetList[0].LS_ME_4.ToString();
                            sv.LS_ME_5 = GetList[0].LS_ME_5 == null ? "" : GetList[0].LS_ME_5.ToString();
                            sv.EditRowId = sv.LS_ME_1 == "" ? 0 : sv.LS_ME_2 == "" ? 0 : sv.LS_ME_3 == "" ? 0 : sv.LS_ME_4 == "" ? 0 : sv.LS_ME_5 == "" ? 0 : 1;
                            sv.LS_ME_Total = GetList[0].LS_ME_Total == null ? "" : GetList[0].LS_ME_Total.ToString();
                            sv.LS_ME_Average = GetList[0].LS_ME_Average == null ? "" : GetList[0].LS_ME_Average.ToString();
                            sv.LS_ME_Grade = GetList[0].LS_ME_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_ME_1 ,
                            items.LS_ME_2,  
                            items.LS_ME_3,
                            items.LS_ME_4,
                            items.LS_ME_5,
                            items.LS_ME_Total,
                            items.LS_ME_Average,
                            items.LS_ME_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridLS_MwthS(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.Term = GetList[0].Term;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Section = GetList[0].Section;
                            sv.LS_MwthS_1 = GetList[0].LS_MwthS_1 == null ? "" : GetList[0].LS_MwthS_1.ToString();
                            sv.LS_MwthS_2 = GetList[0].LS_MwthS_2 == null ? "" : GetList[0].LS_MwthS_2.ToString();
                            sv.LS_MwthS_3 = GetList[0].LS_MwthS_3 == null ? "" : GetList[0].LS_MwthS_3.ToString();
                            sv.LS_MwthS_4 = GetList[0].LS_MwthS_4 == null ? "" : GetList[0].LS_MwthS_4.ToString();
                            sv.LS_MwthS_5 = GetList[0].LS_MwthS_5 == null ? "" : GetList[0].LS_MwthS_5.ToString();
                            sv.EditRowId = sv.LS_SA_1 == "" ? 0 : sv.LS_SA_2 == "" ? 0 : sv.LS_MwthS_3 == "" ? 0 : sv.LS_MwthS_4 == "" ? 0 : sv.LS_MwthS_4 == "" ? 0 : 1;
                            sv.LS_MwthS_Total = GetList[0].LS_MwthS_Total == null ? "" : GetList[0].LS_MwthS_Total.ToString();
                            sv.LS_MwthS_Average = GetList[0].LS_MwthS_Average == null ? "" : GetList[0].LS_MwthS_Average.ToString();
                            sv.LS_MwthS_Grade = GetList[0].LS_MwthS_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.LS_MwthS_1 ,
                            items.LS_MwthS_2,  
                            items.LS_MwthS_3,
                            items.LS_MwthS_4,
                            items.LS_MwthS_5,
                            items.LS_MwthS_Total,
                            items.LS_MwthS_Average,
                            items.LS_MwthS_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult JqGridSciSkills(long RptRequestId, string campus, string grade, string section, string academicyear, string Term, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsView>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(Term)) criteria.Add("Term", Term);
                    Dictionary<long, IList<ReportCardCBSECo_Scholastic>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardCoSchWorkandEducationListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSECo_Scholastic> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsView sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.RptId = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Term = GetList[0].Term;
                            sv.Section = GetList[0].Section;
                            sv.SciSkills_1 = GetList[0].SciSkills_1 == null ? "" : GetList[0].SciSkills_1.ToString();
                            sv.SciSkills_2 = GetList[0].SciSkills_2 == null ? "" : GetList[0].SciSkills_2.ToString();
                            sv.SciSkills_3 = GetList[0].SciSkills_3 == null ? "" : GetList[0].SciSkills_3.ToString();
                            sv.SciSkills_4 = GetList[0].SciSkills_4 == null ? "" : GetList[0].SciSkills_4.ToString();
                            sv.SciSkills_5 = GetList[0].SciSkills_5 == null ? "" : GetList[0].SciSkills_5.ToString();
                            sv.SciSkills_6 = GetList[0].SciSkills_6 == null ? "" : GetList[0].SciSkills_6.ToString();
                            sv.SciSkills_7 = GetList[0].SciSkills_7 == null ? "" : GetList[0].SciSkills_7.ToString();
                            sv.SciSkills_8 = GetList[0].SciSkills_8 == null ? "" : GetList[0].SciSkills_8.ToString();
                            sv.SciSkills_9 = GetList[0].SciSkills_9 == null ? "" : GetList[0].SciSkills_9.ToString();
                            sv.SciSkills_10 = GetList[0].SciSkills_10 == null ? "" : GetList[0].SciSkills_10.ToString();
                            sv.EditRowId = sv.SciSkills_1 == "" ? 0 : sv.SciSkills_2 == "" ? 0 : sv.SciSkills_3 == "" ? 0 : sv.SciSkills_4 == "" ? 0 : sv.SciSkills_5 == "" ? 0 : sv.SciSkills_6 == "" ? 0 : sv.SciSkills_7 == "" ? 0 : sv.SciSkills_8 == "" ? 0 : sv.SciSkills_9 == "" ? 0 : sv.SciSkills_10 == "" ? 0 : 1;
                            sv.SciSkills_Total = GetList[0].SciSkills_Total == null ? "" : GetList[0].SciSkills_Total.ToString();
                            sv.SciSkills_Average = GetList[0].SciSkills_Average == null ? "" : GetList[0].SciSkills_Average.ToString();
                            sv.SciSkills_Grade = GetList[0].SciSkills_Grade;
                        }
                        else
                        {
                            sv.EditRowId = 0; sv.RptId = 0; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                            sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId; sv.Term = Term;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.AcademicYear,
                            items.Term,
                            items.SciSkills_1 ,
                            items.SciSkills_2,  
                            items.SciSkills_3,
                            items.SciSkills_4,
                            items.SciSkills_5,
                            items.SciSkills_6,
                            items.SciSkills_7,
                            items.SciSkills_8,  
                            items.SciSkills_9,  
                            items.SciSkills_10, 
                            items.SciSkills_Total,
                            items.SciSkills_Average,
                            items.SciSkills_Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        #region Life Skils
        public ActionResult SaveReportCardCBSELS_SA(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_SA_1 = Convert.ToDecimal(Co_Scholastic.LS_SA_1);
                    Co_ScholasticValue.LS_SA_2 = Convert.ToDecimal(Co_Scholastic.LS_SA_2);
                    Co_ScholasticValue.LS_SA_3 = Convert.ToDecimal(Co_Scholastic.LS_SA_3);
                    Co_ScholasticValue.LS_SA_4 = Convert.ToDecimal(Co_Scholastic.LS_SA_4);
                    Co_ScholasticValue.LS_SA_5 = Convert.ToDecimal(Co_Scholastic.LS_SA_5);
                    Co_ScholasticValue.LS_SA_Total = Co_ScholasticValue.LS_SA_1 + Co_ScholasticValue.LS_SA_2 + Co_ScholasticValue.LS_SA_3 + Co_ScholasticValue.LS_SA_4 + Co_ScholasticValue.LS_SA_5;
                    Co_ScholasticValue.LS_SA_Average = Convert.ToDecimal(Co_ScholasticValue.LS_SA_Total / 5);
                    Co_ScholasticValue.LS_SA_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_SA_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_SA_1 = Convert.ToDecimal(Co_Scholastic.LS_SA_1);
                    CoSchoVal.LS_SA_2 = Convert.ToDecimal(Co_Scholastic.LS_SA_2);
                    CoSchoVal.LS_SA_3 = Convert.ToDecimal(Co_Scholastic.LS_SA_3);
                    CoSchoVal.LS_SA_4 = Convert.ToDecimal(Co_Scholastic.LS_SA_4);
                    CoSchoVal.LS_SA_5 = Convert.ToDecimal(Co_Scholastic.LS_SA_5);
                    CoSchoVal.LS_SA_Total = CoSchoVal.LS_SA_1 + CoSchoVal.LS_SA_2 + CoSchoVal.LS_SA_3 + CoSchoVal.LS_SA_4 + CoSchoVal.LS_SA_5;
                    CoSchoVal.LS_SA_Average = Convert.ToDecimal(CoSchoVal.LS_SA_Total / 5);
                    CoSchoVal.LS_SA_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_SA_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_PS(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_PS_1 = Convert.ToDecimal(Co_Scholastic.LS_PS_1);
                    Co_ScholasticValue.LS_PS_2 = Convert.ToDecimal(Co_Scholastic.LS_PS_2);
                    Co_ScholasticValue.LS_PS_3 = Convert.ToDecimal(Co_Scholastic.LS_PS_3);
                    Co_ScholasticValue.LS_PS_4 = Convert.ToDecimal(Co_Scholastic.LS_PS_4);
                    Co_ScholasticValue.LS_PS_5 = Convert.ToDecimal(Co_Scholastic.LS_PS_5);
                    Co_ScholasticValue.LS_PS_Total = Co_ScholasticValue.LS_PS_1 + Co_ScholasticValue.LS_PS_2 + Co_ScholasticValue.LS_PS_3 + Co_ScholasticValue.LS_PS_4 + Co_ScholasticValue.LS_PS_5;
                    Co_ScholasticValue.LS_PS_Average = Convert.ToDecimal(Co_ScholasticValue.LS_PS_Total / 5);
                    Co_ScholasticValue.LS_PS_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_PS_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_PS_1 = Convert.ToDecimal(Co_Scholastic.LS_PS_1);
                    CoSchoVal.LS_PS_2 = Convert.ToDecimal(Co_Scholastic.LS_PS_2);
                    CoSchoVal.LS_PS_3 = Convert.ToDecimal(Co_Scholastic.LS_PS_3);
                    CoSchoVal.LS_PS_4 = Convert.ToDecimal(Co_Scholastic.LS_PS_4);
                    CoSchoVal.LS_PS_5 = Convert.ToDecimal(Co_Scholastic.LS_PS_5);
                    CoSchoVal.LS_PS_Total = CoSchoVal.LS_PS_1 + CoSchoVal.LS_PS_2 + CoSchoVal.LS_PS_3 + CoSchoVal.LS_PS_4 + CoSchoVal.LS_PS_5;
                    CoSchoVal.LS_PS_Average = Convert.ToDecimal(CoSchoVal.LS_PS_Total / 5);
                    CoSchoVal.LS_PS_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_PS_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_DM(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_DM_1 = Convert.ToDecimal(Co_Scholastic.LS_DM_1);
                    Co_ScholasticValue.LS_DM_2 = Convert.ToDecimal(Co_Scholastic.LS_DM_2);
                    Co_ScholasticValue.LS_DM_3 = Convert.ToDecimal(Co_Scholastic.LS_DM_3);
                    Co_ScholasticValue.LS_DM_4 = Convert.ToDecimal(Co_Scholastic.LS_DM_4);
                    Co_ScholasticValue.LS_DM_5 = Convert.ToDecimal(Co_Scholastic.LS_DM_5);
                    Co_ScholasticValue.LS_DM_Total = Co_ScholasticValue.LS_DM_1 + Co_ScholasticValue.LS_DM_2 + Co_ScholasticValue.LS_DM_3 + Co_ScholasticValue.LS_DM_4 + Co_ScholasticValue.LS_DM_5;
                    Co_ScholasticValue.LS_DM_Average = Convert.ToDecimal(Co_ScholasticValue.LS_DM_Total / 5);
                    Co_ScholasticValue.LS_DM_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_DM_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_DM_1 = Convert.ToDecimal(Co_Scholastic.LS_DM_1);
                    CoSchoVal.LS_DM_2 = Convert.ToDecimal(Co_Scholastic.LS_DM_2);
                    CoSchoVal.LS_DM_3 = Convert.ToDecimal(Co_Scholastic.LS_DM_3);
                    CoSchoVal.LS_DM_4 = Convert.ToDecimal(Co_Scholastic.LS_DM_4);
                    CoSchoVal.LS_DM_5 = Convert.ToDecimal(Co_Scholastic.LS_DM_5);
                    CoSchoVal.LS_DM_Total = CoSchoVal.LS_DM_1 + CoSchoVal.LS_DM_2 + CoSchoVal.LS_DM_3 + CoSchoVal.LS_DM_4 + CoSchoVal.LS_DM_5;
                    CoSchoVal.LS_DM_Average = Convert.ToDecimal(CoSchoVal.LS_DM_Total / 5);
                    CoSchoVal.LS_DM_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_DM_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_CriT(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_CriT_1 = Convert.ToDecimal(Co_Scholastic.LS_CriT_1);
                    Co_ScholasticValue.LS_CriT_2 = Convert.ToDecimal(Co_Scholastic.LS_CriT_2);
                    Co_ScholasticValue.LS_CriT_3 = Convert.ToDecimal(Co_Scholastic.LS_CriT_3);
                    Co_ScholasticValue.LS_CriT_4 = Convert.ToDecimal(Co_Scholastic.LS_CriT_4);
                    Co_ScholasticValue.LS_CriT_5 = Convert.ToDecimal(Co_Scholastic.LS_CriT_5);
                    Co_ScholasticValue.LS_CriT_Total = Co_ScholasticValue.LS_CriT_1 + Co_ScholasticValue.LS_CriT_2 + Co_ScholasticValue.LS_CriT_3 + Co_ScholasticValue.LS_CriT_4 + Co_ScholasticValue.LS_CriT_5;
                    Co_ScholasticValue.LS_CriT_Average = Convert.ToDecimal(Co_ScholasticValue.LS_CriT_Total / 5);
                    Co_ScholasticValue.LS_CriT_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_CriT_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_CriT_1 = Convert.ToDecimal(Co_Scholastic.LS_CriT_1);
                    CoSchoVal.LS_CriT_2 = Convert.ToDecimal(Co_Scholastic.LS_CriT_2);
                    CoSchoVal.LS_CriT_3 = Convert.ToDecimal(Co_Scholastic.LS_CriT_3);
                    CoSchoVal.LS_CriT_4 = Convert.ToDecimal(Co_Scholastic.LS_CriT_4);
                    CoSchoVal.LS_CriT_5 = Convert.ToDecimal(Co_Scholastic.LS_CriT_5);
                    CoSchoVal.LS_CriT_Total = CoSchoVal.LS_CriT_1 + CoSchoVal.LS_CriT_2 + CoSchoVal.LS_CriT_3 + CoSchoVal.LS_CriT_4 + CoSchoVal.LS_CriT_5;
                    CoSchoVal.LS_CriT_Average = Convert.ToDecimal(CoSchoVal.LS_CriT_Total / 5);
                    CoSchoVal.LS_CriT_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_CriT_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_CreT(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_CreT_1 = Convert.ToDecimal(Co_Scholastic.LS_CreT_1);
                    Co_ScholasticValue.LS_CreT_2 = Convert.ToDecimal(Co_Scholastic.LS_CreT_2);
                    Co_ScholasticValue.LS_CreT_3 = Convert.ToDecimal(Co_Scholastic.LS_CreT_3);
                    Co_ScholasticValue.LS_CreT_4 = Convert.ToDecimal(Co_Scholastic.LS_CreT_4);
                    Co_ScholasticValue.LS_CreT_5 = Convert.ToDecimal(Co_Scholastic.LS_CreT_5);
                    Co_ScholasticValue.LS_CreT_Total = Co_ScholasticValue.LS_CreT_1 + Co_ScholasticValue.LS_CreT_2 + Co_ScholasticValue.LS_CreT_3 + Co_ScholasticValue.LS_CreT_4 + Co_ScholasticValue.LS_CreT_5;
                    Co_ScholasticValue.LS_CreT_Average = Convert.ToDecimal(Co_ScholasticValue.LS_CreT_Total / 5);
                    Co_ScholasticValue.LS_CreT_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_CreT_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_CreT_1 = Convert.ToDecimal(Co_Scholastic.LS_CreT_1);
                    CoSchoVal.LS_CreT_2 = Convert.ToDecimal(Co_Scholastic.LS_CreT_2);
                    CoSchoVal.LS_CreT_3 = Convert.ToDecimal(Co_Scholastic.LS_CreT_3);
                    CoSchoVal.LS_CreT_4 = Convert.ToDecimal(Co_Scholastic.LS_CreT_4);
                    CoSchoVal.LS_CreT_5 = Convert.ToDecimal(Co_Scholastic.LS_CreT_5);
                    CoSchoVal.LS_CreT_Total = CoSchoVal.LS_CreT_1 + CoSchoVal.LS_CreT_2 + CoSchoVal.LS_CreT_3 + CoSchoVal.LS_CreT_4 + CoSchoVal.LS_CreT_5;
                    CoSchoVal.LS_CreT_Average = Convert.ToDecimal(CoSchoVal.LS_CreT_Total / 5);
                    CoSchoVal.LS_CreT_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_CreT_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_IR(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_IR_1 = Convert.ToDecimal(Co_Scholastic.LS_IR_1);
                    Co_ScholasticValue.LS_IR_2 = Convert.ToDecimal(Co_Scholastic.LS_IR_2);
                    Co_ScholasticValue.LS_IR_3 = Convert.ToDecimal(Co_Scholastic.LS_IR_3);
                    Co_ScholasticValue.LS_IR_4 = Convert.ToDecimal(Co_Scholastic.LS_IR_4);
                    Co_ScholasticValue.LS_IR_5 = Convert.ToDecimal(Co_Scholastic.LS_IR_5);
                    Co_ScholasticValue.LS_IR_Total = Co_ScholasticValue.LS_IR_1 + Co_ScholasticValue.LS_IR_2 + Co_ScholasticValue.LS_IR_3 + Co_ScholasticValue.LS_IR_4 + Co_ScholasticValue.LS_IR_5;
                    Co_ScholasticValue.LS_IR_Average = Convert.ToDecimal(Co_ScholasticValue.LS_IR_Total / 5);
                    Co_ScholasticValue.LS_IR_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_IR_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_IR_1 = Convert.ToDecimal(Co_Scholastic.LS_IR_1);
                    CoSchoVal.LS_IR_2 = Convert.ToDecimal(Co_Scholastic.LS_IR_2);
                    CoSchoVal.LS_IR_3 = Convert.ToDecimal(Co_Scholastic.LS_IR_3);
                    CoSchoVal.LS_IR_4 = Convert.ToDecimal(Co_Scholastic.LS_IR_4);
                    CoSchoVal.LS_IR_5 = Convert.ToDecimal(Co_Scholastic.LS_IR_5);
                    CoSchoVal.LS_IR_Total = CoSchoVal.LS_IR_1 + CoSchoVal.LS_IR_2 + CoSchoVal.LS_IR_3 + CoSchoVal.LS_IR_4 + CoSchoVal.LS_IR_5;
                    CoSchoVal.LS_IR_Average = Convert.ToDecimal(CoSchoVal.LS_IR_Total / 5);
                    CoSchoVal.LS_IR_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_IR_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_EC(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_EC_1 = Convert.ToDecimal(Co_Scholastic.LS_EC_1);
                    Co_ScholasticValue.LS_EC_2 = Convert.ToDecimal(Co_Scholastic.LS_EC_2);
                    Co_ScholasticValue.LS_EC_3 = Convert.ToDecimal(Co_Scholastic.LS_EC_3);
                    Co_ScholasticValue.LS_EC_4 = Convert.ToDecimal(Co_Scholastic.LS_EC_4);
                    Co_ScholasticValue.LS_EC_5 = Convert.ToDecimal(Co_Scholastic.LS_EC_5);
                    Co_ScholasticValue.LS_EC_Total = Co_ScholasticValue.LS_EC_1 + Co_ScholasticValue.LS_EC_2 + Co_ScholasticValue.LS_EC_3 + Co_ScholasticValue.LS_EC_4 + Co_ScholasticValue.LS_EC_5;
                    Co_ScholasticValue.LS_EC_Average = Convert.ToDecimal(Co_ScholasticValue.LS_EC_Total / 5);
                    Co_ScholasticValue.LS_EC_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_EC_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_EC_1 = Convert.ToDecimal(Co_Scholastic.LS_EC_1);
                    CoSchoVal.LS_EC_2 = Convert.ToDecimal(Co_Scholastic.LS_EC_2);
                    CoSchoVal.LS_EC_3 = Convert.ToDecimal(Co_Scholastic.LS_EC_3);
                    CoSchoVal.LS_EC_4 = Convert.ToDecimal(Co_Scholastic.LS_EC_4);
                    CoSchoVal.LS_EC_5 = Convert.ToDecimal(Co_Scholastic.LS_EC_5);
                    CoSchoVal.LS_EC_Total = CoSchoVal.LS_EC_1 + CoSchoVal.LS_EC_2 + CoSchoVal.LS_EC_3 + CoSchoVal.LS_EC_4 + CoSchoVal.LS_EC_5;
                    CoSchoVal.LS_EC_Average = Convert.ToDecimal(CoSchoVal.LS_EC_Total / 5);
                    CoSchoVal.LS_EC_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_EC_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_Emp(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_Emp_1 = Convert.ToDecimal(Co_Scholastic.LS_Emp_1);
                    Co_ScholasticValue.LS_Emp_2 = Convert.ToDecimal(Co_Scholastic.LS_Emp_2);
                    Co_ScholasticValue.LS_Emp_3 = Convert.ToDecimal(Co_Scholastic.LS_Emp_3);
                    Co_ScholasticValue.LS_Emp_4 = Convert.ToDecimal(Co_Scholastic.LS_Emp_4);
                    Co_ScholasticValue.LS_Emp_5 = Convert.ToDecimal(Co_Scholastic.LS_Emp_5);
                    Co_ScholasticValue.LS_Emp_Total = Co_ScholasticValue.LS_Emp_1 + Co_ScholasticValue.LS_Emp_2 + Co_ScholasticValue.LS_Emp_3 + Co_ScholasticValue.LS_Emp_4 + Co_ScholasticValue.LS_Emp_5;
                    Co_ScholasticValue.LS_Emp_Average = Convert.ToDecimal(Co_ScholasticValue.LS_Emp_Total / 5);
                    Co_ScholasticValue.LS_Emp_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_Emp_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_Emp_1 = Convert.ToDecimal(Co_Scholastic.LS_Emp_1);
                    CoSchoVal.LS_Emp_2 = Convert.ToDecimal(Co_Scholastic.LS_Emp_2);
                    CoSchoVal.LS_Emp_3 = Convert.ToDecimal(Co_Scholastic.LS_Emp_3);
                    CoSchoVal.LS_Emp_4 = Convert.ToDecimal(Co_Scholastic.LS_Emp_4);
                    CoSchoVal.LS_Emp_5 = Convert.ToDecimal(Co_Scholastic.LS_Emp_5);
                    CoSchoVal.LS_Emp_Total = CoSchoVal.LS_Emp_1 + CoSchoVal.LS_Emp_2 + CoSchoVal.LS_Emp_3 + CoSchoVal.LS_Emp_4 + CoSchoVal.LS_Emp_5;
                    CoSchoVal.LS_Emp_Average = Convert.ToDecimal(CoSchoVal.LS_Emp_Total / 5);
                    CoSchoVal.LS_Emp_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_Emp_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_ME(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_ME_1 = Convert.ToDecimal(Co_Scholastic.LS_ME_1);
                    Co_ScholasticValue.LS_ME_2 = Convert.ToDecimal(Co_Scholastic.LS_ME_2);
                    Co_ScholasticValue.LS_ME_3 = Convert.ToDecimal(Co_Scholastic.LS_ME_3);
                    Co_ScholasticValue.LS_ME_4 = Convert.ToDecimal(Co_Scholastic.LS_ME_4);
                    Co_ScholasticValue.LS_ME_5 = Convert.ToDecimal(Co_Scholastic.LS_ME_5);
                    Co_ScholasticValue.LS_ME_Total = Co_ScholasticValue.LS_ME_1 + Co_ScholasticValue.LS_ME_2 + Co_ScholasticValue.LS_ME_3 + Co_ScholasticValue.LS_ME_4 + Co_ScholasticValue.LS_ME_5;
                    Co_ScholasticValue.LS_ME_Average = Convert.ToDecimal(Co_ScholasticValue.LS_ME_Total / 5);
                    Co_ScholasticValue.LS_ME_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_ME_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_ME_1 = Convert.ToDecimal(Co_Scholastic.LS_ME_1);
                    CoSchoVal.LS_ME_2 = Convert.ToDecimal(Co_Scholastic.LS_ME_2);
                    CoSchoVal.LS_ME_3 = Convert.ToDecimal(Co_Scholastic.LS_ME_3);
                    CoSchoVal.LS_ME_4 = Convert.ToDecimal(Co_Scholastic.LS_ME_4);
                    CoSchoVal.LS_ME_5 = Convert.ToDecimal(Co_Scholastic.LS_ME_5);
                    CoSchoVal.LS_ME_Total = CoSchoVal.LS_ME_1 + CoSchoVal.LS_ME_2 + CoSchoVal.LS_ME_3 + CoSchoVal.LS_ME_4 + CoSchoVal.LS_ME_5;
                    CoSchoVal.LS_ME_Average = Convert.ToDecimal(CoSchoVal.LS_ME_Total / 5);
                    CoSchoVal.LS_ME_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_ME_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSELS_MwthS(ReportCardCBSECo_ScholasticLifeSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    //ReportCardCBSECo_Scholastic CoSchoValABC = new ReportCardCBSECo_Scholastic();
                    Co_ScholasticValue.LS_MwthS_1 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_1);
                    Co_ScholasticValue.LS_MwthS_2 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_2);
                    Co_ScholasticValue.LS_MwthS_3 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_3);
                    Co_ScholasticValue.LS_MwthS_4 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_4);
                    Co_ScholasticValue.LS_MwthS_5 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_5);
                    Co_ScholasticValue.LS_MwthS_Total = Co_ScholasticValue.LS_MwthS_1 + Co_ScholasticValue.LS_MwthS_2 + Co_ScholasticValue.LS_MwthS_3 + Co_ScholasticValue.LS_MwthS_4 + Co_ScholasticValue.LS_MwthS_5;
                    Co_ScholasticValue.LS_MwthS_Average = Convert.ToDecimal(Co_ScholasticValue.LS_MwthS_Total / 5);
                    Co_ScholasticValue.LS_MwthS_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LS_MwthS_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LS_MwthS_1 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_1);
                    CoSchoVal.LS_MwthS_2 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_2);
                    CoSchoVal.LS_MwthS_3 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_3);
                    CoSchoVal.LS_MwthS_4 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_4);
                    CoSchoVal.LS_MwthS_5 = Convert.ToDecimal(Co_Scholastic.LS_MwthS_5);
                    CoSchoVal.LS_MwthS_Total = CoSchoVal.LS_MwthS_1 + CoSchoVal.LS_MwthS_2 + CoSchoVal.LS_MwthS_3 + CoSchoVal.LS_MwthS_4 + CoSchoVal.LS_MwthS_5;
                    CoSchoVal.LS_MwthS_Average = Convert.ToDecimal(CoSchoVal.LS_MwthS_Total / 5);
                    CoSchoVal.LS_MwthS_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LS_MwthS_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region Visual and Arts
        public ActionResult SaveReportCardCBSEVisualArts(ReportCardCBSECo_ScholasticVAndPA Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {

                    Co_ScholasticValue.VA_1 = Convert.ToDecimal(Co_Scholastic.VA_1);
                    Co_ScholasticValue.VA_2 = Convert.ToDecimal(Co_Scholastic.VA_2);
                    Co_ScholasticValue.VA_3 = Convert.ToDecimal(Co_Scholastic.VA_3);
                    Co_ScholasticValue.VA_4 = Convert.ToDecimal(Co_Scholastic.VA_4);
                    Co_ScholasticValue.VA_5 = Convert.ToDecimal(Co_Scholastic.VA_5);
                    Co_ScholasticValue.VA_6 = Convert.ToDecimal(Co_Scholastic.VA_6);
                    Co_ScholasticValue.VA_7 = Convert.ToDecimal(Co_Scholastic.VA_7);
                    Co_ScholasticValue.VA_8 = Convert.ToDecimal(Co_Scholastic.VA_8);
                    Co_ScholasticValue.VA_9 = Convert.ToDecimal(Co_Scholastic.VA_9);
                    Co_ScholasticValue.VA_10 = Convert.ToDecimal(Co_Scholastic.VA_10);
                    Co_ScholasticValue.VA_Total = Co_ScholasticValue.VA_1 + Co_ScholasticValue.VA_2 + Co_ScholasticValue.VA_3 + Co_ScholasticValue.VA_4 + Co_ScholasticValue.VA_5 + Co_ScholasticValue.VA_6 + Co_ScholasticValue.VA_7 + Co_ScholasticValue.VA_8 + Co_ScholasticValue.VA_9 + Co_ScholasticValue.VA_10;
                    Co_ScholasticValue.VA_Average = Convert.ToDecimal(Co_ScholasticValue.VA_Total / 10);
                    Co_ScholasticValue.VA_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.VA_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.VA_1 = Convert.ToDecimal(Co_Scholastic.VA_1);
                    CoSchoVal.VA_2 = Convert.ToDecimal(Co_Scholastic.VA_2);
                    CoSchoVal.VA_3 = Convert.ToDecimal(Co_Scholastic.VA_3);
                    CoSchoVal.VA_4 = Convert.ToDecimal(Co_Scholastic.VA_4);
                    CoSchoVal.VA_5 = Convert.ToDecimal(Co_Scholastic.VA_5);
                    CoSchoVal.VA_6 = Convert.ToDecimal(Co_Scholastic.VA_6);
                    CoSchoVal.VA_7 = Convert.ToDecimal(Co_Scholastic.VA_7);
                    CoSchoVal.VA_8 = Convert.ToDecimal(Co_Scholastic.VA_8);
                    CoSchoVal.VA_9 = Convert.ToDecimal(Co_Scholastic.VA_9);
                    CoSchoVal.VA_10 = Convert.ToDecimal(Co_Scholastic.VA_10);
                    CoSchoVal.VA_Total = CoSchoVal.VA_1 + CoSchoVal.VA_2 + CoSchoVal.VA_3 + CoSchoVal.VA_4 + CoSchoVal.VA_5 + CoSchoVal.VA_6 + CoSchoVal.VA_7 + CoSchoVal.VA_8 + CoSchoVal.VA_9 + CoSchoVal.VA_10;
                    CoSchoVal.VA_Average = Convert.ToDecimal(CoSchoVal.VA_Total / 10);
                    CoSchoVal.VA_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.VA_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSEPerformingArts(ReportCardCBSECo_Scholastic Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {

                    Co_ScholasticValue.PA_1 = Convert.ToDecimal(Co_Scholastic.PA_1);
                    Co_ScholasticValue.PA_2 = Convert.ToDecimal(Co_Scholastic.PA_2);
                    Co_ScholasticValue.PA_3 = Convert.ToDecimal(Co_Scholastic.PA_3);
                    Co_ScholasticValue.PA_4 = Convert.ToDecimal(Co_Scholastic.PA_4);
                    Co_ScholasticValue.PA_5 = Convert.ToDecimal(Co_Scholastic.PA_5);
                    Co_ScholasticValue.PA_6 = Convert.ToDecimal(Co_Scholastic.PA_6);
                    Co_ScholasticValue.PA_7 = Convert.ToDecimal(Co_Scholastic.PA_7);
                    Co_ScholasticValue.PA_8 = Convert.ToDecimal(Co_Scholastic.PA_8);
                    Co_ScholasticValue.PA_9 = Convert.ToDecimal(Co_Scholastic.PA_9);
                    Co_ScholasticValue.PA_10 = Convert.ToDecimal(Co_Scholastic.PA_10);
                    Co_ScholasticValue.PA_Total = Co_ScholasticValue.PA_1 + Co_ScholasticValue.PA_2 + Co_ScholasticValue.PA_3 + Co_ScholasticValue.PA_4 + Co_ScholasticValue.PA_5 + Co_ScholasticValue.PA_6 + Co_ScholasticValue.PA_7 + Co_ScholasticValue.PA_8 + Co_ScholasticValue.PA_9 + Co_ScholasticValue.PA_10;
                    Co_ScholasticValue.PA_Average = Convert.ToDecimal(Co_ScholasticValue.PA_Total / 10);
                    Co_ScholasticValue.PA_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.PA_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.PA_1 = Convert.ToDecimal(Co_Scholastic.PA_1);
                    CoSchoVal.PA_2 = Convert.ToDecimal(Co_Scholastic.PA_2);
                    CoSchoVal.PA_3 = Convert.ToDecimal(Co_Scholastic.PA_3);
                    CoSchoVal.PA_4 = Convert.ToDecimal(Co_Scholastic.PA_4);
                    CoSchoVal.PA_5 = Convert.ToDecimal(Co_Scholastic.PA_5);
                    CoSchoVal.PA_6 = Convert.ToDecimal(Co_Scholastic.PA_6);
                    CoSchoVal.PA_7 = Convert.ToDecimal(Co_Scholastic.PA_7);
                    CoSchoVal.PA_8 = Convert.ToDecimal(Co_Scholastic.PA_8);
                    CoSchoVal.PA_9 = Convert.ToDecimal(Co_Scholastic.PA_9);
                    CoSchoVal.PA_10 = Convert.ToDecimal(Co_Scholastic.PA_10);
                    CoSchoVal.PA_Total = CoSchoVal.PA_1 + CoSchoVal.PA_2 + CoSchoVal.PA_3 + CoSchoVal.PA_4 + CoSchoVal.PA_5 + CoSchoVal.PA_6 + CoSchoVal.PA_7 + CoSchoVal.PA_8 + CoSchoVal.VA_9 + CoSchoVal.VA_10;
                    CoSchoVal.PA_Average = Convert.ToDecimal(CoSchoVal.PA_Total / 10);
                    CoSchoVal.PA_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.PA_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region Values
        public ActionResult SaveReportCardCBSETOABC(ReportCardCBSECo_Sch_Values Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.VS_ToABC_1 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_1);
                    Co_ScholasticValue.VS_ToABC_2 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_2);
                    Co_ScholasticValue.VS_ToABC_3 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_3);
                    Co_ScholasticValue.VS_ToABC_4 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_4);
                    Co_ScholasticValue.VS_ToABC_Total = Co_ScholasticValue.VS_ToABC_1 + Co_ScholasticValue.VS_ToABC_2 + Co_ScholasticValue.VS_ToABC_3 + Co_ScholasticValue.VS_ToABC_4;
                    Co_ScholasticValue.VS_ToABC_Average = Convert.ToDecimal(Co_ScholasticValue.VS_ToABC_Total / 4);
                    Co_ScholasticValue.VS_ToABC_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.VS_ToABC_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.VS_ToABC_1 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_1);
                    CoSchoVal.VS_ToABC_2 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_2);
                    CoSchoVal.VS_ToABC_3 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_3);
                    CoSchoVal.VS_ToABC_4 = Convert.ToDecimal(Co_Scholastic.VS_ToABC_4);
                    CoSchoVal.VS_ToABC_Total = CoSchoVal.VS_ToABC_1 + CoSchoVal.VS_ToABC_2 + CoSchoVal.VS_ToABC_3 + CoSchoVal.VS_ToABC_4;
                    CoSchoVal.VS_ToABC_Average = Convert.ToDecimal(CoSchoVal.VS_ToABC_Total / 4);
                    CoSchoVal.VS_ToABC_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.VS_ToABC_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        public ActionResult SaveReportCardCBSETOCFNI(ReportCardCBSECo_Sch_Values Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.VS_ToCFNI_1 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_1);
                    Co_ScholasticValue.VS_ToCFNI_2 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_2);
                    Co_ScholasticValue.VS_ToCFNI_3 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_3);
                    Co_ScholasticValue.VS_ToCFNI_4 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_4);
                    Co_ScholasticValue.VS_ToCFNI_Total = Co_ScholasticValue.VS_ToCFNI_1 + Co_ScholasticValue.VS_ToCFNI_2 + Co_ScholasticValue.VS_ToCFNI_3 + Co_ScholasticValue.VS_ToCFNI_4;
                    Co_ScholasticValue.VS_ToCFNI_Average = Convert.ToDecimal(Co_ScholasticValue.VS_ToCFNI_Total / 4);
                    Co_ScholasticValue.VS_ToCFNI_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.VS_ToCFNI_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.VS_ToCFNI_1 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_1);
                    CoSchoVal.VS_ToCFNI_2 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_2);
                    CoSchoVal.VS_ToCFNI_3 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_3);
                    CoSchoVal.VS_ToCFNI_4 = Convert.ToDecimal(Co_Scholastic.VS_ToCFNI_4);
                    CoSchoVal.VS_ToCFNI_Total = CoSchoVal.VS_ToCFNI_1 + CoSchoVal.VS_ToCFNI_2 + CoSchoVal.VS_ToCFNI_3 + CoSchoVal.VS_ToCFNI_4;
                    CoSchoVal.VS_ToCFNI_Average = Convert.ToDecimal(CoSchoVal.VS_ToCFNI_Total / 4);
                    CoSchoVal.VS_ToCFNI_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.VS_ToCFNI_Average), "CoScholastic");
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        public ActionResult SaveReportCardCBSETOUPSUI(ReportCardCBSECo_Sch_Values Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.VS_ToUPSUI_1 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_1);
                    Co_ScholasticValue.VS_ToUPSUI_2 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_2);
                    Co_ScholasticValue.VS_ToUPSUI_3 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_3);
                    Co_ScholasticValue.VS_ToUPSUI_4 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_4);
                    Co_ScholasticValue.VS_ToUPSUI_Total = Co_ScholasticValue.VS_ToUPSUI_1 + Co_ScholasticValue.VS_ToUPSUI_2 + Co_ScholasticValue.VS_ToUPSUI_3 + Co_ScholasticValue.VS_ToUPSUI_4;
                    Co_ScholasticValue.VS_ToUPSUI_Average = Convert.ToDecimal(Co_ScholasticValue.VS_ToUPSUI_Total / 4);
                    Co_ScholasticValue.VS_ToUPSUI_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.VS_ToUPSUI_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.VS_ToUPSUI_1 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_1);
                    CoSchoVal.VS_ToUPSUI_2 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_2);
                    CoSchoVal.VS_ToUPSUI_3 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_3);
                    CoSchoVal.VS_ToUPSUI_4 = Convert.ToDecimal(Co_Scholastic.VS_ToUPSUI_4);
                    CoSchoVal.VS_ToUPSUI_Total = CoSchoVal.VS_ToUPSUI_1 + CoSchoVal.VS_ToUPSUI_2 + CoSchoVal.VS_ToUPSUI_3 + CoSchoVal.VS_ToUPSUI_4;
                    CoSchoVal.VS_ToUPSUI_Average = Convert.ToDecimal(CoSchoVal.VS_ToUPSUI_Total / 4);
                    CoSchoVal.VS_ToUPSUI_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.VS_ToUPSUI_Average), "CoScholastic");
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        public ActionResult SaveReportCardCBSETORNSWCU(ReportCardCBSECo_Sch_Values Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.VS_ToRNSWCU_1 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_1);
                    Co_ScholasticValue.VS_ToRNSWCU_2 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_2);
                    Co_ScholasticValue.VS_ToRNSWCU_3 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_3);
                    Co_ScholasticValue.VS_ToRNSWCU_4 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_4);
                    Co_ScholasticValue.VS_ToRNSWCU_Total = Co_ScholasticValue.VS_ToRNSWCU_1 + Co_ScholasticValue.VS_ToRNSWCU_2 + Co_ScholasticValue.VS_ToRNSWCU_3 + Co_ScholasticValue.VS_ToRNSWCU_4;
                    Co_ScholasticValue.VS_ToRNSWCU_Average = Convert.ToDecimal(Co_ScholasticValue.VS_ToRNSWCU_Total / 4);
                    Co_ScholasticValue.VS_ToRNSWCU_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.VS_ToRNSWCU_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.VS_ToRNSWCU_1 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_1);
                    CoSchoVal.VS_ToRNSWCU_2 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_2);
                    CoSchoVal.VS_ToRNSWCU_3 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_3);
                    CoSchoVal.VS_ToRNSWCU_4 = Convert.ToDecimal(Co_Scholastic.VS_ToRNSWCU_4);
                    CoSchoVal.VS_ToRNSWCU_Total = CoSchoVal.VS_ToRNSWCU_1 + CoSchoVal.VS_ToRNSWCU_2 + CoSchoVal.VS_ToRNSWCU_3 + CoSchoVal.VS_ToRNSWCU_4;
                    CoSchoVal.VS_ToRNSWCU_Average = Convert.ToDecimal(CoSchoVal.VS_ToRNSWCU_Total / 4);
                    CoSchoVal.VS_ToRNSWCU_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.VS_ToRNSWCU_Average), "CoScholastic");
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        public ActionResult SaveReportCardCBSETOPHUB(ReportCardCBSECo_Sch_Values Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.VS_ToPHUB_1 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_1);
                    Co_ScholasticValue.VS_ToPHUB_2 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_2);
                    Co_ScholasticValue.VS_ToPHUB_3 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_3);
                    Co_ScholasticValue.VS_ToPHUB_4 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_4);
                    Co_ScholasticValue.VS_ToPHUB_Total = Co_ScholasticValue.VS_ToPHUB_1 + Co_ScholasticValue.VS_ToPHUB_2 + Co_ScholasticValue.VS_ToPHUB_3 + Co_ScholasticValue.VS_ToPHUB_4;
                    Co_ScholasticValue.VS_ToPHUB_Average = Convert.ToDecimal(Co_ScholasticValue.VS_ToPHUB_Total / 4);
                    Co_ScholasticValue.VS_ToPHUB_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.VS_ToPHUB_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.VS_ToPHUB_1 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_1);
                    CoSchoVal.VS_ToPHUB_2 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_2);
                    CoSchoVal.VS_ToPHUB_3 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_3);
                    CoSchoVal.VS_ToPHUB_4 = Convert.ToDecimal(Co_Scholastic.VS_ToPHUB_4);
                    CoSchoVal.VS_ToPHUB_Total = CoSchoVal.VS_ToPHUB_1 + CoSchoVal.VS_ToPHUB_2 + CoSchoVal.VS_ToPHUB_3 + CoSchoVal.VS_ToPHUB_4;
                    CoSchoVal.VS_ToPHUB_Average = Convert.ToDecimal(CoSchoVal.VS_ToPHUB_Total / 4);
                    CoSchoVal.VS_ToPHUB_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.VS_ToPHUB_Average), "CoScholastic");
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region Health And Pet
        public ActionResult SaveReportCardCBSEHealthAndPet(ReportCardCBSECo_Sch_HealthAndPet Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.HPET_1 = Convert.ToDecimal(Co_Scholastic.HPET_1);
                    Co_ScholasticValue.HPET_2 = Convert.ToDecimal(Co_Scholastic.HPET_2);
                    Co_ScholasticValue.HPET_3 = Convert.ToDecimal(Co_Scholastic.HPET_3);
                    Co_ScholasticValue.HPET_4 = Convert.ToDecimal(Co_Scholastic.HPET_4);
                    Co_ScholasticValue.HPET_5 = Convert.ToDecimal(Co_Scholastic.HPET_5);
                    Co_ScholasticValue.HPET_6 = Convert.ToDecimal(Co_Scholastic.HPET_6);
                    Co_ScholasticValue.HPET_7 = Convert.ToDecimal(Co_Scholastic.HPET_7);
                    Co_ScholasticValue.HPET_8 = Convert.ToDecimal(Co_Scholastic.HPET_8);
                    Co_ScholasticValue.HPET_9 = Convert.ToDecimal(Co_Scholastic.HPET_9);
                    Co_ScholasticValue.HPET_10 = Convert.ToDecimal(Co_Scholastic.HPET_10);
                    Co_ScholasticValue.HPET_Total = Co_ScholasticValue.HPET_1 + Co_ScholasticValue.HPET_2 + Co_ScholasticValue.HPET_3 + Co_ScholasticValue.HPET_4 + Co_ScholasticValue.HPET_5 + Co_ScholasticValue.HPET_6 + Co_ScholasticValue.HPET_7 + Co_ScholasticValue.HPET_8 + Co_ScholasticValue.HPET_9 + Co_ScholasticValue.HPET_10;
                    Co_ScholasticValue.HPET_Average = Convert.ToDecimal(Co_ScholasticValue.HPET_Total / 10);
                    Co_ScholasticValue.HPET_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.HPET_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.HPET_1 = Convert.ToDecimal(Co_Scholastic.HPET_1);
                    CoSchoVal.HPET_2 = Convert.ToDecimal(Co_Scholastic.HPET_2);
                    CoSchoVal.HPET_3 = Convert.ToDecimal(Co_Scholastic.HPET_3);
                    CoSchoVal.HPET_4 = Convert.ToDecimal(Co_Scholastic.HPET_4);
                    CoSchoVal.HPET_5 = Convert.ToDecimal(Co_Scholastic.HPET_5);
                    CoSchoVal.HPET_6 = Convert.ToDecimal(Co_Scholastic.HPET_6);
                    CoSchoVal.HPET_7 = Convert.ToDecimal(Co_Scholastic.HPET_7);
                    CoSchoVal.HPET_8 = Convert.ToDecimal(Co_Scholastic.HPET_8);
                    CoSchoVal.HPET_9 = Convert.ToDecimal(Co_Scholastic.HPET_9);
                    CoSchoVal.HPET_10 = Convert.ToDecimal(Co_Scholastic.HPET_10);
                    CoSchoVal.HPET_Total = CoSchoVal.HPET_1 + CoSchoVal.HPET_2 + CoSchoVal.HPET_3 + CoSchoVal.HPET_4 + CoSchoVal.HPET_5 + CoSchoVal.HPET_6 + CoSchoVal.HPET_7 + CoSchoVal.HPET_8 + CoSchoVal.HPET_9 + CoSchoVal.HPET_10;
                    CoSchoVal.HPET_Average = Convert.ToDecimal(CoSchoVal.HPET_Total / 10);
                    CoSchoVal.HPET_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.HPET_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region ICT
        public ActionResult SaveReportCardCBSEICT(ReportCardCBSECo_Sch_ICT Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.ICT_1 = Convert.ToDecimal(Co_Scholastic.ICT_1);
                    Co_ScholasticValue.ICT_2 = Convert.ToDecimal(Co_Scholastic.ICT_2);
                    Co_ScholasticValue.ICT_3 = Convert.ToDecimal(Co_Scholastic.ICT_3);
                    Co_ScholasticValue.ICT_4 = Convert.ToDecimal(Co_Scholastic.ICT_4);
                    Co_ScholasticValue.ICT_5 = Convert.ToDecimal(Co_Scholastic.ICT_5);
                    Co_ScholasticValue.ICT_6 = Convert.ToDecimal(Co_Scholastic.ICT_6);
                    Co_ScholasticValue.ICT_7 = Convert.ToDecimal(Co_Scholastic.ICT_7);
                    Co_ScholasticValue.ICT_8 = Convert.ToDecimal(Co_Scholastic.ICT_8);
                    Co_ScholasticValue.ICT_9 = Convert.ToDecimal(Co_Scholastic.ICT_9);
                    Co_ScholasticValue.ICT_10 = Convert.ToDecimal(Co_Scholastic.ICT_10);
                    Co_ScholasticValue.ICT_Total = Co_ScholasticValue.ICT_1 + Co_ScholasticValue.ICT_2 + Co_ScholasticValue.ICT_3 + Co_ScholasticValue.ICT_4 + Co_ScholasticValue.ICT_5 + Co_ScholasticValue.ICT_6 + Co_ScholasticValue.ICT_7 + Co_ScholasticValue.ICT_8 + Co_ScholasticValue.ICT_9 + Co_ScholasticValue.ICT_10;
                    Co_ScholasticValue.ICT_Average = Convert.ToDecimal(Co_ScholasticValue.ICT_Total / 10);
                    Co_ScholasticValue.ICT_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.ICT_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.ICT_1 = Convert.ToDecimal(Co_Scholastic.ICT_1);
                    CoSchoVal.ICT_2 = Convert.ToDecimal(Co_Scholastic.ICT_2);
                    CoSchoVal.ICT_3 = Convert.ToDecimal(Co_Scholastic.ICT_3);
                    CoSchoVal.ICT_4 = Convert.ToDecimal(Co_Scholastic.ICT_4);
                    CoSchoVal.ICT_5 = Convert.ToDecimal(Co_Scholastic.ICT_5);
                    CoSchoVal.ICT_6 = Convert.ToDecimal(Co_Scholastic.ICT_6);
                    CoSchoVal.ICT_7 = Convert.ToDecimal(Co_Scholastic.ICT_7);
                    CoSchoVal.ICT_8 = Convert.ToDecimal(Co_Scholastic.ICT_8);
                    CoSchoVal.ICT_9 = Convert.ToDecimal(Co_Scholastic.ICT_9);
                    CoSchoVal.ICT_10 = Convert.ToDecimal(Co_Scholastic.ICT_10);
                    CoSchoVal.ICT_Total = CoSchoVal.ICT_1 + CoSchoVal.ICT_2 + CoSchoVal.ICT_3 + CoSchoVal.ICT_4 + CoSchoVal.ICT_5 + CoSchoVal.ICT_6 + CoSchoVal.ICT_7 + CoSchoVal.ICT_8 + CoSchoVal.ICT_9 + CoSchoVal.ICT_10;
                    CoSchoVal.ICT_Average = Convert.ToDecimal(CoSchoVal.ICT_Total / 10);
                    CoSchoVal.ICT_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.ICT_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region LitandCreSkill
        public ActionResult SaveReportCardCBSELitandCreSkill(ReportCardCBSECo_Sch_LitAndSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.LndCS_1 = Convert.ToDecimal(Co_Scholastic.LndCS_1);
                    Co_ScholasticValue.LndCS_2 = Convert.ToDecimal(Co_Scholastic.LndCS_2);
                    Co_ScholasticValue.LndCS_3 = Convert.ToDecimal(Co_Scholastic.LndCS_3);
                    Co_ScholasticValue.LndCS_4 = Convert.ToDecimal(Co_Scholastic.LndCS_4);
                    Co_ScholasticValue.LndCS_5 = Convert.ToDecimal(Co_Scholastic.LndCS_5);
                    Co_ScholasticValue.LndCS_6 = Convert.ToDecimal(Co_Scholastic.LndCS_6);
                    Co_ScholasticValue.LndCS_7 = Convert.ToDecimal(Co_Scholastic.LndCS_7);
                    Co_ScholasticValue.LndCS_8 = Convert.ToDecimal(Co_Scholastic.LndCS_8);
                    Co_ScholasticValue.LndCS_9 = Convert.ToDecimal(Co_Scholastic.LndCS_9);
                    Co_ScholasticValue.LndCS_10 = Convert.ToDecimal(Co_Scholastic.LndCS_10);
                    Co_ScholasticValue.LndCS_Total = Co_ScholasticValue.LndCS_1 + Co_ScholasticValue.LndCS_2 + Co_ScholasticValue.LndCS_3 + Co_ScholasticValue.LndCS_4 + Co_ScholasticValue.LndCS_5 + Co_ScholasticValue.LndCS_6 + Co_ScholasticValue.LndCS_7 + Co_ScholasticValue.LndCS_8 + Co_ScholasticValue.LndCS_9 + Co_ScholasticValue.LndCS_10;
                    Co_ScholasticValue.LndCS_Average = Convert.ToDecimal(Co_ScholasticValue.LndCS_Total / 10);
                    Co_ScholasticValue.LndCS_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.LndCS_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.LndCS_1 = Convert.ToDecimal(Co_Scholastic.LndCS_1);
                    CoSchoVal.LndCS_2 = Convert.ToDecimal(Co_Scholastic.LndCS_2);
                    CoSchoVal.LndCS_3 = Convert.ToDecimal(Co_Scholastic.LndCS_3);
                    CoSchoVal.LndCS_4 = Convert.ToDecimal(Co_Scholastic.LndCS_4);
                    CoSchoVal.LndCS_5 = Convert.ToDecimal(Co_Scholastic.LndCS_5);
                    CoSchoVal.LndCS_6 = Convert.ToDecimal(Co_Scholastic.LndCS_6);
                    CoSchoVal.LndCS_7 = Convert.ToDecimal(Co_Scholastic.LndCS_7);
                    CoSchoVal.LndCS_8 = Convert.ToDecimal(Co_Scholastic.LndCS_8);
                    CoSchoVal.LndCS_9 = Convert.ToDecimal(Co_Scholastic.LndCS_9);
                    CoSchoVal.LndCS_10 = Convert.ToDecimal(Co_Scholastic.LndCS_10);
                    CoSchoVal.LndCS_Total = CoSchoVal.LndCS_1 + CoSchoVal.LndCS_2 + CoSchoVal.LndCS_3 + CoSchoVal.LndCS_4 + CoSchoVal.LndCS_5 + CoSchoVal.LndCS_6 + CoSchoVal.LndCS_7 + CoSchoVal.LndCS_8 + CoSchoVal.LndCS_9 + CoSchoVal.LndCS_10;
                    CoSchoVal.LndCS_Average = Convert.ToDecimal(CoSchoVal.LndCS_Total / 10);
                    CoSchoVal.LndCS_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.LndCS_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region Attitude
        public ActionResult SaveReportCardCBSEAT_AToT(ReportCardCBSECo_Sch_Attitude Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.AT_AToT_1 = Convert.ToDecimal(Co_Scholastic.AT_AToT_1);
                    Co_ScholasticValue.AT_AToT_2 = Convert.ToDecimal(Co_Scholastic.AT_AToT_2);
                    Co_ScholasticValue.AT_AToT_3 = Convert.ToDecimal(Co_Scholastic.AT_AToT_3);
                    Co_ScholasticValue.AT_AToT_4 = Convert.ToDecimal(Co_Scholastic.AT_AToT_4);
                    Co_ScholasticValue.AT_AToT_5 = Convert.ToDecimal(Co_Scholastic.AT_AToT_5);
                    Co_ScholasticValue.AT_AToT_6 = Convert.ToDecimal(Co_Scholastic.AT_AToT_6);
                    Co_ScholasticValue.AT_AToT_7 = Convert.ToDecimal(Co_Scholastic.AT_AToT_7);
                    Co_ScholasticValue.AT_AToT_8 = Convert.ToDecimal(Co_Scholastic.AT_AToT_8);
                    Co_ScholasticValue.AT_AToT_9 = Convert.ToDecimal(Co_Scholastic.AT_AToT_9);
                    Co_ScholasticValue.AT_AToT_10 = Convert.ToDecimal(Co_Scholastic.AT_AToT_10);
                    Co_ScholasticValue.AT_AToT_Total = Co_ScholasticValue.AT_AToT_1 + Co_ScholasticValue.AT_AToT_2 + Co_ScholasticValue.AT_AToT_3 + Co_ScholasticValue.AT_AToT_4 + Co_ScholasticValue.AT_AToT_5 + Co_ScholasticValue.AT_AToT_6 + Co_ScholasticValue.AT_AToT_7 + Co_ScholasticValue.AT_AToT_8 + Co_ScholasticValue.AT_AToT_9 + Co_ScholasticValue.AT_AToT_10;
                    Co_ScholasticValue.AT_AToT_Average = Convert.ToDecimal(Co_ScholasticValue.AT_AToT_Total / 10);
                    Co_ScholasticValue.AT_AToT_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.AT_AToT_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.AT_AToT_1 = Convert.ToDecimal(Co_Scholastic.AT_AToT_1);
                    CoSchoVal.AT_AToT_2 = Convert.ToDecimal(Co_Scholastic.AT_AToT_2);
                    CoSchoVal.AT_AToT_3 = Convert.ToDecimal(Co_Scholastic.AT_AToT_3);
                    CoSchoVal.AT_AToT_4 = Convert.ToDecimal(Co_Scholastic.AT_AToT_4);
                    CoSchoVal.AT_AToT_5 = Convert.ToDecimal(Co_Scholastic.AT_AToT_5);
                    CoSchoVal.AT_AToT_6 = Convert.ToDecimal(Co_Scholastic.AT_AToT_6);
                    CoSchoVal.AT_AToT_7 = Convert.ToDecimal(Co_Scholastic.AT_AToT_7);
                    CoSchoVal.AT_AToT_8 = Convert.ToDecimal(Co_Scholastic.AT_AToT_8);
                    CoSchoVal.AT_AToT_9 = Convert.ToDecimal(Co_Scholastic.AT_AToT_9);
                    CoSchoVal.AT_AToT_10 = Convert.ToDecimal(Co_Scholastic.AT_AToT_10);
                    CoSchoVal.AT_AToT_Total = CoSchoVal.AT_AToT_1 + CoSchoVal.AT_AToT_2 + CoSchoVal.AT_AToT_3 + CoSchoVal.AT_AToT_4 + CoSchoVal.AT_AToT_5 + CoSchoVal.AT_AToT_6 + CoSchoVal.AT_AToT_7 + CoSchoVal.AT_AToT_8 + CoSchoVal.AT_AToT_9 + CoSchoVal.AT_AToT_10;
                    CoSchoVal.AT_AToT_Average = Convert.ToDecimal(CoSchoVal.AT_AToT_Total / 10);
                    CoSchoVal.AT_AToT_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.AT_AToT_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        public ActionResult SaveReportCardCBSEAT_AToSM(ReportCardCBSECo_Sch_Attitude Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.AT_AToSM_1 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_1);
                    Co_ScholasticValue.AT_AToSM_2 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_2);
                    Co_ScholasticValue.AT_AToSM_3 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_3);
                    Co_ScholasticValue.AT_AToSM_4 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_4);
                    Co_ScholasticValue.AT_AToSM_5 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_5);
                    Co_ScholasticValue.AT_AToSM_6 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_6);
                    Co_ScholasticValue.AT_AToSM_7 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_7);
                    Co_ScholasticValue.AT_AToSM_8 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_8);
                    Co_ScholasticValue.AT_AToSM_9 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_9);
                    Co_ScholasticValue.AT_AToSM_10 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_10);
                    Co_ScholasticValue.AT_AToSM_Total = Co_ScholasticValue.AT_AToSM_1 + Co_ScholasticValue.AT_AToSM_2 + Co_ScholasticValue.AT_AToSM_3 + Co_ScholasticValue.AT_AToSM_4 + Co_ScholasticValue.AT_AToSM_5 + Co_ScholasticValue.AT_AToSM_6 + Co_ScholasticValue.AT_AToSM_7 + Co_ScholasticValue.AT_AToSM_8 + Co_ScholasticValue.AT_AToSM_9 + Co_ScholasticValue.AT_AToSM_10;
                    Co_ScholasticValue.AT_AToSM_Average = Convert.ToDecimal(Co_ScholasticValue.AT_AToSM_Total / 10);
                    Co_ScholasticValue.AT_AToSM_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.AT_AToSM_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.AT_AToSM_1 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_1);
                    CoSchoVal.AT_AToSM_2 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_2);
                    CoSchoVal.AT_AToSM_3 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_3);
                    CoSchoVal.AT_AToSM_4 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_4);
                    CoSchoVal.AT_AToSM_5 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_5);
                    CoSchoVal.AT_AToSM_6 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_6);
                    CoSchoVal.AT_AToSM_7 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_7);
                    CoSchoVal.AT_AToSM_8 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_8);
                    CoSchoVal.AT_AToSM_9 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_9);
                    CoSchoVal.AT_AToSM_10 = Convert.ToDecimal(Co_Scholastic.AT_AToSM_10);
                    CoSchoVal.AT_AToSM_Total = CoSchoVal.AT_AToSM_1 + CoSchoVal.AT_AToSM_2 + CoSchoVal.AT_AToSM_3 + CoSchoVal.AT_AToSM_4 + CoSchoVal.AT_AToSM_5 + CoSchoVal.AT_AToSM_6 + CoSchoVal.AT_AToSM_7 + CoSchoVal.AT_AToSM_8 + CoSchoVal.AT_AToSM_9 + CoSchoVal.AT_AToSM_10;
                    CoSchoVal.AT_AToSM_Average = Convert.ToDecimal(CoSchoVal.AT_AToSM_Total / 10);
                    CoSchoVal.AT_AToSM_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.AT_AToSM_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        public ActionResult SaveReportCardCBSEAT_AToSPE(ReportCardCBSECo_Sch_Attitude Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.AT_AToSPE_1 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_1);
                    Co_ScholasticValue.AT_AToSPE_2 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_2);
                    Co_ScholasticValue.AT_AToSPE_3 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_3);
                    Co_ScholasticValue.AT_AToSPE_4 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_4);
                    Co_ScholasticValue.AT_AToSPE_5 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_5);
                    Co_ScholasticValue.AT_AToSPE_6 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_6);
                    Co_ScholasticValue.AT_AToSPE_7 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_7);
                    Co_ScholasticValue.AT_AToSPE_8 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_8);
                    Co_ScholasticValue.AT_AToSPE_9 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_9);
                    Co_ScholasticValue.AT_AToSPE_10 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_10);
                    Co_ScholasticValue.AT_AToSPE_Total = Co_ScholasticValue.AT_AToSPE_1 + Co_ScholasticValue.AT_AToSPE_2 + Co_ScholasticValue.AT_AToSPE_3 + Co_ScholasticValue.AT_AToSPE_4 + Co_ScholasticValue.AT_AToSPE_5 + Co_ScholasticValue.AT_AToSPE_6 + Co_ScholasticValue.AT_AToSPE_7 + Co_ScholasticValue.AT_AToSPE_8 + Co_ScholasticValue.AT_AToSPE_9 + Co_ScholasticValue.AT_AToSPE_10;
                    Co_ScholasticValue.AT_AToSPE_Average = Convert.ToDecimal(Co_ScholasticValue.AT_AToSPE_Total / 10);
                    Co_ScholasticValue.AT_AToSPE_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.AT_AToSPE_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.AT_AToSPE_1 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_1);
                    CoSchoVal.AT_AToSPE_2 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_2);
                    CoSchoVal.AT_AToSPE_3 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_3);
                    CoSchoVal.AT_AToSPE_4 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_4);
                    CoSchoVal.AT_AToSPE_5 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_5);
                    CoSchoVal.AT_AToSPE_6 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_6);
                    CoSchoVal.AT_AToSPE_7 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_7);
                    CoSchoVal.AT_AToSPE_8 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_8);
                    CoSchoVal.AT_AToSPE_9 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_9);
                    CoSchoVal.AT_AToSPE_10 = Convert.ToDecimal(Co_Scholastic.AT_AToSPE_10);
                    CoSchoVal.AT_AToSPE_Total = CoSchoVal.AT_AToSPE_1 + CoSchoVal.AT_AToSPE_2 + CoSchoVal.AT_AToSPE_3 + CoSchoVal.AT_AToSPE_4 + CoSchoVal.AT_AToSPE_5 + CoSchoVal.AT_AToSPE_6 + CoSchoVal.AT_AToSPE_7 + CoSchoVal.AT_AToSPE_8 + CoSchoVal.AT_AToSPE_9 + CoSchoVal.AT_AToSPE_10;
                    CoSchoVal.AT_AToSPE_Average = Convert.ToDecimal(CoSchoVal.AT_AToSPE_Total / 10);
                    CoSchoVal.AT_AToSPE_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.AT_AToSPE_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region Work And Education
        public ActionResult SaveReportCardCBSEWE(ReportCardCBSECo_Sch_WE Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.WE_1 = Convert.ToDecimal(Co_Scholastic.WE_1);
                    Co_ScholasticValue.WE_2 = Convert.ToDecimal(Co_Scholastic.WE_2);
                    Co_ScholasticValue.WE_3 = Convert.ToDecimal(Co_Scholastic.WE_3);
                    Co_ScholasticValue.WE_4 = Convert.ToDecimal(Co_Scholastic.WE_4);
                    Co_ScholasticValue.WE_5 = Convert.ToDecimal(Co_Scholastic.WE_5);
                    Co_ScholasticValue.WE_6 = Convert.ToDecimal(Co_Scholastic.WE_6);
                    Co_ScholasticValue.WE_7 = Convert.ToDecimal(Co_Scholastic.WE_7);
                    Co_ScholasticValue.WE_8 = Convert.ToDecimal(Co_Scholastic.WE_8);
                    Co_ScholasticValue.WE_9 = Convert.ToDecimal(Co_Scholastic.WE_9);
                    Co_ScholasticValue.WE_10 = Convert.ToDecimal(Co_Scholastic.WE_10);
                    Co_ScholasticValue.WE_Total = Co_ScholasticValue.WE_1 + Co_ScholasticValue.WE_2 + Co_ScholasticValue.WE_3 + Co_ScholasticValue.WE_4 + Co_ScholasticValue.WE_5 + Co_ScholasticValue.WE_6 + Co_ScholasticValue.WE_7 + Co_ScholasticValue.WE_8 + Co_ScholasticValue.WE_9 + Co_ScholasticValue.WE_10;
                    Co_ScholasticValue.WE_Average = Convert.ToDecimal(Co_ScholasticValue.WE_Total / 10);
                    Co_ScholasticValue.WE_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.WE_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.WE_1 = Convert.ToDecimal(Co_Scholastic.WE_1);
                    CoSchoVal.WE_2 = Convert.ToDecimal(Co_Scholastic.WE_2);
                    CoSchoVal.WE_3 = Convert.ToDecimal(Co_Scholastic.WE_3);
                    CoSchoVal.WE_4 = Convert.ToDecimal(Co_Scholastic.WE_4);
                    CoSchoVal.WE_5 = Convert.ToDecimal(Co_Scholastic.WE_5);
                    CoSchoVal.WE_6 = Convert.ToDecimal(Co_Scholastic.WE_6);
                    CoSchoVal.WE_7 = Convert.ToDecimal(Co_Scholastic.WE_7);
                    CoSchoVal.WE_8 = Convert.ToDecimal(Co_Scholastic.WE_8);
                    CoSchoVal.WE_9 = Convert.ToDecimal(Co_Scholastic.WE_9);
                    CoSchoVal.WE_10 = Convert.ToDecimal(Co_Scholastic.WE_10);
                    CoSchoVal.WE_Total = CoSchoVal.WE_1 + CoSchoVal.WE_2 + CoSchoVal.WE_3 + CoSchoVal.WE_4 + CoSchoVal.WE_5 + CoSchoVal.WE_6 + CoSchoVal.WE_7 + CoSchoVal.WE_8 + CoSchoVal.WE_9 + CoSchoVal.WE_10;
                    CoSchoVal.WE_Average = Convert.ToDecimal(CoSchoVal.WE_Total / 10);
                    CoSchoVal.WE_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.WE_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion
        #region SciSkills
        public ActionResult SaveReportCardCBSESciSkills(ReportCardCBSECo_Sch_SciSkills Co_Scholastic)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (Co_Scholastic.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSECo_Scholastic Co_ScholasticValue = rptsvc.GetReportCardCBSECo_ScholasticById(Co_Scholastic.RptId);
                if (Co_ScholasticValue != null)
                {
                    Co_ScholasticValue.SciSkills_1 = Convert.ToDecimal(Co_Scholastic.SciSkills_1);
                    Co_ScholasticValue.SciSkills_2 = Convert.ToDecimal(Co_Scholastic.SciSkills_2);
                    Co_ScholasticValue.SciSkills_3 = Convert.ToDecimal(Co_Scholastic.SciSkills_3);
                    Co_ScholasticValue.SciSkills_4 = Convert.ToDecimal(Co_Scholastic.SciSkills_4);
                    Co_ScholasticValue.SciSkills_5 = Convert.ToDecimal(Co_Scholastic.SciSkills_5);
                    Co_ScholasticValue.SciSkills_6 = Convert.ToDecimal(Co_Scholastic.SciSkills_6);
                    Co_ScholasticValue.SciSkills_7 = Convert.ToDecimal(Co_Scholastic.SciSkills_7);
                    Co_ScholasticValue.SciSkills_8 = Convert.ToDecimal(Co_Scholastic.SciSkills_8);
                    Co_ScholasticValue.SciSkills_9 = Convert.ToDecimal(Co_Scholastic.SciSkills_9);
                    Co_ScholasticValue.SciSkills_10 = Convert.ToDecimal(Co_Scholastic.SciSkills_10);
                    Co_ScholasticValue.SciSkills_Total = Co_ScholasticValue.SciSkills_1 + Co_ScholasticValue.SciSkills_2 + Co_ScholasticValue.SciSkills_3 + Co_ScholasticValue.SciSkills_4 + Co_ScholasticValue.SciSkills_5 + Co_ScholasticValue.SciSkills_6 + Co_ScholasticValue.SciSkills_7 + Co_ScholasticValue.SciSkills_8 + Co_ScholasticValue.SciSkills_9 + Co_ScholasticValue.SciSkills_10;
                    Co_ScholasticValue.SciSkills_Average = Convert.ToDecimal(Co_ScholasticValue.SciSkills_Total / 10);
                    Co_ScholasticValue.SciSkills_Grade = GradeCalulation(Convert.ToDecimal(Co_ScholasticValue.SciSkills_Average), "CoScholastic");
                    Co_ScholasticValue.ModifiedDate = DateTime.Now;
                    Co_ScholasticValue.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(Co_ScholasticValue);
                }
                else
                {
                    ReportCardCBSECo_Scholastic CoSchoVal = new ReportCardCBSECo_Scholastic();
                    CoSchoVal.RptRequestId = Co_Scholastic.RptRequestId;
                    CoSchoVal.PreRegNum = Co_Scholastic.PreRegNum;
                    CoSchoVal.Name = Co_Scholastic.Name;
                    CoSchoVal.Campus = Co_Scholastic.Campus;
                    CoSchoVal.Grade = Co_Scholastic.Grade;
                    CoSchoVal.Section = Co_Scholastic.Section;
                    CoSchoVal.AcademicYear = Co_Scholastic.AcademicYear;
                    CoSchoVal.Term = Co_Scholastic.Term;
                    CoSchoVal.SciSkills_1 = Convert.ToDecimal(Co_Scholastic.SciSkills_1);
                    CoSchoVal.SciSkills_2 = Convert.ToDecimal(Co_Scholastic.SciSkills_2);
                    CoSchoVal.SciSkills_3 = Convert.ToDecimal(Co_Scholastic.SciSkills_3);
                    CoSchoVal.SciSkills_4 = Convert.ToDecimal(Co_Scholastic.SciSkills_4);
                    CoSchoVal.SciSkills_5 = Convert.ToDecimal(Co_Scholastic.SciSkills_5);
                    CoSchoVal.SciSkills_6 = Convert.ToDecimal(Co_Scholastic.SciSkills_6);
                    CoSchoVal.SciSkills_7 = Convert.ToDecimal(Co_Scholastic.SciSkills_7);
                    CoSchoVal.SciSkills_8 = Convert.ToDecimal(Co_Scholastic.SciSkills_8);
                    CoSchoVal.SciSkills_9 = Convert.ToDecimal(Co_Scholastic.SciSkills_9);
                    CoSchoVal.SciSkills_10 = Convert.ToDecimal(Co_Scholastic.SciSkills_10);
                    CoSchoVal.SciSkills_Total = CoSchoVal.SciSkills_1 + CoSchoVal.SciSkills_2 + CoSchoVal.SciSkills_3 + CoSchoVal.SciSkills_4 + CoSchoVal.SciSkills_5 + CoSchoVal.SciSkills_6 + CoSchoVal.SciSkills_7 + CoSchoVal.SciSkills_8 + CoSchoVal.SciSkills_9 + CoSchoVal.SciSkills_10;
                    CoSchoVal.SciSkills_Average = Convert.ToDecimal(CoSchoVal.SciSkills_Total / 10);
                    CoSchoVal.SciSkills_Grade = GradeCalulation(Convert.ToDecimal(CoSchoVal.SciSkills_Average), "CoScholastic");
                    CoSchoVal.CreatedDate = DateTime.Now;
                    CoSchoVal.CreatedBy = Userobj.UserId;
                    CoSchoVal.ModifiedDate = DateTime.Now;
                    CoSchoVal.ModifiedBy = Userobj.UserId;
                    rptsvc.SaveOrUpdateReportCardCBSECo_Scholastic(CoSchoVal);
                }
            }
            else { }
            return null;
        }
        #endregion

        #endregion

        #region "For Muliple pdf Generation"

        public ActionResult FinalResultZipPdfGen(string campus, string grade, string section, string semester, string academicyear)
        {
            try
            {
                byte[] pdfVal = null; string name = "ZipFile";
                Assess360Service A360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", campus); criteria.Add("Grade", grade);
                criteria.Add("Section", section); criteria.Add("AcademicYear", academicyear);
                Dictionary<long, IList<Vw_FinalResult>> StudentMarksVItoVIII = A360.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
                List<Vw_FinalResult> MarkList = StudentMarksVItoVIII.FirstOrDefault().Value.ToList();
                if (StudentMarksVItoVIII != null && StudentMarksVItoVIII.FirstOrDefault().Value.Count > 0 && StudentMarksVItoVIII.FirstOrDefault().Key > 0)
                {
                    IEnumerable<long> blkLong = (from p in MarkList
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum).Distinct();
                    long[] preRegNumber = blkLong.ToArray();

                    // Create a Output Memory stream
                    MemoryStream outputMemStream = new MemoryStream();

                    //Create a Output Zipfile stream
                    ICSharpCode.SharpZipLib.Zip.ZipOutputStream zipStream = new ICSharpCode.SharpZipLib.Zip.ZipOutputStream(outputMemStream);
                    zipStream.SetLevel(9); //0-9, 9 being the highest level of compression
                    MemoryStream stream = null;


                    foreach (var item in preRegNumber)
                    {
                        //Assigning Byte[] to a new stream
                        pdfVal = FinalResultBulkPDF(Convert.ToString(item), campus, grade, section, semester, academicyear);
                        if (pdfVal != null)
                        {
                            stream = new MemoryStream(pdfVal);
                            ICSharpCode.SharpZipLib.Zip.ZipEntry xmlEntry = new ICSharpCode.SharpZipLib.Zip.ZipEntry(Convert.ToString(item) + ".pdf");
                            xmlEntry.DateTime = DateTime.Now;
                            zipStream.PutNextEntry(xmlEntry);
                            ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(stream, zipStream, new byte[4096]);
                            zipStream.CloseEntry(); // Close each Zip stream
                        }
                    }
                    zipStream.IsStreamOwner = false;
                    zipStream.Close();
                    outputMemStream.Position = 0;
                    byte[] byteArray = outputMemStream.ToArray();
                    Response.Clear();
                    Response.AppendHeader("Content-Disposition", "attachment; filename=" + "TIPS-" + name + ".zip");
                    Response.AppendHeader("Content-Length", byteArray.Length.ToString());
                    Response.ContentType = "application/octet-stream";
                    Response.BinaryWrite(byteArray);
                }
                return Json(null, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }


        }

        public byte[] FinalResultBulkPDF(string PreRegNum, string campus, string grade, string section, string semester, string academicyear)
        {
            try
            {
                byte[] bytearray = null;
                Assess360Service A360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                string over = "Single";
                string title = "MarkList_" + PreRegNum + "";
                var total = string.Empty; var comgrade = string.Empty; string name = string.Empty; string TeacherName = string.Empty; string SecondLange = string.Empty;
                string RepDate = string.Empty;
                Double phy, che, bio, tot;
                criteria.Clear();
                criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                criteria.Add("Section", section);
                criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(semester))
                {
                    if (semester == "Sem I") { criteria.Add("Semester", Convert.ToInt64(1)); }
                    else if (semester == "Sem II") { criteria.Add("Semester", Convert.ToInt64(2)); }
                    else if (semester == "Sem III") { criteria.Add("Semester", Convert.ToInt64(3)); }

                }
                ReportCardService rptCardSrvc = new ReportCardService();
                Dictionary<long, IList<RptCardInBoxView>> dcnRptCardLst = rptCardSrvc.GetRepCardInBoxListWithPagingAndCriteriaEQSearch(0, 999, string.Empty, string.Empty, criteria);
                if (dcnRptCardLst != null && dcnRptCardLst.Count > 0 && dcnRptCardLst.FirstOrDefault().Key > 0)
                {
                    IList<RptCardInBoxView> TeacherandSeconLan = dcnRptCardLst.FirstOrDefault().Value.ToList();
                    TeacherName = TeacherandSeconLan[0].TeacherName;
                    if (TeacherandSeconLan[0].Second_Language != null)
                        SecondLange = " - " + TeacherandSeconLan[0].Second_Language;
                    RepDate = TeacherandSeconLan[0].RptDate.Value.ToString("dd/MM/yyyy");
                }
                criteria.Clear();
                criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                criteria.Add("Section", section);
                criteria.Add("AcademicYear", academicyear);
                Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                List<Totalsemlist> TotalList = Totalsemlist.FirstOrDefault().Value.ToList();
                if (Totalsemlist != null && Totalsemlist.FirstOrDefault().Value.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                {
                    name = TotalList[0].Name;
                    var arrlang = (from a in TotalList
                                   select new { a.Subject }).ToList();
                }
                if ((grade == "IX" || grade == "X") && (section == "A" || section == "B"))
                {
                    string[] arr = new string[] { "English", "Language", "Biology", "Mathematics", "Physics", "Chemistry", "ICT", "Economics", "Physical Education" };
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("Semester", semester);
                    criteria.Add("Subject", arr);
                    criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<SubjectMarks>> GetSubjectList = A360.GetSubjectMarksViewListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    List<SubjectMarks> Subjectlist = GetSubjectList.FirstOrDefault().Value.ToList();
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXAB>> GetClassIXABSubjectList = A360.GetClassIXABSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXAB> ClassIXABList = GetClassIXABSubjectList.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in Subjectlist
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();
                    if (Subjectlist != null && Subjectlist.Count > 0)
                    {
                        var Physics = (from u in GetSubjectList.First().Value
                                       where u.Subject == "Physics"
                                       select u.Fa1andFa2).ToList();
                        var Chemistry = (from u in GetSubjectList.First().Value
                                         where u.Subject == "Chemistry"
                                         select u.Fa1andFa2).ToList();
                        var Biology = (from u in GetSubjectList.First().Value
                                       where u.Subject == "Biology"
                                       select u.Fa1andFa2).ToList();
                        if (Physics.Count == 0) { phy = 0; } else { phy = Convert.ToDouble(Physics[0]); }
                        if (Chemistry.Count == 0) { che = 0; } else { che = Convert.ToDouble(Chemistry[0]); }
                        if (Biology.Count == 0) { bio = 0; } else { bio = Convert.ToDouble(Biology[0]); }

                        tot = Convert.ToDouble((phy + che + bio) / 3);
                        total = Convert.ToString(Math.Round(tot, 1));
                        comgrade = Convert.ToString((GetGradeList(total)));
                    }

                    if (Subjectlist != null && Subjectlist.Count > 0)
                    {
                        foreach (ClassforIXAB item in ClassIXABList)
                        {

                            if (blksubject.Contains(item.Subject))
                            {
                                var GetSubject = (from u in GetSubjectList.First().Value
                                                  where u.Subject == item.Subject
                                                  select u).ToList();

                                item.Subject = GetSubject[0].Subject;
                                item.Marks = GetSubject[0].Fa1andFa2;
                                item.Grade = GetSubject[0].SEMGrade;
                            }
                            else
                            {
                                if (item.Subject == "Combined science")
                                {
                                    item.Subject = item.Subject; item.Marks = total; item.Grade = comgrade;
                                }
                                else
                                {
                                    item.Subject = item.Subject;
                                    item.Marks = "";
                                    item.Grade = "";
                                }
                            }

                        }
                        string Overallgrade = "";
                        Double mrkdtotal = 0;
                        string Percentage = "";
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {

                                if (!string.IsNullOrEmpty(ClassIXABList[i].Marks))
                                {
                                    mrkdtotal = Convert.ToDouble(ClassIXABList[i].Marks);
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(ClassIXABList[i].Marks))
                                {
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXABList[i].Marks);
                                }
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };
                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (ClassIXABList[i].Marks == string.Empty)
                            { ClassIXABList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXABList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }
                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));
                        var ass = (from a in ClassIXABList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        bytearray = GradeIX_ExportToBulkPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                }
                else if ((grade == "IX" || grade == "X") && (section == "C" || section == "D"))
                {
                    string[] arr = new string[] { "English", "Language", "Biology", "Mathematics", "Physics", "Chemistry", "ICT", "Economics" };
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("Semester", semester);
                    criteria.Add("Subject", arr);
                    criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<SubjectMarks>> GetSubjectList = A360.GetSubjectMarksViewListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    List<SubjectMarks> Subjectlist = GetSubjectList.FirstOrDefault().Value.ToList();
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXCD>> GetClassIXCDSubjectList = A360.GetClassIXCDSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXCD> ClassIXCDList = GetClassIXCDSubjectList.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in Subjectlist
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();
                    if (Subjectlist != null && Subjectlist.Count > 0)
                    {
                        foreach (ClassforIXCD item in ClassIXCDList)
                        {
                            if (blksubject.Contains(item.Subject))
                            {
                                var GetSubject = (from u in GetSubjectList.First().Value
                                                  where u.Subject == item.Subject
                                                  select u).ToList();

                                item.Subject = GetSubject[0].Subject;
                                item.Marks = GetSubject[0].Fa1andFa2;
                                item.Grade = GetSubject[0].SEMGrade;
                            }
                            else
                            {
                                item.Subject = item.Subject;
                                item.Marks = "";
                                item.Grade = "";
                            }
                        }
                        string Overallgrade = "";
                        Double mrkdtotal = 0;
                        string Percentage = "";
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {
                                if (!string.IsNullOrEmpty(ClassIXCDList[i].Marks))
                                {
                                    mrkdtotal = Convert.ToDouble(ClassIXCDList[i].Marks);
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(ClassIXCDList[i].Marks))
                                {
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXCDList[i].Marks);
                                }
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };
                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (ClassIXCDList[i].Marks == string.Empty)
                            { ClassIXCDList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXCDList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }
                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));
                        var ass = (from a in ClassIXCDList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        bytearray = GradeIX_ExportToBulkPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                    else { }
                }
                else
                {
                    criteria.Clear();
                    string[] arrnew = new string[] { "English", "Language", "Biology", "Mathematics", "Physics", "Chemistry", "ICT", "HC&G" };
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("AcademicYear", academicyear);
                    criteria.Add("Subject", arrnew);
                    Dictionary<long, IList<Vw_FinalResult>> StudentMarksVItoVIII = A360.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<Vw_FinalResult> MarkList = StudentMarksVItoVIII.FirstOrDefault().Value.ToList();
                    criteria.Clear();
                    Dictionary<long, IList<ClassforVItoVIII>> GetClassVItoVIIISubjectList = A360.GetClassVItoVIIISubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforVItoVIII> ClassList = GetClassVItoVIIISubjectList.FirstOrDefault().Value.ToList();
                    if (MarkList != null)
                    {
                        Double totalmrks = 0;
                        Double Prtage = 0;
                        int i = 0;
                        foreach (var item in MarkList)
                        {
                            i++;
                            if (semester == "Sem I")
                                totalmrks = totalmrks + Convert.ToDouble(item.SemI);
                            if (semester == "Sem II")
                                totalmrks = totalmrks + Convert.ToDouble(item.SemII);
                            else
                                totalmrks = totalmrks + Convert.ToDouble(item.SemIII);
                        }
                        foreach (ClassforVItoVIII clsitem in ClassList)
                        {
                            var GetSemMarks = (from u in MarkList
                                               where u.Subject == clsitem.Subject
                                               select new { u.Subject, u.SemI, u.SemII, u.SemIII }).ToList();
                            if (GetSemMarks.Count > 0)
                            {
                                if (GetSemMarks[0].Subject == "Language")
                                    clsitem.Subject = GetSemMarks[0].Subject + SecondLange;
                                if (semester == "Sem I")
                                    clsitem.Grade = GetSemMarks[0].SemI != null ? GetGradeList(Convert.ToString(GetSemMarks[0].SemI)) : null;
                                if (semester == "Sem II")
                                    clsitem.Grade = GetSemMarks[0].SemII != null ? GetGradeList(Convert.ToString(GetSemMarks[0].SemII)) : null;
                                else
                                    clsitem.Grade = GetSemMarks[0].SemIII != null ? GetGradeList(Convert.ToString(GetSemMarks[0].SemIII)) : null;
                            }

                        }

                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 40f };
                        // remove empty mark column for the list
                        for (int x = 0; x < ClassList.Count; x++)
                        {
                            if (string.IsNullOrEmpty(ClassList[x].Grade))
                            { ClassList.RemoveAt(x); x = x - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }
                        Prtage = totalmrks / (idNum - 1 * 100) * 100;
                        Prtage = Math.Round(Convert.ToDouble(Prtage), 2);
                        string Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Prtage))));
                        var assessment = (from a in ClassList
                                          select new { a.Id, a.Subject, a.Grade }).ToList();
                        DataTable datatbl = ListToDataTable(assessment);
                        bytearray = GradeVItoVIII_ExportToBulkPDF(title, TblHeaders, widths, datatbl, name, grade, section, semester, Prtage, Overallgrade, RepDate, TeacherName, SecondLange);
                    }
                    else
                    { }
                }
                return bytearray;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public byte[] GradeVItoVIII_ExportToBulkPDF(string Title, string[] TblHeaders, float[] widths, DataTable datatbl, string name, string grade, string section, string semester, double Prtage, string Overallgrade, string RepDate, string TeacherName, string SecondLange)
        {
            try
            {
                string Sem = (semester == "Sem I") ? "I" : (semester == "Sem I") ? "II" : "III";
                Document document = new Document(PageSize.A4, 10.25f, 10.25f, 10.5f, 10.5f);

                iTextSharp.text.Image LogonaceImage;
                string LogonaceImagePath = ConfigurationManager.AppSettings["AppLogos"] + "logonace.jpg";

                LogonaceImage = iTextSharp.text.Image.GetInstance(LogonaceImagePath);
                LogonaceImage.ScaleAbsolute(55, 55);

                iTextSharp.text.Image LogoImage;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";

                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(55, 55);

                // For PDF export we are using the free open-source iTextSharp library.
                string month = DateTime.Now.ToString("MMMM");
                Document pdfDoc = new Document();
                pdfDoc.AddTitle(Title);
                MemoryStream pdfStream = new MemoryStream();
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

                pdfDoc.Open();//Open Document to write
                pdfDoc.NewPage();

                Font Heading = FontFactory.GetFont("ARIAL", 9, BaseColor.BLACK);
                Font Content = FontFactory.GetFont("ARIAL", 9);

                PdfPTable nace = new PdfPTable(4);
                float[] width = new float[] { 50f, 245f, 200f, 55f };
                nace.SetWidths(width);

                PdfPCell nace1 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));
                nace1.Border = 0;
                nace1.AddElement(LogonaceImage);
                nace.AddCell(nace1);

                PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE                                      SEMESTER " + Sem + "  ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                nace2.Padding = 5;
                nace2.Border = 0;
                nace2.Colspan = 2;
                nace.AddCell(nace2);


                PdfPCell nace4 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));

                nace4.Border = 0;
                nace4.AddElement(LogoImage);
                nace.AddCell(nace4);
                pdfDoc.Add(nace);

                PdfPTable p5 = new PdfPTable(4);
                PdfPCell pe1 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe1.Border = 0;
                pe1.Colspan = 4;
                p5.AddCell(pe1);

                PdfPCell pe0 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe0.Border = 0;
                pe0.Colspan = 4;
                p5.AddCell(pe0);

                pdfDoc.Add(p5);

                PdfPTable PdfTable = new PdfPTable(4);

                PdfPCell PdfPCel1 = new PdfPCell(new Phrase("Student : " + name + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel1.Padding = 4;
                PdfPCel1.Colspan = 2;
                PdfTable.AddCell(PdfPCel1);
                PdfPCell PdfPCel2 = new PdfPCell(new Phrase("Teacher    :" + TeacherName + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel2.Padding = 4;
                PdfPCel2.Colspan = 2;
                PdfTable.AddCell(PdfPCel2);
                PdfPCell PdfPCel3 = new PdfPCell(new Phrase("Grade    : " + grade + "-" + section + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel3.Padding = 4;
                PdfPCel3.Colspan = 2;
                PdfTable.AddCell(PdfPCel3);
                PdfPCell PdfPCel4 = new PdfPCell(new Phrase("Date       : " + RepDate + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel4.Colspan = 2;
                PdfPCel4.Padding = 4;
                PdfTable.AddCell(PdfPCel4);
                pdfDoc.Add(PdfTable); // add pdf table to the document

                PdfPTable Empt = new PdfPTable(4);
                PdfPCell Empt1 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt1.Border = 0;
                Empt1.Colspan = 4;
                Empt.AddCell(Empt1);

                PdfPCell Empt00 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt00.Border = 0;
                Empt00.Colspan = 4;
                Empt.AddCell(Empt00);

                pdfDoc.Add(Empt);

                PdfPTable Table = new PdfPTable(datatbl.Columns.Count);
                PdfPCell PdfPCell = new PdfPCell();
                for (int column = 0; column < datatbl.Columns.Count; column++)
                {
                    PdfPCell = new PdfPCell(new Phrase(new Chunk(TblHeaders[column], Heading)));
                    PdfPCell.Padding = 4;
                    PdfPCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    Table.TotalWidth = 420f;
                    Table.LockedWidth = true;
                    Table.SetWidths(widths);
                    Table.AddCell(PdfPCell);
                }
                //How add the data from datatable to pdf table
                for (int rows = 0; rows < datatbl.Rows.Count; rows++)
                {
                    for (int column = 0; column < datatbl.Columns.Count; column++)
                    {
                        if (datatbl.Rows[rows][column].ToString() == "HC&G")
                        {
                            PdfPCell = new PdfPCell(new Phrase(new Chunk("History & Geography", Content)));
                        }
                        else
                        {
                            PdfPCell = new PdfPCell(new Phrase(new Chunk(datatbl.Rows[rows][column].ToString(), Content)));
                        }
                        PdfPCell.Padding = 4;
                        Table.AddCell(PdfPCell);
                    }
                }
                pdfDoc.Add(Table); // add Table to the document

                PdfPTable Emp = new PdfPTable(4);
                PdfPCell Empt2 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt2.Border = 0;
                Empt2.Colspan = 4;
                Emp.AddCell(Empt2);

                pdfDoc.Add(Emp);

                PdfPTable per = new PdfPTable(4);
                PdfPCell per1 = new PdfPCell(new Phrase("Percentage:  " + Prtage + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per1.Border = 0;
                per1.Padding = 10;
                per1.Colspan = 4;
                per.AddCell(per1);

                PdfPCell per2 = new PdfPCell(new Phrase("Grade : " + Overallgrade + " ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per2.Border = 0;
                per2.Padding = 10;
                per2.Colspan = 4;
                per.AddCell(per2);
                pdfDoc.Add(per);


                PdfPTable repot = new PdfPTable(4);
                float[] widt = new float[] { 10f, 50f, 20f, 20f };
                PdfPCell repot1 = new PdfPCell(new Phrase("Class Teacher ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot1.HorizontalAlignment = Element.ALIGN_CENTER;
                repot1.PaddingTop = 50;
                repot.AddCell(repot1);
                PdfPCell repot2 = new PdfPCell(new Phrase("MYP Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot2.HorizontalAlignment = Element.ALIGN_CENTER;
                repot2.PaddingTop = 50;
                repot.AddCell(repot2);
                PdfPCell repot3 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot3.HorizontalAlignment = Element.ALIGN_CENTER;
                repot3.PaddingTop = 50;
                repot.AddCell(repot3);
                PdfPCell repot4 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot4.HorizontalAlignment = Element.ALIGN_CENTER;
                repot4.PaddingTop = 50;
                repot.AddCell(repot4);
                pdfDoc.Add(repot);

                PdfPTable Emp1 = new PdfPTable(4);
                PdfPCell Empt21 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt21.Border = 0;
                Empt21.Colspan = 4;
                Emp1.AddCell(Empt21);

                PdfPCell Empt41 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt41.Border = 0;
                Empt41.Colspan = 4;
                Emp1.AddCell(Empt41);
                pdfDoc.Add(Emp1);

                PdfPTable end = new PdfPTable(10);
                PdfPCell end1 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                end1.HorizontalAlignment = Element.ALIGN_CENTER;
                end1.Padding = 10;
                end1.Colspan = 10;
                end.AddCell(end1);

                PdfPCell t1 = new PdfPCell(new Phrase("Grade ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t1.HorizontalAlignment = Element.ALIGN_CENTER;
                t1.Padding = 6;
                end.AddCell(t1);

                PdfPCell t2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t2.Padding = 10;
                t2.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t2);

                PdfPCell t3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t3.Padding = 10;
                t3.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t3);

                PdfPCell t4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t4.Padding = 10;
                t4.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t4);

                PdfPCell t5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t5.Padding = 10;
                t5.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t5);


                PdfPCell t6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t6.Padding = 10;
                t6.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t6);


                PdfPCell t7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t7.Padding = 10;
                t7.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t7);

                PdfPCell t8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t8.Padding = 10;
                t8.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t8);

                PdfPCell t9 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t9.Padding = 10;
                t9.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t9);

                PdfPCell t10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t10.Padding = 10;
                t10.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t10);

                PdfPCell t11 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t11.Padding = 4;
                t11.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t11);

                PdfPCell t12 = new PdfPCell(new Phrase("90-100 ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t12.Padding = 4;
                t12.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t12);

                PdfPCell t13 = new PdfPCell(new Phrase("80-89", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t13.Padding = 4;
                t13.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t13);

                PdfPCell t14 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t14.Padding = 4;
                t14.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t14);

                PdfPCell t15 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t15.Padding = 4;
                t15.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t15);

                PdfPCell t16 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t16.Padding = 4;
                t16.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t16);


                PdfPCell t17 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t17.Padding = 4;
                t17.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t17);

                PdfPCell t18 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t18.Padding = 4;
                t18.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t18);

                PdfPCell t19 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t19.Padding = 4;
                t19.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t19);

                PdfPCell t20 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t20.Padding = 4;
                t20.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t20);
                pdfDoc.Add(end);

                Table.SpacingBefore = 7f; // Give some space after the text or it may overlap the table  

                pdfDoc.Close();
                pdfWriter.Close();
                return pdfStream.GetBuffer();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ActionResult OverAllGradeZipPdfGen(string campus, string grade, string section, string semester, string academicyear)
        {
            byte[] pdfVal = null; string name = "ZipFile";
            Assess360Service A360 = new Assess360Service();
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            criteria.Add("Campus", campus);
            criteria.Add("Grade", grade);
            criteria.Add("Section", section);
            criteria.Add("AcademicYear", academicyear);
            Dictionary<long, IList<Vw_FinalResult>> StudentMarksVItoVIII = A360.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
            List<Vw_FinalResult> MarkList = StudentMarksVItoVIII.FirstOrDefault().Value.ToList();
            if (StudentMarksVItoVIII != null && StudentMarksVItoVIII.FirstOrDefault().Value.Count > 0 && StudentMarksVItoVIII.FirstOrDefault().Key > 0)
            {
                IEnumerable<long> blkLong = (from p in MarkList
                                             orderby p.PreRegNum ascending
                                             select p.PreRegNum).Distinct();
                long[] preRegNumber = blkLong.ToArray();

                // Create a Output Memory stream
                MemoryStream outputMemStream = new MemoryStream();

                //Create a Output Zipfile stream
                ICSharpCode.SharpZipLib.Zip.ZipOutputStream zipStream = new ICSharpCode.SharpZipLib.Zip.ZipOutputStream(outputMemStream);
                zipStream.SetLevel(9); //0-9, 9 being the highest level of compression
                foreach (var item in preRegNumber)
                {
                    //Assigning Byte[] to a new stream
                    // pdfVal = FinalResultBulkPDF(Convert.ToString(item), campus, grade, section, semester, academicyear);
                    pdfVal = OverAllGradeBulkPDF(Convert.ToString(item), campus, grade, section, semester, academicyear);
                    if (pdfVal != null)
                    {
                        MemoryStream stream = new MemoryStream(pdfVal);
                        ICSharpCode.SharpZipLib.Zip.ZipEntry xmlEntry = new ICSharpCode.SharpZipLib.Zip.ZipEntry(Convert.ToString(item) + ".pdf");
                        xmlEntry.DateTime = DateTime.Now;
                        zipStream.PutNextEntry(xmlEntry);
                        ICSharpCode.SharpZipLib.Core.StreamUtils.Copy(stream, zipStream, new byte[4096]);
                        zipStream.CloseEntry(); //Close each Zip stream
                    }
                }
                zipStream.IsStreamOwner = false;
                zipStream.Close();
                outputMemStream.Position = 0;
                byte[] byteArray = outputMemStream.ToArray();
                Response.Clear();
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + "TIPS-" + name + ".zip");
                Response.AppendHeader("Content-Length", byteArray.Length.ToString());
                Response.ContentType = "application/octet-stream";
                Response.BinaryWrite(byteArray);
            }
            return Json(null, JsonRequestBehavior.AllowGet);

        }
        public byte[] OverAllGradeBulkPDF(string PreRegNum, string campus, string grade, string section, string semester, string academicyear)
        {
            try
            {
                Assess360Service A360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                byte[] bytearray = null;
                string RepDate = string.Empty; string SecondLange = string.Empty; string TeacherName = string.Empty;
                string over = "All"; string title = "MarkList_" + PreRegNum + ""; var total = string.Empty; var comgrade = string.Empty;
                Double phy, che, bio, eng, lang, math, eco, phyedu, tot; string name = string.Empty;
                criteria.Clear();
                criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                criteria.Add("Section", section);
                criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(semester))
                {
                    if (semester == "Sem I") { criteria.Add("Semester", Convert.ToInt64(1)); }
                    else if (semester == "Sem II") { criteria.Add("Semester", Convert.ToInt64(2)); }
                    else if (semester == "Sem III") { criteria.Add("Semester", Convert.ToInt64(3)); }

                }
                ReportCardService rptCardSrvc = new ReportCardService();
                Dictionary<long, IList<RptCardInBoxView>> dcnRptCardLst = rptCardSrvc.GetRepCardInBoxListWithPagingAndCriteriaEQSearch(0, 9999, string.Empty, string.Empty, criteria);

                if (dcnRptCardLst != null && dcnRptCardLst.Count > 0 && dcnRptCardLst.FirstOrDefault().Key > 0)
                {
                    IList<RptCardInBoxView> TeacherandSeconLan = dcnRptCardLst.FirstOrDefault().Value.ToList();
                    TeacherName = TeacherandSeconLan[0].TeacherName;
                    SecondLange = TeacherandSeconLan[0].Second_Language;
                    RepDate = TeacherandSeconLan[0].RptDate.Value.ToString("dd/MM/yyyy");
                }
                if ((grade == "IX" || grade == "X") && (section == "A" || section == "B"))
                {
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        name = Totalsemlist.FirstOrDefault().Value[0].Name;
                        var arrlang = (from a in Totalsemlist.FirstOrDefault().Value
                                       select new { a.Subject }).ToList();
                    }
                    // get teacher name and secondlangue from the RptCard Table
                    if (!string.IsNullOrEmpty(semester))
                    {
                        if (semester == "Sem I") { criteria.Add("Semester", Convert.ToInt64(1)); }
                        else if (semester == "Sem II") { criteria.Add("Semester", Convert.ToInt64(2)); }
                        else if (semester == "Sem III") { criteria.Add("Semester", Convert.ToInt64(3)); }

                    }
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXAB>> GetClassIXABSubjectList = A360.GetClassIXABSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXAB> ClassIXABList = GetClassIXABSubjectList.FirstOrDefault().Value.ToList();
                    List<Totalsemlist> TotalList = Totalsemlist.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in TotalList
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();
                    if (Totalsemlist != null && Totalsemlist.Count > 0)
                    {
                        var Physics = (from u in Totalsemlist.First().Value
                                       where u.Subject == "Physics"
                                       select u.totalmark).ToList();
                        var Chemistry = (from u in Totalsemlist.First().Value
                                         where u.Subject == "Chemistry"
                                         select u.totalmark).ToList();
                        var Biology = (from u in Totalsemlist.First().Value
                                       where u.Subject == "Biology"
                                       select u.totalmark).ToList();

                        if (Physics.Count == 0) { phy = 0; } else { phy = Convert.ToDouble(Physics[0]); }
                        if (Chemistry.Count == 0) { che = 0; } else { che = Convert.ToDouble(Chemistry[0]); }
                        if (Biology.Count == 0) { bio = 0; } else { bio = Convert.ToDouble(Biology[0]); }

                        tot = Convert.ToDouble((phy + che + bio) / 3);
                        total = Convert.ToString(Math.Round(tot, 1));
                        comgrade = Convert.ToString((GetGradeList(total)));
                    }
                    if (Totalsemlist != null && Totalsemlist.Count > 0)
                    {
                        foreach (ClassforIXAB item in ClassIXABList)
                        {
                            var GetSubject = (from u in Totalsemlist.First().Value
                                              where u.Subject == item.Subject
                                              select u).ToList();
                            if (blksubject.Contains(item.Subject))
                            {
                                item.Subject = GetSubject[0].Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = GetSubject[0].totalmark;
                                item.Grade = (GetGradeList(item.Marks));
                            }
                            else
                            {
                                if (item.Subject == "Combined science")
                                {
                                    item.Subject = item.Subject; item.Marks = total; item.Grade = comgrade;
                                }
                                else
                                {
                                    item.Subject = item.Subject;
                                    if (item.Subject == "Language" && GetSubject.Count != 0)
                                    { item.Subject = item.Subject + " - " + SecondLange; }

                                    item.Marks = "";
                                    item.Grade = "";
                                }
                            }

                        }
                        string Overallgrade = "";
                        Double mrkdtotal = 0;
                        string Percentage = "";
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {
                                if (ClassIXABList[i].Marks == "" || ClassIXABList[i].Marks == null)
                                {
                                }
                                else
                                {
                                    mrkdtotal = Convert.ToDouble(ClassIXABList[i].Marks);
                                }
                            }
                            else
                            {
                                if (ClassIXABList[i].Marks == "" || ClassIXABList[i].Marks == null)
                                {
                                }
                                else
                                {
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXABList[i].Marks);
                                }
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };
                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXABList.Count; i++)
                        {
                            if (ClassIXABList[i].Marks == string.Empty)
                            { ClassIXABList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXABList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }

                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));
                        var ass = (from a in ClassIXABList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        bytearray = GradeIX_ExportToBulkPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                }
                else if ((grade == "IX" || grade == "X") && (section == "C" || section == "D"))
                {
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    // criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<Totalsemlist>> Totalsemlist = A360.GetTotalSemListWithCriteria1(0, 9999, string.Empty, string.Empty, criteria);
                    criteria.Clear();
                    Dictionary<long, IList<ClassforIXCD>> GetClassIXCDSubjectList = A360.GetClassIXCDSubjectListWithCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<ClassforIXCD> ClassIXCDList = GetClassIXCDSubjectList.FirstOrDefault().Value.ToList();
                    List<Totalsemlist> TotalList = Totalsemlist.FirstOrDefault().Value.ToList();
                    IEnumerable<string> blksubject = (from p in TotalList
                                                      orderby p.PreRegNum ascending
                                                      select p.Subject).ToArray();

                    if (Totalsemlist != null && Totalsemlist.Count > 0)
                    {
                        foreach (ClassforIXCD item in ClassIXCDList)
                        {
                            var GetSubject = (from u in Totalsemlist.First().Value
                                              where u.Subject == item.Subject
                                              select u).ToList();
                            if (blksubject.Contains(item.Subject))
                            {
                                item.Subject = GetSubject[0].Subject;
                                if (item.Subject == "Language" && GetSubject.Count != 0)
                                { item.Subject = item.Subject + " - " + SecondLange; }
                                item.Marks = GetSubject[0].totalmark;
                                item.Grade = (GetGradeList(item.Marks));
                            }
                            else
                            {
                                if (item.Subject == "Combined science")
                                {
                                    item.Subject = item.Subject; item.Marks = total; item.Grade = comgrade;
                                }
                                else
                                {
                                    item.Subject = item.Subject;
                                    if (item.Subject == "Language" && GetSubject.Count != 0)
                                    { item.Subject = item.Subject + " - " + SecondLange; }

                                    item.Marks = "";
                                    item.Grade = "";
                                }
                            }

                        }
                        string Overallgrade = "";
                        Double mrkdtotal = 0;
                        string Percentage = "";
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (mrkdtotal == 0)
                            {
                                if (ClassIXCDList[i].Marks == "" || ClassIXCDList[i].Marks == null)
                                {
                                }
                                else
                                {
                                    mrkdtotal = Convert.ToDouble(ClassIXCDList[i].Marks);
                                }
                            }
                            else
                            {
                                if (ClassIXCDList[i].Marks == "" || ClassIXCDList[i].Marks == null)
                                {
                                }
                                else
                                {
                                    mrkdtotal = mrkdtotal + Convert.ToDouble(ClassIXCDList[i].Marks);
                                }
                            }
                        }
                        string[] TblHeaders = new string[] { "  S.NO    ", "    Subject ", "    Marks   ", "    Grade   " };
                        float[] widths = new float[] { 20f, 100f, 20f, 20f };
                        // remove empty mark column for the list
                        for (int i = 0; i < ClassIXCDList.Count; i++)
                        {
                            if (ClassIXCDList[i].Marks == string.Empty)
                            { ClassIXCDList.RemoveAt(i); i = i - 1; }
                        }
                        int idNum = 1;
                        foreach (var item in ClassIXCDList)
                        {
                            item.Id = idNum;
                            idNum = idNum + 1;
                        }
                        Percentage = ((mrkdtotal / ((idNum - 1) * 100)) * 100).ToString();
                        Percentage = Convert.ToString(Math.Round(Convert.ToDouble(Percentage), 1));
                        Overallgrade = Convert.ToString((GetGradeList(Convert.ToString(Percentage))));

                        var ass = (from a in ClassIXCDList
                                   select new { a.Id, a.Subject, a.Marks, a.Grade }).ToList();
                        DataTable dt = ListToDataTable(ass);
                        bytearray = GradeIX_ExportToBulkPDF(title, TblHeaders, widths, dt, name, campus, grade, section, semester, Percentage, Overallgrade, over, TeacherName, SecondLange, RepDate);
                    }
                }
                else
                {
                    List<decimal> SingleStudMrks = new List<decimal>();
                    decimal EngMrks, LangMrks, BioMrks, MathsMrks, PhyMrks, CheMrks, IcdMrks, HcgMrks, TotalMrks, PercentageMrks;
                    criteria.Clear();
                    criteria.Add("PreRegNum", Convert.ToInt64(PreRegNum));
                    criteria.Add("Campus", campus);
                    criteria.Add("Grade", grade);
                    criteria.Add("Section", section);
                    // criteria.Add("AcademicYear", academicyear);
                    Dictionary<long, IList<Vw_FinalResult>> Totalsemlist = A360.GetFinalResultsListWidthCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    List<Vw_FinalResult> ListfromVItoVII = Totalsemlist.FirstOrDefault().Value.ToList();
                    if (Totalsemlist != null && Totalsemlist.Count > 0 && Totalsemlist.FirstOrDefault().Key > 0)
                    {
                        var English = (from u in Totalsemlist.FirstOrDefault().Value
                                       where u.Subject == "English"
                                       select u.TotalMarks).ToList();

                        EngMrks = (English.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(English[0]);
                        SingleStudMrks.Add(EngMrks);//0

                        var Language = (from u in Totalsemlist.FirstOrDefault().Value
                                        where u.Subject == "Language"
                                        select u.TotalMarks).ToList();
                        LangMrks = (Language.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Language[0]);
                        SingleStudMrks.Add(LangMrks);//1
                        var Biology = (from u in Totalsemlist.FirstOrDefault().Value
                                       where u.Subject == "Biology"
                                       select u.TotalMarks).ToList();
                        BioMrks = (Biology.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Biology[0]);
                        SingleStudMrks.Add(BioMrks);//2

                        var Mathematics = (from u in Totalsemlist.FirstOrDefault().Value
                                           where u.Subject == "Mathematics"
                                           select u.TotalMarks).ToList();
                        MathsMrks = (Mathematics.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Mathematics[0]);
                        SingleStudMrks.Add(MathsMrks);//3


                        var Physics = (from u in Totalsemlist.FirstOrDefault().Value
                                       where u.Subject == "Physics"
                                       select u.TotalMarks).ToList();
                        PhyMrks = (Physics.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Physics[0]);
                        SingleStudMrks.Add(PhyMrks);//4

                        var Chemistry = (from u in Totalsemlist.FirstOrDefault().Value
                                         where u.Subject == "Chemistry"
                                         select u.TotalMarks).ToList();
                        CheMrks = (Chemistry.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(Chemistry[0]);
                        SingleStudMrks.Add(CheMrks);//5

                        var ICT = (from u in Totalsemlist.FirstOrDefault().Value
                                   where u.Subject == "ICT"
                                   select u.TotalMarks).ToList();
                        IcdMrks = (ICT.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(ICT[0]);
                        SingleStudMrks.Add(IcdMrks);//6

                        var HCG = (from u in Totalsemlist.FirstOrDefault().Value
                                   where u.Subject == "HC&G"
                                   select u.TotalMarks).ToList();
                        HcgMrks = (HCG.Count == 0) ? Convert.ToDecimal(0) : Convert.ToDecimal(HCG[0]);
                        SingleStudMrks.Add(HcgMrks);//7
                        // calculate the total and percentage here.....
                        TotalMrks = (EngMrks + LangMrks + BioMrks + MathsMrks + PhyMrks + CheMrks + IcdMrks + HcgMrks);
                        SingleStudMrks.Add(TotalMrks);//8
                        int count = 0;
                        if (EngMrks != 0) { count = count + 1; }
                        if (LangMrks != 0) { count = count + 1; }
                        if (BioMrks != 0) { count = count + 1; }
                        if (MathsMrks != 0) { count = count + 1; }
                        if (PhyMrks != 0) { count = count + 1; }
                        if (CheMrks != 0) { count = count + 1; }
                        if (IcdMrks != 0) { count = count + 1; }
                        if (HcgMrks != 0) { count = count + 1; }
                        PercentageMrks = ((TotalMrks / (count * 100)) * 100);
                        SingleStudMrks.Add((Math.Round(PercentageMrks, 1)));//9
                        bytearray = PDFforVItoVIIIGradeBulkPDF(SingleStudMrks, PreRegNum, campus, grade, section, ListfromVItoVII[0].Name, TeacherName, SecondLange, RepDate);
                    }
                }
                return bytearray;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public byte[] GradeIX_ExportToBulkPDF(string Title, string[] TblHeaders, float[] widths, DataTable dt, string name, string campus, string grade, string section, string semester, string Percentage, string Overallgrade, string over, string TeacherName, string SecondLange, string RepDate)
        {
            try
            {
                string Sem = (semester == "Sem I") ? "I" : (semester == "Sem I") ? "II" : "III";
                Document document = new Document(PageSize.A4, 10.25f, 10.25f, 10.5f, 10.5f);

                iTextSharp.text.Image LogonaceImage;
                string LogonaceImagePath = ConfigurationManager.AppSettings["AppLogos"] + "logonace.jpg";

                LogonaceImage = iTextSharp.text.Image.GetInstance(LogonaceImagePath);
                LogonaceImage.ScaleAbsolute(55, 55);

                iTextSharp.text.Image LogoImage;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";

                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(55, 55);

                // For PDF export we are using the free open-source iTextSharp library.
                string month = DateTime.Now.ToString("MMMM");
                Document pdfDoc = new Document();
                pdfDoc.AddTitle(Title);
                MemoryStream pdfStream = new MemoryStream();
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

                pdfDoc.Open();//Open Document to write
                pdfDoc.NewPage();

                Font Heading = FontFactory.GetFont("ARIAL", 9, BaseColor.BLACK);
                Font Content = FontFactory.GetFont("ARIAL", 9);

                PdfPTable nace = new PdfPTable(4);
                float[] width = new float[] { 50f, 245f, 200f, 55f };
                nace.SetWidths(width);

                PdfPCell nace1 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));
                nace1.Border = 0;
                nace1.AddElement(LogonaceImage);
                nace.AddCell(nace1);

                if (over == "Single")
                {
                    PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE                                      SEMESTER " + Sem + "  ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                    nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                    nace2.Padding = 5;
                    nace2.Border = 0;
                    nace2.Colspan = 2;
                    nace.AddCell(nace2);
                }
                else
                {
                    PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE                                      OVERALL ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                    nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                    nace2.Padding = 5;
                    nace2.Border = 0;
                    nace2.Colspan = 2;
                    nace.AddCell(nace2);
                }

                PdfPCell nace4 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL))));

                nace4.Border = 0;
                nace4.AddElement(LogoImage);
                nace.AddCell(nace4);
                pdfDoc.Add(nace);

                PdfPTable p5 = new PdfPTable(4);
                PdfPCell pe1 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe1.Border = 0;
                pe1.Colspan = 4;
                p5.AddCell(pe1);

                PdfPCell pe0 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe0.Border = 0;
                pe0.Colspan = 4;
                p5.AddCell(pe0);

                pdfDoc.Add(p5);

                PdfPTable PdfTable = new PdfPTable(4);

                PdfPCell PdfPCel1 = new PdfPCell(new Phrase("Student : " + name + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel1.Padding = 4;
                PdfPCel1.Colspan = 2;
                PdfTable.AddCell(PdfPCel1);
                PdfPCell PdfPCel2 = new PdfPCell(new Phrase("Teacher    : " + TeacherName + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel2.Padding = 4;
                PdfPCel2.Colspan = 2;
                PdfTable.AddCell(PdfPCel2);
                PdfPCell PdfPCel3 = new PdfPCell(new Phrase("Grade    : " + grade + "-" + section + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel3.Padding = 4;
                PdfPCel3.Colspan = 2;
                PdfTable.AddCell(PdfPCel3);
                PdfPCell PdfPCel4 = new PdfPCell(new Phrase("Date       : " + RepDate + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                PdfPCel4.Colspan = 2;
                PdfPCel4.Padding = 4;
                PdfTable.AddCell(PdfPCel4);
                pdfDoc.Add(PdfTable); // add pdf table to the document

                PdfPTable Empt = new PdfPTable(4);
                PdfPCell Empt1 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt1.Border = 0;
                Empt1.Colspan = 4;
                Empt.AddCell(Empt1);

                PdfPCell Empt00 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt00.Border = 0;
                Empt00.Colspan = 4;
                Empt.AddCell(Empt00);

                pdfDoc.Add(Empt);

                PdfPTable Table = new PdfPTable(dt.Columns.Count);
                PdfPCell PdfPCell = new PdfPCell();
                for (int column = 0; column < dt.Columns.Count; column++)
                {
                    PdfPCell = new PdfPCell(new Phrase(new Chunk(TblHeaders[column], Heading)));
                    PdfPCell.Padding = 4;
                    PdfPCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    Table.TotalWidth = 420f;
                    Table.LockedWidth = true;
                    Table.SetWidths(widths);
                    Table.AddCell(PdfPCell);
                }
                //How add the data from datatable to pdf table
                for (int rows = 0; rows < dt.Rows.Count; rows++)
                {
                    for (int column = 0; column < dt.Columns.Count; column++)
                    {
                        PdfPCell = new PdfPCell(new Phrase(new Chunk(dt.Rows[rows][column].ToString(), Content)));
                        PdfPCell.Padding = 4;
                        Table.AddCell(PdfPCell);
                    }
                }
                pdfDoc.Add(Table); // add Table to the document

                PdfPTable Emp = new PdfPTable(4);
                PdfPCell Empt2 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt2.Border = 0;
                Empt2.Colspan = 4;
                Emp.AddCell(Empt2);

                pdfDoc.Add(Emp);

                PdfPTable per = new PdfPTable(4);
                PdfPCell per1 = new PdfPCell(new Phrase("Overall Percentage:  " + Percentage + "", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per1.Border = 0;
                per1.Padding = 10;
                per1.Colspan = 4;
                per.AddCell(per1);

                PdfPCell per2 = new PdfPCell(new Phrase("Overall Grade : " + Overallgrade + " ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per2.Border = 0;
                per2.Padding = 10;
                per2.Colspan = 4;
                per.AddCell(per2);
                pdfDoc.Add(per);


                PdfPTable repot = new PdfPTable(4);
                float[] widt = new float[] { 10f, 50f, 20f, 20f };
                PdfPCell repot1 = new PdfPCell(new Phrase("Class Teacher ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot1.HorizontalAlignment = Element.ALIGN_CENTER;
                repot1.PaddingTop = 50;
                repot.AddCell(repot1);
                PdfPCell repot2 = new PdfPCell(new Phrase("MYP Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot2.HorizontalAlignment = Element.ALIGN_CENTER;
                repot2.PaddingTop = 50;
                repot.AddCell(repot2);
                PdfPCell repot3 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot3.HorizontalAlignment = Element.ALIGN_CENTER;
                repot3.PaddingTop = 50;
                repot.AddCell(repot3);
                PdfPCell repot4 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot4.HorizontalAlignment = Element.ALIGN_CENTER;
                repot4.PaddingTop = 50;
                repot.AddCell(repot4);
                pdfDoc.Add(repot);

                PdfPTable Emp1 = new PdfPTable(4);
                PdfPCell Empt21 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt21.Border = 0;
                Empt21.Colspan = 4;
                Emp1.AddCell(Empt21);

                PdfPCell Empt41 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt41.Border = 0;
                Empt41.Colspan = 4;
                Emp1.AddCell(Empt41);
                pdfDoc.Add(Emp1);

                PdfPTable end = new PdfPTable(10);
                PdfPCell end1 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                end1.HorizontalAlignment = Element.ALIGN_CENTER;
                end1.Padding = 10;
                end1.Colspan = 10;
                end.AddCell(end1);

                PdfPCell t1 = new PdfPCell(new Phrase("Grade ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t1.HorizontalAlignment = Element.ALIGN_CENTER;
                t1.Padding = 6;
                end.AddCell(t1);

                PdfPCell t2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t2.Padding = 10;
                t2.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t2);

                PdfPCell t3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t3.Padding = 10;
                t3.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t3);

                PdfPCell t4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t4.Padding = 10;
                t4.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t4);

                PdfPCell t5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t5.Padding = 10;
                t5.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t5);


                PdfPCell t6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t6.Padding = 10;
                t6.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t6);


                PdfPCell t7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t7.Padding = 10;
                t7.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t7);

                PdfPCell t8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t8.Padding = 10;
                t8.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t8);

                PdfPCell t9 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t9.Padding = 10;
                t9.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t9);

                PdfPCell t10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t10.Padding = 10;
                t10.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t10);

                PdfPCell t11 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t11.Padding = 4;
                t11.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t11);

                PdfPCell t12 = new PdfPCell(new Phrase("90-100 ", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t12.Padding = 4;
                t12.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t12);

                PdfPCell t13 = new PdfPCell(new Phrase("80-89", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t13.Padding = 4;
                t13.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t13);

                PdfPCell t14 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t14.Padding = 4;
                t14.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t14);

                PdfPCell t15 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t15.Padding = 4;
                t15.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t15);

                PdfPCell t16 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t16.Padding = 4;
                t16.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t16);


                PdfPCell t17 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t17.Padding = 4;
                t17.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t17);

                PdfPCell t18 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t18.Padding = 4;
                t18.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t18);

                PdfPCell t19 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t19.Padding = 4;
                t19.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t19);

                PdfPCell t20 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("ARIAL", 9.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t20.Padding = 4;
                t20.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t20);
                pdfDoc.Add(end);

                Table.SpacingBefore = 7f; // Give some space after the text or it may overlap the table  

                pdfDoc.Close();
                pdfWriter.Close();
                return pdfStream.GetBuffer();
            }
            catch (Exception)
            {
                throw;
            }
        }
        public byte[] PDFforVItoVIIIGradeBulkPDF(IList<decimal> ListfromVItoVII, string PreRegNum, string campus, string gradeVal, string section, string NameVal, string TeacherNameVal, string SecondLangeVal, string MrksRptDate)
        {
            try
            {
                Document document = new Document(PageSize.A4, 10.25f, 10.25f, 10.5f, 10.5f);
                iTextSharp.text.Image LogonaceImage;
                string LogonaceImagePath = ConfigurationManager.AppSettings["AppLogos"] + "logonace.jpg";

                LogonaceImage = iTextSharp.text.Image.GetInstance(LogonaceImagePath);
                LogonaceImage.ScaleAbsolute(55, 55);

                iTextSharp.text.Image LogoImage;
                string ImagePath = ConfigurationManager.AppSettings["RptCard"] + "logo.jpg";

                LogoImage = iTextSharp.text.Image.GetInstance(ImagePath);
                LogoImage.ScaleAbsolute(55, 55);

                // For PDF export we are using the free open-source iTextSharp library.
                Document pdfDoc = new Document();
                pdfDoc.AddTitle(PreRegNum);
                MemoryStream pdfStream = new MemoryStream();
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, pdfStream);

                pdfDoc.Open();//Open Document to write
                pdfDoc.NewPage();

                PdfPTable nace = new PdfPTable(4);
                float[] width = new float[] { 50f, 245f, 200f, 55f };
                nace.SetWidths(width);

                PdfPCell nace1 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL))));
                nace1.Border = 0;
                nace1.AddElement(LogonaceImage);
                nace.AddCell(nace1);

                PdfPCell nace2 = new PdfPCell(new Phrase("THE INDIAN PUBLIC SCHOOL, COIMBATORE                                      OVERALL ACHIEVEMENT REPORT", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                nace2.HorizontalAlignment = Element.ALIGN_CENTER;
                nace2.Padding = 5;
                nace2.Border = 0;
                nace2.Colspan = 2;
                nace.AddCell(nace2);

                PdfPCell nace4 = new PdfPCell(new Phrase("nace logo", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL))));

                nace4.Border = 0;
                nace4.AddElement(LogoImage);
                nace.AddCell(nace4);
                pdfDoc.Add(nace);

                PdfPTable p5 = new PdfPTable(4);
                PdfPCell pe1 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe1.Border = 0;
                pe1.Colspan = 4;
                p5.AddCell(pe1);

                PdfPCell pe0 = new PdfPCell(new Phrase("    ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                pe0.Border = 0;
                pe0.Colspan = 4;
                p5.AddCell(pe0);

                pdfDoc.Add(p5);

                PdfPTable PdfTable = new PdfPTable(4);

                PdfPCell PdfPCel1 = new PdfPCell(new Phrase("Student    :  " + NameVal + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel1.Padding = 4;
                PdfPCel1.Colspan = 2;
                PdfTable.AddCell(PdfPCel1);
                PdfPCell PdfPCel2 = new PdfPCell(new Phrase("Teacher    :   " + TeacherNameVal + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel2.Padding = 4;
                PdfPCel2.Colspan = 2;
                PdfTable.AddCell(PdfPCel2);
                PdfPCell PdfPCel3 = new PdfPCell(new Phrase("Grade  :   " + gradeVal + " - " + section + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel3.Padding = 4;
                PdfPCel3.Colspan = 2;
                PdfTable.AddCell(PdfPCel3);
                PdfPCell PdfPCel4 = new PdfPCell(new Phrase("Date   :   " + MrksRptDate + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                PdfPCel4.Colspan = 2;
                PdfPCel4.Padding = 4;
                PdfTable.AddCell(PdfPCel4);
                pdfDoc.Add(PdfTable); // add pdf table to the document

                PdfPTable Empt = new PdfPTable(4);


                PdfPCell Empt1 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt1.Border = 0;
                Empt1.Colspan = 4;
                Empt.AddCell(Empt1);

                PdfPCell Empt00 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt00.Border = 0;
                Empt00.Colspan = 4;
                Empt.AddCell(Empt00);

                pdfDoc.Add(Empt);

                PdfPTable Table = new PdfPTable(3);
                float[] wid = new float[] { 10f, 80f, 10f };
                Table.SetWidths(wid);

                PdfPCell sno = new PdfPCell(new Phrase("S.NO", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                sno.HorizontalAlignment = Element.ALIGN_CENTER;
                Table.AddCell(sno);

                PdfPCell subject = new PdfPCell(new Phrase("Subject", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                subject.HorizontalAlignment = Element.ALIGN_CENTER;
                Table.AddCell(subject);

                PdfPCell grade = new PdfPCell(new Phrase("Grade", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.BOLD, new BaseColor(0, 0, 0)))));
                grade.HorizontalAlignment = Element.ALIGN_CENTER;
                Table.AddCell(grade);

                PdfPCell snoone = new PdfPCell(new Phrase("1", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoone.Padding = 4;
                Table.AddCell(snoone);

                PdfPCell English = new PdfPCell(new Phrase("English", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                English.Padding = 4;
                Table.AddCell(English);

                PdfPCell Englishgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[0].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Englishgrade.Padding = 4;
                Table.AddCell(Englishgrade);

                PdfPCell snoTwo = new PdfPCell(new Phrase("2", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoTwo.Padding = 4;
                Table.AddCell(snoTwo);

                PdfPCell Language = new PdfPCell(new Phrase("Language - " + SecondLangeVal + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Language.Padding = 4;
                Table.AddCell(Language);

                PdfPCell Languagegrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[1].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Languagegrade.Padding = 4;
                Table.AddCell(Languagegrade);

                PdfPCell snoThree = new PdfPCell(new Phrase("3", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoThree.Padding = 4;
                Table.AddCell(snoThree);

                PdfPCell Biology = new PdfPCell(new Phrase("Biology", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Biology.Padding = 4;
                Table.AddCell(Biology);

                PdfPCell Biologygrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[2].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Biologygrade.Padding = 4;
                Table.AddCell(Biologygrade);

                PdfPCell snoFour = new PdfPCell(new Phrase("4", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoFour.Padding = 4;
                Table.AddCell(snoFour);

                PdfPCell Mathematics = new PdfPCell(new Phrase("Mathematics", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Mathematics.Padding = 4;
                Table.AddCell(Mathematics);

                PdfPCell Mathematicsgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[3].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Mathematicsgrade.Padding = 4;
                Table.AddCell(Mathematicsgrade);

                PdfPCell snoFive = new PdfPCell(new Phrase("5", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoFive.Padding = 4;
                Table.AddCell(snoFive);

                PdfPCell Physics = new PdfPCell(new Phrase("Physics", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Physics.Padding = 4;
                Table.AddCell(Physics);

                PdfPCell Physicsgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[4].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Physicsgrade.Padding = 3;
                Table.AddCell(Physicsgrade);

                PdfPCell snoSix = new PdfPCell(new Phrase("6", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoSix.Padding = 4;
                Table.AddCell(snoSix);

                PdfPCell Chemistry = new PdfPCell(new Phrase("Chemistry", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Chemistry.Padding = 4;
                Table.AddCell(Chemistry);

                PdfPCell Chemistrygrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[5].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Chemistrygrade.Padding = 4;
                Table.AddCell(Chemistrygrade);

                PdfPCell snoSeven = new PdfPCell(new Phrase("7", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoSeven.Padding = 4;
                Table.AddCell(snoSeven);

                PdfPCell ICT = new PdfPCell(new Phrase("ICT", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                ICT.Padding = 4;
                Table.AddCell(ICT);

                PdfPCell ICTgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[6].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                ICTgrade.Padding = 4;
                Table.AddCell(ICTgrade);

                PdfPCell snoEight = new PdfPCell(new Phrase("8", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                snoEight.Padding = 4;
                Table.AddCell(snoEight);

                PdfPCell HCG = new PdfPCell(new Phrase("History & Geography", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                HCG.Padding = 4;
                Table.AddCell(HCG);

                PdfPCell HCGgrade = new PdfPCell(new Phrase("" + GetGradeList(ListfromVItoVII[7].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 8.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                HCGgrade.Padding = 4;
                Table.AddCell(HCGgrade);
                pdfDoc.Add(Table); // add Table to the document

                PdfPTable Emp = new PdfPTable(4);
                PdfPCell Empt2 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt2.Border = 0;
                Empt2.Colspan = 4;
                Emp.AddCell(Empt2);

                pdfDoc.Add(Emp);

                PdfPTable per = new PdfPTable(4);
                PdfPCell per2 = new PdfPCell(new Phrase("Overall Grade : " + GetGradeList(ListfromVItoVII[9].ToString()) + "", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per2.Border = 0;
                per2.Padding = 10;
                per2.Colspan = 4;
                per.AddCell(per2);


                PdfPCell per1 = new PdfPCell(new Phrase("Promoted / Conditional Promotion / Not Promoted to :   ----------------------------------", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                per1.Border = 0;
                per1.Padding = 10;
                per1.Colspan = 4;
                per.AddCell(per1);
                pdfDoc.Add(per);

                PdfPTable repot = new PdfPTable(4);
                float[] widt = new float[] { 10f, 50f, 20f, 20f };
                PdfPCell repot1 = new PdfPCell(new Phrase("Class Teacher ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot1.HorizontalAlignment = Element.ALIGN_CENTER;
                repot1.PaddingTop = 50;
                repot.AddCell(repot1);
                PdfPCell repot2 = new PdfPCell(new Phrase("MYP Coordinator", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot2.HorizontalAlignment = Element.ALIGN_CENTER;
                repot2.PaddingTop = 50;
                repot.AddCell(repot2);
                PdfPCell repot3 = new PdfPCell(new Phrase("Head of the School", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot3.HorizontalAlignment = Element.ALIGN_CENTER;
                repot3.PaddingTop = 50;
                repot.AddCell(repot3);
                PdfPCell repot4 = new PdfPCell(new Phrase("Parent", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                repot4.HorizontalAlignment = Element.ALIGN_CENTER;
                repot4.PaddingTop = 50;
                repot.AddCell(repot4);
                pdfDoc.Add(repot);

                PdfPTable Emp1 = new PdfPTable(4);
                PdfPCell Empt21 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt21.Border = 0;
                Empt21.Colspan = 4;
                Emp1.AddCell(Empt21);

                PdfPCell Empt41 = new PdfPCell(new Phrase(" ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                Empt41.Border = 0;
                Empt41.Colspan = 4;
                Emp1.AddCell(Empt41);
                pdfDoc.Add(Emp1);

                PdfPTable end = new PdfPTable(10);
                PdfPCell end1 = new PdfPCell(new Phrase("CRITERIA OF ASSESSMENT", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                end1.HorizontalAlignment = Element.ALIGN_CENTER;
                end1.Padding = 10;
                end1.Colspan = 10;
                end.AddCell(end1);

                PdfPCell t1 = new PdfPCell(new Phrase("Grade ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t1.HorizontalAlignment = Element.ALIGN_CENTER;
                t1.Padding = 6;
                end.AddCell(t1);

                PdfPCell t2 = new PdfPCell(new Phrase("A*", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t2.Padding = 10;
                t2.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t2);

                PdfPCell t3 = new PdfPCell(new Phrase("A", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t3.Padding = 10;
                t3.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t3);

                PdfPCell t4 = new PdfPCell(new Phrase("B", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t4.Padding = 10;
                t4.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t4);

                PdfPCell t5 = new PdfPCell(new Phrase("C", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t5.Padding = 10;
                t5.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t5);


                PdfPCell t6 = new PdfPCell(new Phrase("D", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t6.Padding = 10;
                t6.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t6);


                PdfPCell t7 = new PdfPCell(new Phrase("E", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t7.Padding = 10;
                t7.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t7);

                PdfPCell t8 = new PdfPCell(new Phrase("F", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t8.Padding = 10;
                t8.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t8);

                PdfPCell t9 = new PdfPCell(new Phrase("G", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t9.Padding = 10;
                t9.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t9);

                PdfPCell t10 = new PdfPCell(new Phrase("U", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t10.Padding = 10;
                t10.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t10);

                PdfPCell t11 = new PdfPCell(new Phrase("%of marks", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t11.Padding = 4;
                t11.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t11);

                PdfPCell t12 = new PdfPCell(new Phrase("90-100 ", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t12.Padding = 4;
                t12.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t12);

                PdfPCell t13 = new PdfPCell(new Phrase("80-89", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t13.Padding = 4;
                t13.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t13);

                PdfPCell t14 = new PdfPCell(new Phrase("70-79", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t14.Padding = 4;
                t14.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t14);

                PdfPCell t15 = new PdfPCell(new Phrase("60-69", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t15.Padding = 4;
                t15.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t15);

                PdfPCell t16 = new PdfPCell(new Phrase("50-59", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t16.Padding = 4;
                t16.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t16);


                PdfPCell t17 = new PdfPCell(new Phrase("40-49", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t17.Padding = 4;
                t17.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t17);

                PdfPCell t18 = new PdfPCell(new Phrase("30-39", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t18.Padding = 4;
                t18.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t18);

                PdfPCell t19 = new PdfPCell(new Phrase("20-29", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t19.Padding = 4;
                t19.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t19);

                PdfPCell t20 = new PdfPCell(new Phrase("0-19", new iTextSharp.text.Font(FontFactory.GetFont("Verdana", 10.0f, iTextSharp.text.Font.NORMAL, new BaseColor(0, 0, 0)))));
                t20.Padding = 4;
                t20.HorizontalAlignment = Element.ALIGN_CENTER;
                end.AddCell(t20);
                pdfDoc.Add(end);

                pdfDoc.Close();
                pdfWriter.Close();
                return pdfStream.ToArray();
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion "End"

        public ActionResult AcademicYearddl()
        {
            try
            {
                MastersService ms = new MastersService();
                Dictionary<string, string> aca = new Dictionary<string, string>();

                Dictionary<string, object> criteria = new Dictionary<string, object>();

                Dictionary<long, IList<AcademicyrMaster>> AcaYear = ms.GetAcademicyrMasterListWithPagingAndCriteria(null, null, null, null, criteria);

                foreach (AcademicyrMaster ay in AcaYear.First().Value)
                {
                    aca.Add(ay.AcademicYear, ay.AcademicYear);
                }
                return PartialView("Dropdown", aca);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult GetCampusddl()
        {
            try
            {
                MastersService ms = new MastersService();
                Dictionary<string, string> Cmp = new Dictionary<string, string>();

                Dictionary<string, object> criteria = new Dictionary<string, object>();

                Dictionary<long, IList<CampusMaster>> CampusMstr = ms.GetCampusMasterListWithPagingAndCriteria(null, null, null, null, criteria);

                foreach (CampusMaster campus in CampusMstr.First().Value)
                {
                    Cmp.Add(campus.Name, campus.Name);
                }
                return PartialView("Dropdown", Cmp);
            }
            catch (Exception ex)
            {
                // ExceptionPolicy.HandleException(ex, "Policy");
                throw ex;
            }
        }
        public ActionResult GetGradeddl()
        {
            try
            {
                Dictionary<string, string> Grade = new Dictionary<string, string>();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                Dictionary<long, IList<GradeMaster>> GradeMstr = ms.GetGradeMasterListWithPagingAndCriteria(null, null, null, null, criteria);
                foreach (GradeMaster Grd in GradeMstr.First().Value)
                {
                    Grade.Add(Grd.gradcod, Grd.gradcod);
                }
                return PartialView("Dropdown", Grade);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        public ActionResult GetSubjectsByGradeddl(string Campus, string Grade)
        {
            try
            {
                Dictionary<string, string> subject = new Dictionary<string, string>();
                Assess360Service assSrv = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(Grade) && Grade != "Select") { criteria.Add("Grade", Grade); }
                if (!string.IsNullOrWhiteSpace(Campus)) { criteria.Add("Campus", Campus); }
                Dictionary<long, IList<SubjectMaster>> subMaster = assSrv.GetSubjectMasterListWithPagingAndCriteria(0, 9999, "SubjectName", "Asc", criteria);
                if (subMaster != null && subMaster.Count > 0)
                {
                    foreach (SubjectMaster sub in subMaster.First().Value)
                    {
                        subject.Add(sub.SubjectName, sub.SubjectName);
                    }
                }
                return PartialView("Dropdown", subject);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally { }
        }

        public ActionResult GetGradeByCampus(string Campus)
        {
            try
            {
                MastersService ms = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", Campus);
                Dictionary<long, IList<CampusGradeMaster>> CampusList = ms.GetCampusGradeMasterListWithPagingAndCriteria(0, 9999, "", "", criteria);
                var camp = (from items in CampusList.FirstOrDefault().Value
                            select new
                            {
                                Text = items.gradcod,
                                Value = items.gradcod
                            }).Distinct().ToList();
                return Json(camp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {

                throw;
            }
        }

        #region "Semester Master"
        public ActionResult SemesterMaster()
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null)
                return RedirectToAction("LogOff", "Account");
            else
            {
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
        }
        public ActionResult SemesterJqGrid(string Campus, string Grade, string AcademicYear, string Sem, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus))
                {
                    criteria.Add("Campus", Campus);
                }
                if (!string.IsNullOrEmpty(Grade))
                {
                    criteria.Add("Grade", Grade);
                }
                if (!string.IsNullOrEmpty(AcademicYear))
                {
                    criteria.Add("AcademicYear", AcademicYear);
                }
                if (!string.IsNullOrEmpty(Sem))
                {
                    criteria.Add("Sem", Sem);
                }
                Dictionary<long, IList<SemesterMaster>> SemesterList = a360.GetSemesterListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                if (SemesterList != null && SemesterList.Count > 0)
                {
                    long totalrecords = SemesterList.First().Key;
                    int totalpages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsondat = new
                    {
                        total = totalpages,
                        page = page,
                        records = totalrecords,
                        rows = (from items in SemesterList.FirstOrDefault().Value
                                select new
                                {
                                    i = 2,
                                    cell = new string[]{
                                          items.SemesterMasterId.ToString(),
                                          items.Campus,
                                          items.Grade,
                                          items.AcademicYear,
                                          items.Sem,
                                          items.FromDate.ToString("dd/MM/yyyy"),
                                          items.ToDate.ToString("dd/MM/yyyy"),
                                          items.ExamDate!=null?items.ExamDate.Value.ToString("dd/MM/yyyy"):"",
                                          items.CreatedBy,
                                          items.CreatedDate.ToString(),
                                          items.ModifiedBy,
                                          items.ModifiedDate.ToString()
                                      }
                                })
                    };
                    return Json(jsondat, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        public ActionResult AddSemester(SemesterMaster semester)
        {
            try
            {
                IFormatProvider provider = new System.Globalization.CultureInfo("en-CA", true);
                string userId = ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    Assess360Service a360 = new Assess360Service();
                    if (!string.IsNullOrWhiteSpace(Request["Fromdate"]))
                    {
                        semester.FromDate = DateTime.Parse(Request["FromDate"], provider, System.Globalization.DateTimeStyles.NoCurrentDateDefault);
                    }
                    if (!string.IsNullOrWhiteSpace(Request["ToDate"]))
                    {
                        semester.ToDate = DateTime.Parse(Request["ToDate"], provider, System.Globalization.DateTimeStyles.NoCurrentDateDefault);
                    }
                    if (!string.IsNullOrWhiteSpace(Request["ExamDate"]))
                    {
                        semester.ExamDate = DateTime.Parse(Request["ExamDate"], provider, System.Globalization.DateTimeStyles.NoCurrentDateDefault);
                    }
                    semester.CreatedBy = userId;
                    semester.CreatedDate = DateTime.Now;
                    semester.ModifiedBy = userId;
                    semester.ModifiedDate = DateTime.Now;
                    a360.SaveOrUpdateSemester(semester);
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception)
            {

                throw;
            }


        }
        public ActionResult EditSemester(SemesterMaster semester)
        {
            try
            {
                if (semester.SemesterMasterId > 0)
                {
                    SemesterMaster Obj = new SemesterMaster();
                    Assess360Service a360 = new Assess360Service();
                    Obj.Campus = semester.Campus;
                    Obj.Grade = semester.Grade;
                    Obj.AcademicYear = semester.AcademicYear;
                    Obj.Sem = semester.Sem;
                    Obj.FromDate = semester.FromDate;
                    Obj.ToDate = semester.ToDate;
                    Obj.ExamDate = semester.ExamDate;
                    Obj.SemesterMasterId = semester.SemesterMasterId;
                    a360.SaveOrUpdateSemester(Obj);
                }
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {

                throw;
            }
        }
        public ActionResult DeleteSemester(string[] Id)
        {
            try
            {
                SemesterMaster Obj = new SemesterMaster();
                Assess360Service a360 = new Assess360Service();
                string[] ArraySemId = Id[0].Split(',');
                for (int i = 0; i < ArraySemId.Length; i++)
                {
                    Obj = a360.GetSemesterById(Convert.ToInt64(ArraySemId[i]));
                    a360.DeleteSemester(Obj);
                }
                return null;
            }
            catch (Exception)
            {

                throw;
            }
        }
        public ActionResult GetSemester(string campus, string grade)
        {
            try
            {
                MastersService ms = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", campus);
                criteria.Add("Grade", grade);
                if (grade == "IX" || grade == "X")
                {
                    criteria.Add("AcademicYear", DateTime.Now.Year.ToString() + "-" + (DateTime.Now.Year + 1).ToString());
                }
                else
                {
                    //if (campus == "CHENNAI MAIN")
                    //    criteria.Add("AcademicYear", (DateTime.Now.Year - 1).ToString() + "-" + DateTime.Now.Year.ToString());
                    //else 
                    if (DateTime.Now.Month > 5)
                        criteria.Add("AcademicYear", DateTime.Now.Year.ToString() + "-" + (DateTime.Now.Year + 1).ToString());
                    else
                        criteria.Add("AcademicYear", (DateTime.Now.Year - 1).ToString() + "-" + DateTime.Now.Year.ToString());
                }
                Dictionary<long, IList<SemesterMaster>> SemesterList = a360Obj.GetSemesterListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
                var camp = (from items in SemesterList.FirstOrDefault().Value
                            select new
                            {
                                Text = items.Sem,
                                Value = items.Sem
                            }).Distinct().ToList();
                return Json(camp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion

        #region "ReportCard Achievement"
        public ActionResult AddReportCardAchievementdetails(RptCardAchievement objRptCardAchivement)
        {
            IFormatProvider provider = new System.Globalization.CultureInfo("en-CA", true);
            Assess360Service assSrvs = new Assess360Service();
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            string result = "";
            if (objRptCardAchivement.Id <= 0)
            {
                objRptCardAchivement.CreatedDate = DateTime.Now;
                objRptCardAchivement.CreatedBy = Userobj != null ? Userobj.UserId : "";
                objRptCardAchivement.ModifiedDate = DateTime.Now;
                objRptCardAchivement.ModifiedBy = Userobj != null ? Userobj.UserId : "";
                result = "Inserted";
            }
            else
            {
                objRptCardAchivement.CreatedDate = DateTime.Parse(Request["createddate"], provider, System.Globalization.DateTimeStyles.NoCurrentDateDefault);
                objRptCardAchivement.ModifiedDate = DateTime.Now;
                objRptCardAchivement.ModifiedBy = Userobj.UserId;
                result = "Updated";
            }
            long AchieveId = assSrvs.SaveOrUpdateReportCardAchievement(objRptCardAchivement);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult DeleteStudentAchievement(long[] studAchieveIds)
        {
            try
            {
                if (studAchieveIds.Length > 0)
                {
                    Assess360Service assSrvc = new Assess360Service();
                    bool isSucess = assSrvc.DeleteStudentAchievement(studAchieveIds);
                    if (isSucess)
                    { return Json("Achievement deleted sucessfully."); }
                    else
                    { return Json("Achievement not deleted."); }
                }
                else
                { return Json("Please select the Achievement."); }
            }
            catch (Exception ex)
            { return ThrowJSONError(ex); }
        }
        public ActionResult GetStudentAchievementListJqGrid(int rows, string sidx, string sord, string Staff, long? RefId = 0, int? page = 1)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                sord = sord == "asc" ? "Asc" : "Desc";
                if (RefId > 0) { criteria.Add("RefId", RefId); }
                Dictionary<long, IList<RptCardAchievement>> rptAchievementLst = assSrvc.GetStudentAchievementListWithPagingAndInCriteria(page - 1, rows, sidx, sord, criteria);
                if (rptAchievementLst != null && rptAchievementLst.Count > 0 && rptAchievementLst.FirstOrDefault().Key > 0)
                {

                    long totalRecords = rptAchievementLst.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptAchievementLst.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[] { 
                            items.Id.ToString(),  
                            items.RefId.ToString(), 
                            items.SemesterType,
                            items.AchievementType,
                            items.AchievementDescription,
                            items.CreatedDate==null?"":items.CreatedDate.Value.ToString("dd-MMM-yyyy"),
                            items.CreatedBy}
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                { return Json(null, JsonRequestBehavior.AllowGet); }

            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }
        #endregion

        #region "RptCardMarkWeightingsMaster"
        public ActionResult GetMarkWeightingsbyCampusGrade(string Campus, string Grade, string Subject, string AssignmntName)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus) && !string.IsNullOrEmpty(Grade) && !string.IsNullOrEmpty(Subject) && !string.IsNullOrEmpty(AssignmntName))
                {
                    string AcYear = ""; DateTime DateNow = DateTime.Now;
                    if (Grade == "IX" || Grade == "X")
                    {
                        AcYear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                    }
                    else
                    {
                        //if (Campus == "CHENNAI MAIN")
                        //    AcYear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                        //else 
                        if (DateNow.Month > 5)
                            AcYear = DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString();
                        else
                            AcYear = (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString();
                    }
                    criteria.Add("Campus", Campus);
                    criteria.Add("Grade", Grade);
                    criteria.Add("AcademicYear", AcYear);
                    criteria.Add("Subject", Subject.Trim());
                    criteria.Add("ComponentTitle", AssignmntName.Trim());
                    Dictionary<long, IList<RptCardMarkWeightingMaster>> rptMarkweight = assSrvc.GetReportCardMarkWeightingsWihtCriteria(0, 99, string.Empty, string.Empty, criteria);
                    if (rptMarkweight != null && rptMarkweight.Count > 0 && rptMarkweight.FirstOrDefault().Key > 0)
                    {
                        return Json(rptMarkweight.FirstOrDefault().Value[0].TotalMarks, JsonRequestBehavior.AllowGet);
                    }
                    else
                    { return Json(null, JsonRequestBehavior.AllowGet); }
                }
                else { return Json(null, JsonRequestBehavior.AllowGet); }


            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }

        public ActionResult WeightingMaster()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                    return RedirectToAction("LogOff", "Account");
                else
                {
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                    ViewBag.campusddl = CampusMaster.First().Value;
                    Dictionary<long, IList<AcademicyrMaster>> AcademicyrMaster = ms.GetAcademicyrMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, null);
                    ViewBag.acadddl = AcademicyrMaster.First().Value;
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult WeightingMasterJqGrid(string Campus, string Grade, string AcademicYear, string Subject, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus))
                {
                    criteria.Add("Campus", Campus);
                }
                if (!string.IsNullOrEmpty(Grade))
                {
                    criteria.Add("Grade", Grade);
                }
                if (!string.IsNullOrEmpty(AcademicYear))
                {
                    criteria.Add("AcademicYear", AcademicYear);
                }
                if (!string.IsNullOrEmpty(Subject))
                {
                    criteria.Add("Subject", Subject);
                }
                Dictionary<long, IList<RptCardMarkWeightingMaster>> rptMarkweight = a360Obj.GetReportCardMarkWeightingsWihtCriteria(page - 1, rows, sord, sidx, criteria);
                if (rptMarkweight != null && rptMarkweight.Count > 0)
                {
                    long totalrecords = rptMarkweight.First().Key;
                    int totalpages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsondat = new
                    {
                        total = totalpages,
                        page = page,
                        records = totalrecords,
                        rows = (from items in rptMarkweight.FirstOrDefault().Value
                                select new
                                {
                                    i = 2,
                                    cell = new string[]{
                                          items.Id.ToString(),
                                          items.Campus,
                                          items.Grade,
                                          items.AcademicYear,
                                          items.Subject,
                                          items.ComponentTitle,
                                          items.Weightings.ToString(),
                                          items.TotalMarks.ToString(),
                                          items.CreatedBy,
                                          items.CreatedDate.ToString(),
                                          items.ModifiedBy,
                                          items.ModifiedDate.ToString()
                                      }
                                })
                    };
                    return Json(jsondat, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult AddRptCardMarkWeightingMaster(RptCardMarkWeightingMaster rtpweighting, string IsEdit)
        {
            try
            {
                IFormatProvider provider = new System.Globalization.CultureInfo("en-CA", true);
                string userId = ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    Assess360Service a360 = new Assess360Service();
                    rtpweighting.CreatedBy = userId;
                    rtpweighting.CreatedDate = DateTime.Now;
                    rtpweighting.ModifiedBy = userId;
                    rtpweighting.ModifiedDate = DateTime.Now;
                    a360.SaveOrUpdateRptCardMarkWeightingMaster(rtpweighting);
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception)
            {

                throw;
            }


        }
        public ActionResult DeleteRptCardMarkWeightingMaster(string[] Id)
        {
            try
            {
                RptCardMarkWeightingMaster Obj = new RptCardMarkWeightingMaster();
                Assess360Service a360 = new Assess360Service();
                string[] ArraySemId = Id[0].Split(',');
                for (int i = 0; i < ArraySemId.Length; i++)
                {
                    Obj = a360.GetRptCardMarkWeightingMasterById(Convert.ToInt64(ArraySemId[i]));
                    a360.DeleteRptCardMarkWeightingMaster(Obj);
                }
                return null;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public ActionResult WeightingCrossCheck()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                    return RedirectToAction("LogOff", "Account");
                else
                {

                    Dictionary<long, IList<AcademicyrMaster>> AcademicyrMaster = ms.GetAcademicyrMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, null);
                    ViewBag.acadddl = AcademicyrMaster.First().Value;
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }
        public ActionResult WeightingCrossCheckJqGrid(string Campus, string Grade, string AcademicYear, string Subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            try
            {
                Assess360Service a360 = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus))
                {
                    criteria.Add("Campus", Campus);
                }
                if (!string.IsNullOrEmpty(Grade))
                {
                    criteria.Add("Grade", Grade);
                }
                if (!string.IsNullOrEmpty(AcademicYear))
                {
                    criteria.Add("AcademicYear", AcademicYear);
                }
                if (!string.IsNullOrEmpty(Subject))
                {
                    criteria.Add("Subject", Subject);
                }
                Dictionary<long, IList<WeightingMasterCrossCheck_Vw>> weightcrschk = a360Obj.GetWeightingsMasterCrossCheckListWihtCriteria(page - 1, rows, sidx, sord, criteria);
                if (weightcrschk != null && weightcrschk.Count > 0)
                {
                    if (ExptXl == 1)
                    {
                        var List = weightcrschk.First().Value.ToList();
                        base.ExptToXL(List, "WeightingCrossCheck", (items => new
                        {
                            items.Campus,
                            items.Grade,
                            items.AcademicYear,
                            items.Subject,
                            AssignmentName = items.ComponentTitle,
                            WeightingMarks = items.Weightings.ToString(),
                            TotalMarks = items.TotalMarks.ToString(),
                            items.IsMatched,
                        }));
                        return new EmptyResult();
                    }
                    else
                    {
                        long totalrecords = weightcrschk.First().Key;
                        int totalpages = (int)Math.Ceiling(totalrecords / (float)rows);
                        var jsondat = new
                        {
                            total = totalpages,
                            page = page,
                            records = totalrecords,
                            rows = (from items in weightcrschk.FirstOrDefault().Value
                                    select new
                                    {
                                        i = 2,
                                        cell = new string[]{
                                          items.Id.ToString(),
                                          items.Campus,
                                          items.Grade,
                                          items.AcademicYear,
                                          items.Subject,
                                          items.ComponentTitle,
                                          items.Weightings.ToString(),
                                          items.TotalMarks.ToString(),
                                          items.IsMatched.ToString()
                                      }
                                    })
                        };
                        return Json(jsondat, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        #endregion

        #region "Rotativa PDF Generation"

        public ActionResult GeneratePDF(long? assessid, string term)
        {
            if (assessid != null && !string.IsNullOrEmpty(term))
            {
                Assess360 objAssess360 = a360Obj.GetAssess360ById(assessid ?? 0);
                return new Rotativa.ActionAsPdf("Container", new { Id = assessid, Term = term })
                {
                    PageMargins = new Rotativa.Options.Margins(0, 0, 0, 0),
                    PageOrientation = Rotativa.Options.Orientation.Portrait,
                    FileName = objAssess360.IdNo + ".pdf"
                };
            }
            else return null;
        }

        [HttpGet]
        public FileResult GetChart(long? assessid, string term)
        {
            Assess360 objAssess360 = a360Obj.GetAssess360ById(assessid ?? 0);
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            criteria.Clear();
            criteria.Add("Campus", objAssess360.Campus);
            criteria.Add("Grade", objAssess360.Grade);
            criteria.Add("Sem", term);
            criteria.Add("AcademicYear", objAssess360.AcademicYear);
            Dictionary<long, IList<SemesterMaster>> semesterList = a360Obj.GetSemesterListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
            if (semesterList != null && semesterList.FirstOrDefault().Value.Count > 0 && semesterList.FirstOrDefault().Key > 0)
            {
                DateTime startDate, endDate;
                DateTime[] fromtosem = new DateTime[2];
                startDate = semesterList.FirstOrDefault().Value[0].FromDate;
                endDate = semesterList.FirstOrDefault().Value[0].ToDate;
                startDate = new DateTime(startDate.Year, startDate.Month, 1);
                endDate = new DateTime(endDate.Year, endDate.Month, DateTime.DaysInMonth(endDate.Year, endDate.Month));
                fromtosem[0] = startDate;
                fromtosem[1] = endDate;
                criteria.Clear();
                criteria.Add("Assess360Id", assessid);
                criteria.Add("IncidentDate", fromtosem);
                Dictionary<long, IList<Assess360MarkcalculationForChart_Vw>> ChartListVw = a360Obj.GetAssess360MarkcalculationForChart_VwListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
                List<string> subLst = (from u in ChartListVw.FirstOrDefault().Value
                                       orderby u.Subject ascending
                                       select u.Subject).Distinct().ToList();
                var chartData = CMS.Models.RptCardShareModel.RptCardShareRepository.GetStudentShares(assessid, term);
                return File(chartData.ChartImageStream(subLst).GetBuffer(), @"image/png", "RptCardChart.png");
            }
            return null;
        }

        public ActionResult Container(long? Id, string term)
        {
            try
            {
                //Dictionary<string, object> criteria = new Dictionary<string, object>();
                ReportCardFromAssess360VItoVIII obj = new ReportCardFromAssess360VItoVIII();
                Assess360 objAssess360 = a360Obj.GetAssess360ById(Id ?? 0);
                //Assess360 objAssess360 = a360Obj.GetAssess360ById(1348);
                if (objAssess360 != null)
                {
                    obj.Name = objAssess360.Name;
                    obj.IdNo = objAssess360.IdNo;
                    obj.Grade = objAssess360.Grade;
                    obj.Section = objAssess360.Section;
                    obj.AcademicYear = objAssess360.AcademicYear;
                    obj.Campus = objAssess360.Campus;
                    obj.Term = term;
                    obj.AssessId = objAssess360.Id;
                    IList<ReportCardSubjectMarks> RptCardSubjectWithMark = CreateReportCardListFromAssess360(objAssess360.Id, objAssess360.Grade, objAssess360.Campus, objAssess360.Section, term);
                    obj.RptMarks = RptCardSubjectWithMark;
                    var exceptionList = new List<string> { "SPARK LAB", "SPORTS & GAMES", "STEM LAB", "FINE ARTS" };
                    var sem1 = RptCardSubjectWithMark
                        .Where(x => x.Semester == "Sem I")
                        .Where(x => !exceptionList.Contains(x.SubjectName))
                        .GroupBy(x => new { x.Semester })
                        .Select(g => new
                        {
                            TotalMarks = g.Sum(x => x.SubjectOverAll) / g.Count(), //To Do get sem1 over all mark
                        });
                    var sem2 = RptCardSubjectWithMark
                       .Where(x => x.Semester == "Sem II")
                       .Where(x => !exceptionList.Contains(x.SubjectName))
                       .GroupBy(x => new { x.Semester })
                       .Select(g => new
                       {
                           TotalMarks = g.Sum(x => x.SubjectOverAll) / g.Count(),//To Do get sem2 over all mark
                       });
                    var sem3 = RptCardSubjectWithMark
                       .Where(x => x.Semester == "Sem III")
                       .Where(x => !exceptionList.Contains(x.SubjectName))
                       .GroupBy(x => new { x.Semester })
                       .Select(g => new
                       {
                           TotalMarks = g.Sum(x => x.SubjectOverAll) / g.Count(),//To Do get sem3 over all mark
                       });

                    if (sem1.Count() > 0)
                        obj.SemIOverAll = Math.Round(sem1.FirstOrDefault().TotalMarks, 2);
                    else
                        obj.SemIOverAll = 0;
                    if (sem2.Count() > 0)
                        obj.SemIIOverAll = Math.Round(sem2.FirstOrDefault().TotalMarks, 2);
                    else
                        obj.SemIIOverAll = 0;
                    if (sem3.Count() > 0)
                        obj.SemIIIOverAll = Math.Round(sem3.FirstOrDefault().TotalMarks, 2);
                    else
                        obj.SemIIIOverAll = 0;
                    IList<ReportCardAchiveAward> ReportCrdAchiveAward = CreateReportCardAchiveAward(objAssess360.Id, objAssess360.Grade, objAssess360.Campus, term);
                    obj.RptAchiveAward = ReportCrdAchiveAward;
                    var mark = objAssess360.ConsolidatedMarks.Split('/');
                    obj.Assess360Marks = mark[0];
                }
                return PartialView("Container", obj);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw;
            }

        }

        private IList<ReportCardSubjectMarks> CreateReportCardListFromAssess360(long assessId, string grade, string campus, string section, string term)
        {
            Assess360Service assSrv = new Assess360Service();
            MastersService MstSrv = new MastersService();
            decimal hwandAtt = 0;
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            criteria.Clear();
            criteria.Add("Campus", campus);
            criteria.Add("Grade", grade);
            criteria.Add("Section", section);
            Dictionary<long, IList<CampusSubjectMaster>> subMasterLst = MstSrv.GetSubjectMasterByCampusListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            //Dictionary<long, IList<SubjectMaster>> subMasterLst = assSrv.GetSubjectMasterListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            if (term != "OverAll" && term != "Cover")
            {
                criteria.Clear();
                criteria.Add("Id", assessId);
                criteria.Add("Semester", term);
            }
            else
            {
                string acyear = "";
                if (grade == "IX" || grade == "X")
                {
                    acyear = DateTime.Now.Year.ToString() + "-" + (DateTime.Now.Year + 1).ToString();
                }
                else
                {
                    //if (campus == "CHENNAI MAIN")
                    //    acyear = (DateTime.Now.Year - 1).ToString() + "-" + DateTime.Now.Year.ToString();
                    //else 
                    if (DateTime.Now.Month > 5)
                        acyear = DateTime.Now.Year.ToString() + "-" + (DateTime.Now.Year + 1).ToString();
                    else
                        acyear = (DateTime.Now.Year - 1).ToString() + "-" + DateTime.Now.Year.ToString();
                }
                Dictionary<long, IList<SemesterMaster>> SemesterList = assSrv.GetSemesterListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                if (SemesterList != null && SemesterList.Count > 0 && SemesterList.FirstOrDefault().Key > 0)
                {
                    string[] Semarray = (from u in SemesterList.FirstOrDefault().Value.ToList()
                                         where u.AcademicYear == acyear
                                         select u.Sem).ToArray();
                    criteria.Clear();
                    criteria.Add("Semester", Semarray);
                    criteria.Add("Id", assessId);
                }
            }
            Dictionary<long, IList<Assess360MarksCaluctionForAStudent_Vw>> StudentMrksListObj = a360Obj.GetAssess360MarksCaluctionForAStudent_VwListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
            IEnumerable<string> Subjects = (from u in StudentMrksListObj.FirstOrDefault().Value.ToList()
                                            where u.Id == assessId
                                            orderby u.Subject ascending
                                            select u.Subject).Distinct();
            //var itemToRemove = resultlist.SingleOrDefault(r => r.Id == 2);
            //if (itemToRemove != null)
            //    resultList.Remove(itemToRemove);
            string[] Subjectarray = Subjects.ToArray();
            if (StudentMrksListObj != null && StudentMrksListObj.Count > 0 && StudentMrksListObj.FirstOrDefault().Key > 0 && StudentMrksListObj.FirstOrDefault().Value != null)
            {
                IList<ReportCardSubjectMarks> obj = new List<ReportCardSubjectMarks>();
                foreach (var item in subMasterLst.FirstOrDefault().Value)
                {
                    if (Subjectarray.Contains(item.SubjectName))
                    {
                        List<Assess360MarksCaluctionForAStudent_Vw> RptList = new List<Assess360MarksCaluctionForAStudent_Vw>();
                        RptList = (from p in StudentMrksListObj.FirstOrDefault().Value
                                   where p.Subject == item.SubjectName
                                   select p).ToList();
                        if (RptList.Count != 0)
                        {
                            ReportCardSubjectMarks RptCrdSubjectMarks = new ReportCardSubjectMarks();
                            RptCrdSubjectMarks.SubjectName = item.Description.ToUpper();
                            var effort = (from p in RptList where p.GroupName == "Homework score" || p.GroupName == "Effort" select p.OverAllMrks).ToArray();
                            if (RptList.FirstOrDefault().GroupName != "Effort")
                            {
                                hwandAtt = a360Obj.GetAttendenceandpunctualityandHomeworkcompletionMarks(assessId, "Both");
                                hwandAtt = hwandAtt > 15 ? 15 : hwandAtt;
                            }
                            else
                            {
                                hwandAtt = a360Obj.GetAttendenceandpunctualityandHomeworkcompletionMarks(assessId, "jnhd");
                                hwandAtt = hwandAtt > 10 ? 10 : hwandAtt;
                            }
                            RptCrdSubjectMarks.SubjectEffort = effort.Length > 0 ? Math.Round(effort[0], 2) + hwandAtt : 0;
                            RptCrdSubjectMarks.SubjectGEffort = GetGradeList(Convert.ToString(RptCrdSubjectMarks.SubjectEffort));
                            var FA = (from p in RptList where p.GroupName == "Weekly Tests" || p.GroupName == "Skill/FA" select p.OverAllMrks).ToArray();
                            RptCrdSubjectMarks.SubjectFA = FA.Length > 0 ? Math.Round(FA[0], 2) : 0;
                            RptCrdSubjectMarks.SubjectGFA = GetGradeList(Convert.ToString(RptCrdSubjectMarks.SubjectFA));
                            if (grade == "IX" || grade == "X")
                            {
                                criteria.Clear();
                                criteria.Add("Subject", item.SubjectName);
                                criteria.Add("AssessId", assessId);
                                Dictionary<long, IList<IXIGCSEWeightingsCalculation_Vw>> IXStudentWeightingsMrksList = a360Obj.GetAssess360WeightingsMarksCaluctionForAStudent_VwListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
                                if (IXStudentWeightingsMrksList != null && IXStudentWeightingsMrksList.Count > 0 && IXStudentWeightingsMrksList.FirstOrDefault().Key > 0 && IXStudentWeightingsMrksList.FirstOrDefault().Value != null)
                                {
                                    var SAwithWeightings = IXStudentWeightingsMrksList.FirstOrDefault().Value
                                    .Where(x => x.Semester == term && x.Subject == item.SubjectName)
                                    .GroupBy(x => new { x.Subject })
                                    .Select(g => new
                                    {
                                        TotalMarks = g.Sum(x => x.OverAllMarks) //To Do get sem1 over all mark
                                    });
                                    if (SAwithWeightings.Count() > 0)
                                        RptCrdSubjectMarks.SubjectSA = Math.Round(SAwithWeightings.FirstOrDefault().TotalMarks, 2);
                                    else
                                        RptCrdSubjectMarks.SubjectSA = 0;
                                }
                                else
                                {
                                    var SA = (from p in RptList where p.GroupName == "Term Assessment" || p.GroupName == "SA" select p.OverAllMrks).ToArray();
                                    RptCrdSubjectMarks.SubjectSA = SA.Length > 0 ? Math.Round(SA[0], 2) : 0;
                                }
                            }
                            else
                            {
                                var SA = (from p in RptList where p.GroupName == "Term Assessment" || p.GroupName == "SA" select p.OverAllMrks).ToArray();
                                RptCrdSubjectMarks.SubjectSA = SA.Length > 0 ? Math.Round(SA[0], 2) : 0;
                            }
                            RptCrdSubjectMarks.SubjectGSA = GetGradeList(Convert.ToString(RptCrdSubjectMarks.SubjectSA));
                            RptCrdSubjectMarks.SubjectOverAll = Math.Round(((RptCrdSubjectMarks.SubjectEffort + RptCrdSubjectMarks.SubjectFA + RptCrdSubjectMarks.SubjectSA) / 3), 2);
                            RptCrdSubjectMarks.SubjectGOverAll = GetGradeList(Convert.ToString(RptCrdSubjectMarks.SubjectOverAll));
                            RptCrdSubjectMarks.SubjectStarGrade = GetGradeStars(RptCrdSubjectMarks.SubjectGOverAll);
                            RptCrdSubjectMarks.Semester = RptList[0].Semester;
                            obj.Add(RptCrdSubjectMarks);
                        }
                        else
                        {
                            ReportCardSubjectMarks RptCrdSubjectOnly = new ReportCardSubjectMarks();
                            RptCrdSubjectOnly.SubjectName = item.Description.ToUpper();
                            RptCrdSubjectOnly.SubjectStarGrade = 0;
                            RptCrdSubjectOnly.Semester = term;
                            obj.Add(RptCrdSubjectOnly);
                        }
                    }
                    else
                    {
                        if (item.SubjectName == "French" || item.SubjectName == "Hindi" || item.SubjectName == "First Language as English" || item.SubjectName == "English as Second Language") { }
                        else
                        {
                            //if (grade == "IX" && section == "E" && (item.SubjectName == "Physics" || item.SubjectName == "Chemistry" || item.SubjectName == "Biology")) { }
                            //else if (grade == "IX" && section != "E" && item.SubjectName == "Combined Science") { }
                            //else if (grade == "X" && section == "A" && (item.SubjectName == "Physics" || item.SubjectName == "Chemistry" || item.SubjectName == "Biology")) { }
                            //else if (grade == "X" && section != "A" && item.SubjectName == "Combined Science") { }
                            //else
                            //{
                            ReportCardSubjectMarks RptCrdSubjectOnly = new ReportCardSubjectMarks();
                            RptCrdSubjectOnly.SubjectName = item.Description.ToUpper();
                            RptCrdSubjectOnly.SubjectStarGrade = 0;
                            RptCrdSubjectOnly.Semester = term;
                            obj.Add(RptCrdSubjectOnly);
                            //}
                        }
                    }
                }
                return obj;
            }
            else return null;
        }

        private IList<ReportCardAchiveAward> CreateReportCardAchiveAward(long assessId, string grade, string campus, string term)
        {
            Assess360Service assSrv = new Assess360Service();
            IList<ReportCardAchiveAward> objAwardList = new List<ReportCardAchiveAward>();
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            criteria.Add("RefId", assessId);
            if (term != "OverAll") { criteria.Add("SemesterType", term); }
            Dictionary<long, IList<RptCardAchievement>> rptAchievementLst = assSrv.GetStudentAchievementListWithPagingAndInCriteria(0, 9999, string.Empty, string.Empty, criteria);
            if (rptAchievementLst != null && rptAchievementLst.Count > 0 && rptAchievementLst.FirstOrDefault().Key > 0)
            {
                ReportCardAchiveAward objAward = new ReportCardAchiveAward();
                var RptAchiveList = (from p in rptAchievementLst.FirstOrDefault().Value
                                     where p.AchievementType == "Achievement"
                                     select p).ToList();
                var RptAwardList = (from p in rptAchievementLst.FirstOrDefault().Value
                                    where p.AchievementType == "Award"
                                    select p).ToList();
                if (RptAchiveList.Count > 0)
                {
                    objAward.Achievement = "ACHIEVEMENT";
                    objAward.AchievementDescription = RptAchiveList[0].AchievementDescription;
                }
                else { objAward.Achievement = "ACHIEVEMENT"; }
                if (RptAwardList.Count > 0)
                {
                    objAward.Award = "AWARD";
                    objAward.AwardDescription = RptAwardList[0].AchievementDescription;
                }
                else { objAward.Award = "AWARD"; }
                objAward.Semester = term;
                objAwardList.Add(objAward);
            }
            else
            {
                ReportCardAchiveAward objonlyAward = new ReportCardAchiveAward();
                objonlyAward.Achievement = "ACHIEVEMENT";
                objonlyAward.Award = "AWARD";
                objonlyAward.AchievementDescription = "";
                objonlyAward.AwardDescription = "";
                objonlyAward.Semester = term;
                objAwardList.Add(objonlyAward);
            }
            return objAwardList;

        }

        #endregion "End"

        #region "IB Main Report Card List Page"
        public ActionResult ReportCardIB()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                    return RedirectToAction("LogOff", "Account");
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
            finally
            { }
        }
        public ActionResult GetReportCardIBInbox(int page, int rows, string sidx, string sord, string Name, string Campus, string Section, string Grade, string Semester)
        {
            try
            {
                if (!string.IsNullOrEmpty(Campus) && !string.IsNullOrEmpty(Grade) && !string.IsNullOrEmpty(Semester))
                {
                    Assess360Service assSrvc = new Assess360Service();
                    Dictionary<string, object> criteria = new Dictionary<string, object>(); string colName = string.Empty; string[] values = new string[1];
                    if (!string.IsNullOrWhiteSpace(Name)) { criteria.Add("Name", Name); }
                    var usrcmp = Session["UserCampus"] as IEnumerable<string>;
                    if (usrcmp.Count() != 0)
                    {
                        if (usrcmp.First() != null)            // to check if the usrcmp obj is null or with data
                        {
                            if (!string.IsNullOrWhiteSpace(Campus) && Campus != "Select") { criteria.Add("Campus", Campus); }
                            else { criteria.Add("Campus", usrcmp); }
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(Section) && Section != "Select") { criteria.Add("Section", Section); }
                    if (!string.IsNullOrWhiteSpace(Grade) && Grade != "Select")
                    {
                        colName = "Grade";
                        values[0] = Grade;
                    }
                    sord = sord == "desc" ? "Desc" : "Asc";
                    DateTime DateNow = DateTime.Now;
                    if (Grade == "IX" || Grade == "X")
                    {

                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    }
                    else
                    {
                        //if (Campus == "CHENNAI MAIN")
                        //    criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                        //else
                        if (DateNow.Month > 5)
                            criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                        else
                            criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                    }
                    criteria.Add("IsActive", true);
                    Dictionary<long, IList<Assess360>> dcnAssesstLst = assSrvc.GetAssess360ListWithPagingAndCriteriaWithAlias(page - 1, rows, sidx, sord, colName, values, criteria, null);
                    if (dcnAssesstLst != null && dcnAssesstLst.Count > 0)
                    {
                        UserService us = new UserService();
                        IList<Assess360> lstAsssessCompnt = dcnAssesstLst.FirstOrDefault().Value;
                        long totalRecords = dcnAssesstLst.FirstOrDefault().Key;
                        int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                        var jsonData = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalRecords,
                            rows = (
                            from items in lstAsssessCompnt
                            select new
                            {
                                i = items.Id,
                                cell = new string[] 
                       { 
                            items.Id.ToString(),
                            items.Name,    //inbox secrch Field     
                            items.AcademicYear,
                            items.Campus,   //inbox secrch Field
                            items.IdNo,
                            items.Section,       //inbox secrch Field
                            items.Grade,         //inbox secrch Field
                           "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GeneratePDF( '" + items.Id +"','"+Semester+"');\" />",
                            items.CreatedBy!=null?us.GetUserNameByUserId(items.CreatedBy):"",
                            items.DateCreated!=null?items.DateCreated.Value.ToString("dd-MMM-yyyy HH:mm"):"",
                            items.CreatedBy
                       }
                            })
                        };
                        return Json(jsonData, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally
            { }
        }
        #endregion

        public ActionResult SummativeAssessmentReport()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                    return RedirectToAction("LogOff", "Account");
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);

                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
            finally
            { }
        }

        public ActionResult CheckSummativeAssessmentReport(string Campus, string Grade, string Section)
        {
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            MastersService MstSrv = new MastersService();
            criteria.Add("Campus", Campus);
            criteria.Add("Grade", Grade);
            criteria.Add("Section", Section);
            Dictionary<long, IList<CampusSubjectMaster>> SubjectMaster = MstSrv.GetSubjectMasterByCampusListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            if (SubjectMaster != null && SubjectMaster.Count > 0 && SubjectMaster.FirstOrDefault().Key > 0 && SubjectMaster.FirstOrDefault().Value != null)
            {
                bool has = SubjectMaster.FirstOrDefault().Value.Any(RPT => RPT.SubjectName == "Combined Science");
                return Json(has == true ? "Success" : "Failure", JsonRequestBehavior.AllowGet);

            }
            else
                return Json("Failure", JsonRequestBehavior.AllowGet);
        }

        public ActionResult SummativeAssessmentJqGridNew(string Campus, string Grade, string Section, string model, bool IsCombinedSci, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(Campus) && !string.IsNullOrWhiteSpace(Grade) && !string.IsNullOrEmpty(model))
                {

                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    criteria.Add("Campus", Campus);
                    criteria.Add("Grade", Grade);
                    if (!String.IsNullOrEmpty(Section))
                        criteria.Add("Section", Section);
                    criteria.Add("Semester", model);
                    DateTime DateNow = DateTime.Now;
                    if (Grade == "IX" || Grade == "X")
                    {
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                        Dictionary<long, IList<SummativeAssessment_vw>> TestAssessment = a360Obj.GetSummativeAssessmenttestResultList(page - 1, rows, sord, sidx, criteria);
                        if (TestAssessment != null && TestAssessment.Count > 0 && TestAssessment.FirstOrDefault().Key > 0 && TestAssessment.FirstOrDefault().Value != null)
                        {
                            //TestAssessmentList = TestAssessment.AsEnumerable().OrderBy(x => x.Field<double>("Total")).ToList();
                            if (ExptXl == 1)
                            {
                                #region EXcel
                                int i = 0;
                                foreach (SummativeAssessment_vw TestAssess in TestAssessment.FirstOrDefault().Value)
                                {
                                    TestAssess.RptId = i + 1;
                                    i++;
                                    //TestAssess.Average = TestAssess.Total / dividend
                                    //TestAssess.TestGrade = GetGradeList((TestAssess.Total / 7).ToString("#"));
                                }
                                string title = "SummativeAssessment" + Grade + "-" + Section + "-" + DateTime.Now.ToString("0:dd/MM/YY") + ""; ;
                                if (IsCombinedSci)
                                {
                                    string headerTable = @"<Table><tr><td colspan='13' align='center' style='font-size: large;'>The Indian Public School,Coimbatore</td></tr><tr><td colspan='12'></td></tr>";
                                    headerTable = headerTable + "<tr><td colspan='7' align='center' style='font-size: large;'><b>Grade & Section</b> : " + Grade + " " + Section + " </td><td colspan='6' align='center' style='font-size: large;'> <b>Model: </b> " + model + "</td></tr>";
                                    headerTable = headerTable + "</b></Table>";
                                    //string title = "SummativeAssessment";
                                    //string[] TblHeaders = new string[] { "S.No", "Student Name", "ENG", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                                    ExptToXL_AssessPointChart(TestAssessment.FirstOrDefault().Value, title, (items => new
                                    {
                                        SNo = items.RptId.ToString(),
                                        Student_Id = items.IdNo,
                                        items.Name,
                                        English = items.EFL != 0 ? items.EFL.ToString() : items.ESL.ToString(),
                                        Language = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.Language.ToString() : "",
                                        CombinedScience = items.CombinedScience.ToString(),
                                        Mathematics = items.Mathematics.ToString(),
                                        Economics = items.Economics.ToString(),
                                        PhysicalEducation = items.PhysicalEducation.ToString(),
                                        ICT = items.ICT.ToString(),
                                        Total = items.Total.ToString(),
                                        Average = (items.Total / 5).ToString("#.##"),
                                        Grade = GetGradeList((items.Total / 5).ToString("#.##"))
                                    }), headerTable);

                                    //return Json(null, JsonRequestBehavior.AllowGet);
                                }
                                else
                                {
                                    string headerTable = @"<Table><tr><td colspan='14' align='center' style='font-size: large;'>The Indian Public School,Coimbatore</td></tr><tr><td colspan='12'></td></tr>";
                                    headerTable = headerTable + "<tr><td colspan='7' align='center' style='font-size: large;'><b>Grade & Section</b> : " + Grade + Section + " </td><td colspan='7' align='center' style='font-size: large;'> <b>Model : " + model + "</b> :</td></tr>";
                                    headerTable = headerTable + "</b></Table>";
                                    //string[] TblHeaders = new string[] { "S.No", "Student Name", "ENG", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                                    ExptToXL_AssessPointChart(TestAssessment.FirstOrDefault().Value, title, (items => new
                                    {
                                        SNo = items.RptId.ToString(),
                                        Student_Id = items.IdNo,
                                        items.Name,
                                        English = items.EFL != 0 ? items.EFL.ToString() : items.ESL.ToString(),
                                        Language = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.Language.ToString() : "",
                                        Mathematics = items.Mathematics.ToString(),
                                        Chemistry = items.Chemistry.ToString(),
                                        Physics = items.Physics.ToString(),
                                        Biology = items.Biology.ToString(),
                                        Economics = items.Economics.ToString(),
                                        ICT = items.ICT.ToString(),
                                        Total = items.Total.ToString(),
                                        Average = (items.Total / 6).ToString("#.##"),
                                        Grade = GetGradeList((items.Total / 6).ToString("#.##"))
                                    }), headerTable);
                                }
                                #endregion
                            }
                            else
                            {
                                if (IsCombinedSci)
                                {
                                    long totalRecords = TestAssessment.Count;
                                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                                    var jsonData = new
                                    {
                                        total = totalPages,
                                        page = page,
                                        records = totalRecords,
                                        rows = (
                                             from items in TestAssessment.FirstOrDefault().Value
                                             select new
                                             {
                                                 cell = new string[] { 
                                     items.RptId.ToString(),
                                     items.IdNo,
                                     items.Name,
                                     items.Campus,
                                     items.Grade,
                                     items.Section,
                                     items.AcademicYear,
                                     items.Semester,
                                     items.EFL!=0?items.EFL.ToString():items.ESL.ToString(),
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.Language.ToString():"",
                                     items.CombinedScience.ToString(),
                                     items.Mathematics.ToString(),
                                     items.Economics.ToString(),
                                     items.PhysicalEducation.ToString(),
                                     items.ICT.ToString(),
                                     items.Total.ToString(),
                                     (items.Total/5).ToString("#.##"),
                                     GetGradeList((items.Total/5).ToString("#")),
                                     "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GenerateSAPdf( '" + items.IdNo +"','"+items.AcademicYear+"','"+items.Semester+"');\" />",
                                     }
                                             })
                                    };
                                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                                }
                                else
                                {
                                    long totalRecords = TestAssessment.Count;
                                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                                    var jsonData = new
                                    {
                                        total = totalPages,
                                        page = page,
                                        records = totalRecords,
                                        rows = (
                                             from items in TestAssessment.FirstOrDefault().Value
                                             select new
                                             {
                                                 cell = new string[] { 
                                     items.RptId.ToString(),
                                     items.IdNo,
                                     items.Name,
                                     items.Campus,
                                     items.Grade,
                                     items.Section,
                                     items.AcademicYear,
                                     items.Semester,
                                     items.EFL!=0?items.EFL.ToString():items.ESL.ToString(),
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.Language.ToString():"",
                                     items.Mathematics.ToString(),
                                     items.Chemistry.ToString(),
                                     items.Physics.ToString(),
                                     items.Biology.ToString(),
                                     items.Economics.ToString(),
                                     items.ICT.ToString(),
                                     items.Total.ToString(),
                                     (items.Total/6).ToString("#.##"),
                                     GetGradeList((items.Total/6).ToString("#")),
                                     "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GenerateSAPdf( '" + items.IdNo +"','"+items.AcademicYear+"','"+items.Semester+"');\" />",
                                     }
                                             })
                                    };
                                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                                }
                            }
                        }
                        else
                        {
                            var AssLst = new { rows = (new { cell = new string[] { } }) };
                            return Json(AssLst, JsonRequestBehavior.AllowGet);
                        }
                    }
                    #region "commented"
                    //else if (Campus == "CHENNAI MAIN" && (Grade == "IX" || Grade == "X"))
                    //{
                    //    #region Chennai campus
                    //    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    //    Dictionary<long, IList<SummativeAssessment_vw>> TestAssessment = a360Obj.GetSummativeAssessmenttestResultList(page - 1, rows, sord, sidx, criteria);
                    //    if (TestAssessment != null && TestAssessment.Count > 0 && TestAssessment.FirstOrDefault().Key > 0 && TestAssessment.FirstOrDefault().Value != null)
                    //    {

                    //        //TestAssessmentList = TestAssessment.AsEnumerable().OrderBy(x => x.Field<double>("Total")).ToList();
                    //        if (ExptXl == 1)
                    //        {
                    //            #region Excel
                    //            int i = 0;
                    //            foreach (SummativeAssessment_vw TestAssess in TestAssessment.FirstOrDefault().Value)
                    //            {
                    //                TestAssess.RptId = i + 1;
                    //                i++;
                    //                //TestAssess.Average = TestAssess.Total / dividend
                    //                //TestAssess.TestGrade = GetGradeList((TestAssess.Total / 7).ToString("#"));
                    //            }
                    //            string title = "SummativeAssessment" + Grade + "-" + Section + "-" + DateTime.Now.ToString("0:dd/MM/YY") + ""; ;
                    //            if ((Grade == "IX" || Grade == "X") && Section == "A")
                    //            {
                    //                string headerTable = @"<Table><tr><td colspan='14' align='center' style='font-size: large;'>The Indian Public School,Coimbatore</td></tr><tr><td colspan='12'></td></tr>";
                    //                headerTable = headerTable + "<tr><td colspan='7' align='center' style='font-size: large;'><b>Grade & Section</b> : " + Grade + Section + " </td><td colspan='7' align='center' style='font-size: large;'> <b>Model : " + model + "</b> :</td></tr>";
                    //                headerTable = headerTable + "</b></Table>";
                    //                //string[] TblHeaders = new string[] { "S.No", "Student Name", "ENG", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                    //                ExptToXL_AssessPointChart(TestAssessment.FirstOrDefault().Value, title, (items => new
                    //                {
                    //                    SNo = items.RptId.ToString(),
                    //                    Student_Id = items.IdNo,
                    //                    items.Name,
                    //                    English = items.EFL != 0 ? items.EFL.ToString() : items.ESL.ToString(),
                    //                    Language = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.Language.ToString() : "",
                    //                    Mathematics = items.Mathematics.ToString(),
                    //                    Chemistry = items.Chemistry.ToString(),
                    //                    Physics = items.Physics.ToString(),
                    //                    Biology = items.Biology.ToString(),
                    //                    Economics = items.Economics.ToString(),
                    //                    ICT = items.ICT.ToString(),
                    //                    Total = items.Total.ToString(),
                    //                    Average = (items.Total / 6).ToString("#.##"),
                    //                    Grade = GetGradeList((items.Total / 6).ToString("#.##"))
                    //                }), headerTable);
                    //            }
                    //            else
                    //            {
                    //                string headerTable = @"<Table><tr><td colspan='13' align='center' style='font-size: large;'>The Indian Public School,Coimbatore</td></tr><tr><td colspan='12'></td></tr>";
                    //                headerTable = headerTable + "<tr><td colspan='7' align='center' style='font-size: large;'><b>Grade & Section</b> : " + Grade + " " + Section + " </td><td colspan='6' align='center' style='font-size: large;'> <b>Model: </b> " + model + "</td></tr>";
                    //                headerTable = headerTable + "</b></Table>";
                    //                //string title = "SummativeAssessment";
                    //                //string[] TblHeaders = new string[] { "S.No", "Student Name", "ENG", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                    //                ExptToXL_AssessPointChart(TestAssessment.FirstOrDefault().Value, title, (items => new
                    //                {
                    //                    SNo = items.RptId.ToString(),
                    //                    Student_Id = items.IdNo,
                    //                    items.Name,
                    //                    English = items.EFL != 0 ? items.EFL.ToString() : items.ESL.ToString(),
                    //                    Language = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.Language.ToString() : "",
                    //                    CombinedScience = items.CombinedScience.ToString(),
                    //                    Mathematics = items.Mathematics.ToString(),
                    //                    Economics = items.Economics.ToString(),
                    //                    PhysicalEducation = items.PhysicalEducation.ToString(),
                    //                    ICT = items.ICT.ToString(),
                    //                    Total = items.Total.ToString(),
                    //                    Average = (items.Total / 5).ToString("#.##"),
                    //                    Grade = GetGradeList((items.Total / 5).ToString("#.##"))
                    //                }), headerTable);
                    //            }
                    //            #endregion
                    //        }
                    //        else
                    //        {
                    //            if ((Grade == "IX" || Grade == "X") && Section == "A")
                    //            {

                    //                long totalRecords = TestAssessment.Count;
                    //                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    //                var jsonData = new
                    //                {
                    //                    total = totalPages,
                    //                    page = page,
                    //                    records = totalRecords,
                    //                    rows = (
                    //                         from items in TestAssessment.FirstOrDefault().Value
                    //                         select new
                    //                         {
                    //                             cell = new string[] { 
                    //                 items.RptId.ToString(),
                    //                 items.IdNo,
                    //                 items.Name,
                    //                 items.Campus,
                    //                 items.Grade,
                    //                 items.Section,
                    //                 items.AcademicYear,
                    //                 items.Semester,
                    //                 items.EFL!=0?items.EFL.ToString():items.ESL.ToString(),
                    //                 GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.Language.ToString():"",
                    //                 items.Mathematics.ToString(),
                    //                 items.Chemistry.ToString(),
                    //                 items.Physics.ToString(),
                    //                 items.Biology.ToString(),
                    //                 items.Economics.ToString(),
                    //                 items.ICT.ToString(),
                    //                 items.Total.ToString(),
                    //                 (items.Total/7).ToString("#.##"),
                    //                 GetGradeList((items.Total/7).ToString("#")),
                    //                 "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GenerateSAPdf( '" + items.IdNo +"','"+items.AcademicYear+"','"+items.Semester+"');\" />",
                    //                 }
                    //                         })
                    //                };
                    //                return Json(jsonData, JsonRequestBehavior.AllowGet);
                    //            }
                    //            else
                    //            {
                    //                long totalRecords = TestAssessment.Count;
                    //                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    //                var jsonData = new
                    //                {
                    //                    total = totalPages,
                    //                    page = page,
                    //                    records = totalRecords,
                    //                    rows = (
                    //                         from items in TestAssessment.FirstOrDefault().Value
                    //                         select new
                    //                         {
                    //                             cell = new string[] { 
                    //                 items.RptId.ToString(),
                    //                 items.IdNo,
                    //                 items.Name,
                    //                 items.Campus,
                    //                 items.Grade,
                    //                 items.Section,
                    //                 items.AcademicYear,
                    //                 items.Semester,
                    //                 items.EFL!=0?items.EFL.ToString():items.ESL.ToString(),
                    //                 GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.Language.ToString():"",
                    //                 items.CombinedScience.ToString(),
                    //                 items.Mathematics.ToString(),
                    //                 items.Economics.ToString(),
                    //                 items.PhysicalEducation.ToString(),
                    //                 items.ICT.ToString(),
                    //                 items.Total.ToString(),
                    //                 (items.Total/6).ToString("#.##"),
                    //                 GetGradeList((items.Total/6).ToString("#")),
                    //                 "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GenerateSAPdf( '" + items.IdNo +"','"+items.AcademicYear+"','"+items.Semester+"');\" />",
                    //                 }
                    //                         })
                    //                };
                    //                return Json(jsonData, JsonRequestBehavior.AllowGet);
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        var AssLst = new { rows = (new { cell = new string[] { } }) };
                    //        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    //    }
                    //    #endregion
                    //}
                    #endregion
                    else
                    {
                        if (DateNow.Month > 5)
                        {
                            criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                        }
                        else
                        {
                            criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                        }
                        Dictionary<long, IList<SummativeAssessmentVIVII_vw>> TestAssessmentVIVII = a360Obj.GetSummativeAssessmenttestVIVIIResultList(page - 1, rows, sord, sidx, criteria);
                        if (TestAssessmentVIVII != null && TestAssessmentVIVII.Count > 0 && TestAssessmentVIVII.FirstOrDefault().Key > 0 && TestAssessmentVIVII.FirstOrDefault().Value != null)
                        {
                            if (ExptXl == 1)
                            {
                                int i = 0;
                                foreach (SummativeAssessmentVIVII_vw TestAssessVIVII in TestAssessmentVIVII.FirstOrDefault().Value)
                                {
                                    TestAssessVIVII.RptId = i + 1;
                                    i++;
                                }
                                string title = "SummativeAssessment" + Grade + "-" + Section + "-" + DateTime.Now.ToString("0:dd/MM/yyyy") + ""; ;

                                string headerTable = @"<Table><tr><td colspan='14' align='center' style='font-size: large;'>The Indian Public School,Coimbatore</td></tr><tr><td colspan='12'></td></tr>";
                                headerTable = headerTable + "<tr><td colspan='7' align='center' style='font-size: large;'><b>Grade & Section</b> : " + Grade + " " + Section + " </td><td colspan='8' align='center' style='font-size: large;'> <b>Model : </b> " + model + "</td></tr>";
                                headerTable = headerTable + "</b></Table>";
                                //string title = "SummativeAssessment";
                                //string[] TblHeaders = new string[] { "S.No", "Student Name", "ENG", "Attendence/Punctuality", "Homework Completion", "Homework Accuracy(15)", "Weekly Chapter Tests(20)", "SLC Parent Assessment(5)", "Term Assessment(25)", "Total" };
                                ExptToXL_AssessPointChart(TestAssessmentVIVII.FirstOrDefault().Value, title, (items => new
                                {
                                    SNo = items.RptId.ToString(),
                                    Student_Id = items.IdNo,
                                    items.Name,
                                    English = items.English.ToString(),
                                    Language = items.Language.ToString(),
                                    Mathematics = items.Mathematics.ToString(),
                                    Chemistry = items.Chemistry.ToString(),
                                    Physics = items.Physics.ToString(),
                                    Biology = items.Biology.ToString(),
                                    HistoryGeography = items.HistoryGeography.ToString(),
                                    ICT = items.ICT.ToString(),
                                    Total = items.Total.ToString(),
                                    Average = (items.Total / 8).ToString("#.##"),
                                    Grade = GetGradeList((items.Total / 8).ToString("#.##"))
                                }), headerTable);
                            }
                            else
                            {

                                long totalRecords = TestAssessmentVIVII.Count;
                                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                                var jsonData = new
                                {
                                    total = totalPages,
                                    page = page,
                                    records = totalRecords,
                                    rows = (
                                         from items in TestAssessmentVIVII.FirstOrDefault().Value
                                         select new
                                         {
                                             cell = new string[] { 
                                     items.RptId.ToString(),
                                     items.IdNo,
                                     items.Name,
                                     items.Campus,
                                     items.Grade,
                                     items.Section,
                                     items.AcademicYear,
                                     items.Semester,
                                     items.English.ToString(),
                                     items.Language.ToString(),
                                     items.Mathematics.ToString(),
                                     items.Chemistry.ToString(),
                                     items.Physics.ToString(),
                                     items.Biology.ToString(),
                                     items.HistoryGeography.ToString(),
                                     items.ICT.ToString(),
                                     items.Total.ToString(),
                                     (items.Total/8).ToString("#.##"),
                                     GetGradeList((items.Total/8).ToString("#")),
                                     }
                                         })
                                };
                                return Json(jsonData, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {
                            var VIVIIAssLst = new { rows = (new { cell = new string[] { } }) };
                            return Json(VIVIIAssLst, JsonRequestBehavior.AllowGet);
                        }
                    }

                    return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    var AssLst = new { rows = (new { cell = new string[] { } }) };
                    return Json(AssLst, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "TransportMgmtPolicy");
                throw ex;
            }
        }

        public ActionResult GenerateSAPDF(string IdNo, string AcYear, string model, bool IsCombinedSci)
        {
            string userId = base.ValidateUser();
            if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
            else
            {
                SummativeAssessment_vw SAList = new SummativeAssessment_vw();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("IdNo", IdNo);
                //criteria.Add("MonthRslt", MonthResult);
                criteria.Add("Semester", model);
                criteria.Add("AcademicYear", AcYear);
                Dictionary<long, IList<SummativeAssessment_vw>> TestAssessment = a360Obj.GetSummativeAssessmenttestResultList(0, 9999, string.Empty, string.Empty, criteria);
                SAList = TestAssessment.FirstOrDefault().Value[0];
                criteria.Clear();
                criteria.Add("NewId", SAList.IdNo);
                criteria.Add("Campus", SAList.Campus);
                criteria.Add("Grade", SAList.Grade);
                Dictionary<long, IList<StudentTemplate>> StudList = admsvc.GetStudentDetailsListWithEQsearchCriteria(0, 9999, string.Empty, string.Empty, criteria);
                if (StudList != null && StudList.Count > 0 && StudList.FirstOrDefault().Key > 0 && !string.IsNullOrWhiteSpace(StudList.FirstOrDefault().Value[0].SecondLanguage))
                {
                    if (IsCombinedSci)
                    {
                        SAList.SeclangDesc = StudList.FirstOrDefault().Value[0].SecondLanguage;
                        SAList.Average = (SAList.Total / 5).ToString("#.##");
                        SAList.TestGrade = GetGradeList(SAList.Average);
                    }
                    //else if (SAList.Campus == "CHENNAI MAIN" && SAList.Grade == "X" && SAList.Section == "A")
                    //{
                    //    SAList.SeclangDesc = StudList.FirstOrDefault().Value[0].SecondLanguage;
                    //    SAList.Average = (SAList.Total / 6).ToString("#.##");
                    //    SAList.TestGrade = GetGradeList(SAList.Average);
                    //}
                    //else if (SAList.Campus == "CHENNAI MAIN" && SAList.Grade == "X" && SAList.Section != "A")
                    //{
                    //    SAList.SeclangDesc = StudList.FirstOrDefault().Value[0].SecondLanguage;
                    //    SAList.Average = (SAList.Total / 5).ToString("#.##");
                    //    SAList.TestGrade = GetGradeList(SAList.Average);
                    //}
                    else
                    {
                        SAList.SeclangDesc = StudList.FirstOrDefault().Value[0].SecondLanguage;
                        SAList.Average = (SAList.Total / 6).ToString("#.##");
                        SAList.TestGrade = GetGradeList(SAList.Average);
                    }
                    //obj.SecondLang = StudList.FirstOrDefault().Value[0].SecondLanguage;
                }
                else
                {
                    if (IsCombinedSci)
                    {
                        SAList.Average = (SAList.Total / 5).ToString("#.##");
                        SAList.TestGrade = GetGradeList(SAList.Average);
                    }
                    //else if (SAList.Campus == "CHENNAI MAIN" && SAList.Grade == "X" && SAList.Section == "A")
                    //{
                    //    SAList.Average = (SAList.Total / 6).ToString("#.##");
                    //    SAList.TestGrade = GetGradeList(SAList.Average);
                    //}
                    //else if (SAList.Campus == "CHENNAI MAIN" && SAList.Grade == "X" && SAList.Section != "A")
                    //{
                    //    SAList.Average = (SAList.Total / 5).ToString("#.##");
                    //    SAList.TestGrade = GetGradeList(SAList.Average);
                    //}
                    else
                    {
                        SAList.Average = (SAList.Total / 6).ToString("#.##");
                        SAList.TestGrade = GetGradeList(SAList.Average);
                    }
                }
                criteria.Clear();
                criteria.Add("Campus", SAList.Campus);
                criteria.Add("Grade", SAList.Grade);
                criteria.Add("Sem", model);
                criteria.Add("AcademicYear", AcYear);
                Dictionary<long, IList<SemesterMaster>> SemesterList = a360Obj.GetSemesterListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                if (SemesterList != null && SemesterList.Count > 0 && SemesterList.FirstOrDefault().Key > 0 && SemesterList.FirstOrDefault().Value != null)
                    SAList.ExamDate = SemesterList.FirstOrDefault().Value[0].ExamDate != null ? SemesterList.FirstOrDefault().Value[0].ExamDate.Value.ToString("dd-MM-yyyy") : DateTime.Now.ToString("dd/MM/yyyy");
                else
                    SAList.ExamDate = DateTime.Now.ToString("dd-MM-yyyy");


                SAList.FileName = IdNo + "_SummativeTestReport";
                SAList.TipsLogo = ConfigurationManager.AppSettings["AddHeader"] + "TipsLogo.jpg";
                SAList.TipsNaceLogo = ConfigurationManager.AppSettings["AddHeader"] + "logonace.jpg";
                SAList.TipsName = GetSchoolName(SAList.Campus);

                TipsExam(SAList, model);
                SAList.IsCombinedScience = IsCombinedSci;
                //TipsAddress(RptCardList, RptCardList.Campus);
                return this.ViewPdf("ReportCard report", "SummativeAssessmentPrint", SAList, "portrait", SAList.FileName);
            }
        }

        private void TipsExam(SummativeAssessment_vw SAList, string exam)
        {
            if (exam == "Model I")
                SAList.Exam = "MODEL EXAMINATION I";
            else if (exam == "Model II")
                SAList.Exam = "MODEL EXAMINATION II";
            else if (exam == "Model III")
                SAList.Exam = "MODEL EXAMINATION III";
            else if (exam == "Model IV")
                SAList.Exam = "MODEL EXAMINATION IV";
            else { }
        }

        public ActionResult SummativeTestValidation(string IdNo, string AcYear, string model)
        {
            if (!string.IsNullOrEmpty(IdNo) && !string.IsNullOrEmpty(AcYear) && !string.IsNullOrEmpty(model))
            {
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("IdNo", IdNo);
                //criteria.Add("MonthRslt", MonthResult);
                criteria.Add("Semester", model);
                criteria.Add("AcademicYear", AcYear);
                Dictionary<long, IList<SummativeAssessment_vw>> TestAssessment = a360Obj.GetSummativeAssessmenttestResultList(0, 9999, string.Empty, string.Empty, criteria);
                if (TestAssessment != null && TestAssessment.Count > 0 && TestAssessment.FirstOrDefault().Key > 0 && TestAssessment.FirstOrDefault().Value != null)
                    return Json("Success", JsonRequestBehavior.AllowGet);
                else
                    return Json("Failure", JsonRequestBehavior.AllowGet);
            }
            else
                return Json(null, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ComparitiveSAReport()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                    return RedirectToAction("LogOff", "Account");
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
            finally
            { }
        }

        public ActionResult CheckComparitiveAssessmetReport(string Campus, string Grade, string Section)
        {
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            MastersService MstSrv = new MastersService();
            criteria.Add("Campus", Campus);
            criteria.Add("Grade", Grade);
            criteria.Add("Section", Section);
            Dictionary<long, IList<CampusSubjectMaster>> SubjectMaster = MstSrv.GetSubjectMasterByCampusListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            if (SubjectMaster != null && SubjectMaster.Count > 0 && SubjectMaster.FirstOrDefault().Key > 0 && SubjectMaster.FirstOrDefault().Value != null)
            {
                bool has = SubjectMaster.FirstOrDefault().Value.Any(RPT => RPT.SubjectName == "Combined Science");
                return Json(has == true ? "Success" : "Failure", JsonRequestBehavior.AllowGet);
            }
            else
                return Json("Failure", JsonRequestBehavior.AllowGet);
        }

        public ActionResult ComparitiveSAReportJqGrid(string Name, string Campus, string Grade, string Section, bool IsCombinedSci, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(Campus) && !string.IsNullOrWhiteSpace(Grade))
                {
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    criteria.Add("Campus", Campus);
                    criteria.Add("Grade", Grade);
                    if (!String.IsNullOrEmpty(Section))
                        criteria.Add("Section", Section);
                    if (!string.IsNullOrEmpty(Name))
                        criteria.Add("Name", Name);
                    DateTime DateNow = DateTime.Now;
                    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    //criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());///replace this once over
                    Dictionary<long, IList<ComparitiveSAReport_vw>> ComparitiveSA = a360Obj.GetComparativeSAReportResultList(page - 1, rows, sord, sidx, criteria);
                    if (ComparitiveSA != null && ComparitiveSA.Count > 0 && ComparitiveSA.FirstOrDefault().Key > 0 && ComparitiveSA.FirstOrDefault().Value != null)
                    {
                        if (ExptXl == 1)
                        {
                            #region Excel
                            int i = 0;
                            foreach (ComparitiveSAReport_vw ComparitiveTestAssess in ComparitiveSA.FirstOrDefault().Value)
                            {
                                ComparitiveTestAssess.RptId = i + 1;
                                i++;
                            }
                            string title = "ComparitiveSA" + DateTime.Now.ToString("0:dd/MM/YY") + "";
                            string logopath = ConfigurationManager.AppSettings["AppLogos"].ToString() + "tips.gif";
                            if ((Grade == "IX" || Grade == "X") && IsCombinedSci == true)
                            {
                                string headerTable = @"<Table><tr><td colspan='58' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                                 @"<Table><tr><td colspan='58' align='center' style='font-size: large;'><b>Comparitive Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                                "<tr><td colspan='58' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr>";
                                headerTable = headerTable + "</b></Table>";
                                ExptToXL_AssessPointChart(ComparitiveSA.FirstOrDefault().Value, title, (items => new
                                {
                                    SNo = items.RptId.ToString(),
                                    Student_Id = items.IdNo,
                                    items.Name,
                                    EngSI = items.SIEFL != 0 ? items.SIEFL.ToString() : items.SIESL.ToString(),
                                    EngMEI = items.MIEFL != 0 ? items.MIEFL.ToString() : items.MIESL.ToString(),
                                    EngMEII = items.MIIEFL != 0 ? items.MIIEFL.ToString() : items.MIIESL.ToString(),
                                    EngMEIII = items.MIIIEFL != 0 ? items.MIIIEFL.ToString() : items.MIIIESL.ToString(),
                                    EngMEIV = items.MIVEFL != 0 ? items.MIVEFL.ToString() : items.MIVESL.ToString(),
                                    LangSI = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.SILang.ToString() : "",
                                    LangMEI = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MILang.ToString() : "",
                                    LangMEII = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MIILang.ToString() : "",
                                    LangMEIII = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MIIILang.ToString() : "",
                                    LangMEIV = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MIVLang.ToString() : "",
                                    CSSI = items.SIComSci.ToString(),
                                    CSMEI = items.MIComSci.ToString(),
                                    CSMEII = items.MIIComSci.ToString(),
                                    CSMEIII = items.MIIIComSci.ToString(),
                                    CSMEIV = items.MIVComSci.ToString(),
                                    MathSI = items.SIMath.ToString(),
                                    MathMEI = items.MIMath.ToString(),
                                    MathMEII = items.MIIMath.ToString(),
                                    MathMEIII = items.MIIIMath.ToString(),
                                    MathMEIV = items.MIVMath.ToString(),
                                    EcoSI = items.SIEco.ToString(),
                                    EcoMEI = items.MIEco.ToString(),
                                    EcoMEII = items.MIIEco.ToString(),
                                    EcoMEIII = items.MIIIEco.ToString(),
                                    EcoMEIV = items.MIVEco.ToString(),
                                    PHYSI = items.SIPhyEdu.ToString(),
                                    PHYMEI = items.MIPhyEdu.ToString(),
                                    PHYMEII = items.MIIPhyEdu.ToString(),
                                    PHYMEIII = items.MIIIPhyEdu.ToString(),
                                    PHYMEIV = items.MIVPhyEdu.ToString(),
                                    ICTSI = items.SIICT.ToString(),
                                    ICTMEI = items.MIICT.ToString(),
                                    ICTMEII = items.MIIICT.ToString(),
                                    ICTMEIII = items.MIIIICT.ToString(),
                                    ICTMEIV = items.MIVICT.ToString(),
                                    TotalSI = items.SITotal.ToString(),
                                    TotalMEI = items.MITotal.ToString(),
                                    TotalMEII = items.MIITotal.ToString(),
                                    TotalMEIII = items.MIIITotal.ToString(),
                                    TotalMEIV = items.MIVTotal.ToString(),
                                    AvgSI = (items.SITotal / 5).ToString("#.##"),
                                    AvgMEI = (items.MITotal / 5).ToString("#.##"),
                                    AvgMEII = (items.MIITotal / 5).ToString("#.##"),
                                    AvgMEIII = (items.MIIITotal / 5).ToString("#.##"),
                                    AvgMEIV = (items.MIVTotal / 5).ToString("#.##"),
                                    GradeSI = GetGradeList((items.SITotal / 5).ToString("#")),
                                    GradeMEI = GetGradeList((items.MITotal / 5).ToString("#")),
                                    GradeMEII = GetGradeList((items.MIITotal / 5).ToString("#")),
                                    GradeMEIII = GetGradeList((items.MIIITotal / 5).ToString("#")),
                                    GradeMEIV = GetGradeList((items.MIVTotal / 5).ToString("#"))
                                }), headerTable);
                            }
                            else
                            {
                                string headerTable = @"<Table><tr><td colspan='58' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                                 @"<Table><tr><td colspan='58' align='center' style='font-size: large;'><b>Comparitive Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                                "<tr><td colspan='58' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr>";
                                headerTable = headerTable + "</b></Table>";
                                ExptToXL_AssessPointChart(ComparitiveSA.FirstOrDefault().Value, title, (items => new
                                {
                                    SNo = items.RptId.ToString(),
                                    Student_Id = items.IdNo,
                                    items.Name,
                                    EngSI = items.SIEFL != 0 ? items.SIEFL.ToString() : items.SIESL.ToString(),
                                    EngMEI = items.MIEFL != 0 ? items.MIEFL.ToString() : items.MIESL.ToString(),
                                    EngMEII = items.MIIEFL != 0 ? items.MIIEFL.ToString() : items.MIIESL.ToString(),
                                    EngMEIII = items.MIIIEFL != 0 ? items.MIIIEFL.ToString() : items.MIIIESL.ToString(),
                                    EngMEIV = items.MIVEFL != 0 ? items.MIVEFL.ToString() : items.MIVESL.ToString(),
                                    LangSI = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.SILang.ToString() : "",
                                    LangMEI = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MILang.ToString() : "",
                                    LangMEII = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MIILang.ToString() : "",
                                    LangMEIII = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MIIILang.ToString() : "",
                                    LangMEIV = GetSecondLanguangeStudent(items.IdNo, items.Campus, items.Grade) != null ? items.MIVLang.ToString() : "",
                                    MathSI = items.SIMath.ToString(),
                                    MathMEI = items.MIMath.ToString(),
                                    MathMEII = items.MIIMath.ToString(),
                                    MathMEIII = items.MIIIMath.ToString(),
                                    MathMEIV = items.MIVMath.ToString(),
                                    ChemSI = items.SIChem.ToString(),
                                    ChemMEI = items.MIChem.ToString(),
                                    ChemMEII = items.MIIChem.ToString(),
                                    ChemMEIII = items.MIIIChem.ToString(),
                                    ChemMEIV = items.MIVChem.ToString(),
                                    PhySI = items.SIPhy.ToString(),
                                    PhyMEI = items.MIPhy.ToString(),
                                    PhyMEII = items.MIIPhy.ToString(),
                                    PhyMEIII = items.MIIIPhy.ToString(),
                                    PhyMEIV = items.MIVPhy.ToString(),
                                    BioSI = items.SIBio.ToString(),
                                    BioMEI = items.MIBio.ToString(),
                                    BioMEII = items.MIIBio.ToString(),
                                    BioMEIII = items.MIIIBio.ToString(),
                                    BioMEIV = items.MIVBio.ToString(),
                                    EcoSI = items.SIEco.ToString(),
                                    EcoMEI = items.MIEco.ToString(),
                                    EcoMEII = items.MIIEco.ToString(),
                                    EcoMEIII = items.MIIIEco.ToString(),
                                    EcoMEIV = items.MIVEco.ToString(),
                                    ICTSI = items.SIICT.ToString(),
                                    ICTMEI = items.MIICT.ToString(),
                                    ICTMEII = items.MIIICT.ToString(),
                                    ICTMEIII = items.MIIIICT.ToString(),
                                    ICTMEIV = items.MIVICT.ToString(),
                                    TotalSI = items.SITotal.ToString(),
                                    TotalMEI = items.MITotal.ToString(),
                                    TotalMEII = items.MIITotal.ToString(),
                                    TotalMEIII = items.MIIITotal.ToString(),
                                    TotalMEIV = items.MIVTotal.ToString(),
                                    AvgSI = (items.SITotal / 6).ToString("#.##"),
                                    AvgMEI = (items.MITotal / 6).ToString("#.##"),
                                    AvgMEII = (items.MIITotal / 6).ToString("#.##"),
                                    AvgMEIII = (items.MIIITotal / 6).ToString("#.##"),
                                    AvgMEIV = (items.MIVTotal / 6).ToString("#.##"),
                                    GradeSI = GetGradeList((items.SITotal / 6).ToString("#")),
                                    GradeMEI = GetGradeList((items.MITotal / 6).ToString("#")),
                                    GradeMEII = GetGradeList((items.MIITotal / 6).ToString("#")),
                                    GradeMEIII = GetGradeList((items.MIIITotal / 6).ToString("#")),
                                    GradeMEIV = GetGradeList((items.MIVTotal / 6).ToString("#"))
                                }), headerTable);
                            }
                            #endregion
                        }
                        else
                        {
                            if ((Grade == "IX" || Grade == "X") && IsCombinedSci == true)
                            {
                                long totalRecords = ComparitiveSA.Count;
                                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                                var jsonData = new
                                {
                                    total = totalPages,
                                    page = page,
                                    records = totalRecords,
                                    rows = (
                                         from items in ComparitiveSA.FirstOrDefault().Value
                                         select new
                                         {
                                             cell = new string[] { 
                                           items.RptId.ToString(),
                                           items.IdNo,
                                           items.Name,
                                           items.Campus,
                                           items.Grade,
                                           items.Section,
                                           items.AcademicYear,
                                           items.SIEFL!=0?items.SIEFL.ToString():items.SIESL.ToString(),
                                           items.MIEFL!=0?items.MIEFL.ToString():items.MIESL.ToString(),
                                           items.MIIEFL!=0?items.MIIEFL.ToString():items.MIIESL.ToString(),
                                           items.MIIIEFL!=0?items.MIIIEFL.ToString():items.MIIIESL.ToString(),
                                           items.MIVEFL!=0?items.MIVEFL.ToString():items.MIVESL.ToString(),
                                           GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.SILang.ToString():"",
                                           GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MILang.ToString():"",
                                           GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MIILang.ToString():"",
                                           GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MIIILang.ToString():"",
                                           GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MIVLang.ToString():"",
                                           items.SIComSci.ToString(),
                                           items.MIComSci.ToString(),
                                           items.MIIComSci.ToString(),
                                           items.MIIIComSci.ToString(),
                                           items.MIVComSci.ToString(),
                                           items.SIMath.ToString(),
                                           items.MIMath.ToString(),
                                           items.MIIMath.ToString(),
                                           items.MIIIMath.ToString(),
                                           items.MIVMath.ToString(),
                                           items.SIEco.ToString(),
                                           items.MIEco.ToString(),
                                           items.MIIEco.ToString(),
                                           items.MIIIEco.ToString(),    
                                           items.MIVEco.ToString(),
                                           items.SIPhyEdu.ToString(),
                                           items.MIPhyEdu.ToString(),
                                           items.MIIPhyEdu.ToString(),
                                           items.MIIIPhyEdu.ToString(),
                                           items.MIVPhyEdu.ToString(),
                                           items.SIICT.ToString(),
                                           items.MIICT.ToString(),
                                           items.MIIICT.ToString(),
                                           items.MIIIICT.ToString(),
                                           items.MIVICT.ToString(),
                                           items.SITotal.ToString(),
                                           items.MITotal.ToString(),
                                           items.MIITotal.ToString(),
                                           items.MIIITotal.ToString(),
                                           items.MIVTotal.ToString(),
                                           (items.SITotal/5).ToString("#.##"),
                                           (items.MITotal/5).ToString("#.##"),
                                           (items.MIITotal/5).ToString("#.##"),
                                           (items.MIIITotal/5).ToString("#.##"),
                                           (items.MIVTotal/5).ToString("#.##"),
                                           GetGradeList((items.SITotal/5).ToString("#")),
                                           GetGradeList((items.MITotal/5).ToString("#")),
                                           GetGradeList((items.MIITotal/5).ToString("#")),
                                           GetGradeList((items.MIIITotal/5).ToString("#")),
                                           GetGradeList((items.MIVTotal/5).ToString("#")),
                                     }
                                         })
                                };
                                return Json(jsonData, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                long totalRecords = ComparitiveSA.Count;
                                int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                                var jsonData = new
                                {
                                    total = totalPages,
                                    page = page,
                                    records = totalRecords,
                                    rows = (
                                         from items in ComparitiveSA.FirstOrDefault().Value
                                         select new
                                         {
                                             cell = new string[] { 
                                      items.RptId.ToString(),
                                     items.IdNo,
                                     items.Name,
                                     items.Campus,
                                     items.Grade,
                                     items.Section,
                                     items.AcademicYear,
                                     items.SIEFL!=0?items.SIEFL.ToString():items.SIESL.ToString(),
                                     items.MIEFL!=0?items.MIEFL.ToString():items.MIESL.ToString(),
                                     items.MIIEFL!=0?items.MIIEFL.ToString():items.MIIESL.ToString(),
                                     items.MIIIEFL!=0?items.MIIIEFL.ToString():items.MIIIESL.ToString(),
                                     items.MIVEFL!=0?items.MIVEFL.ToString():items.MIVESL.ToString(),
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.SILang.ToString():"",
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MILang.ToString():"",
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MIILang.ToString():"",
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MIIILang.ToString():"",
                                     GetSecondLanguangeStudent(items.IdNo,items.Campus,items.Grade)!=null?items.MIVLang.ToString():"",
                                      items.SIMath.ToString(),
                                     items.MIMath.ToString(),
                                     items.MIIMath.ToString(),
                                     items.MIIIMath.ToString(),
                                     items.MIVMath.ToString(),
                                     items.SIChem.ToString(),
                                     items.MIChem.ToString(),
                                     items.MIIChem.ToString(),
                                     items.MIIIChem.ToString(),
                                     items.MIVChem.ToString(),
                                     items.SIPhy.ToString(),
                                     items.MIPhy.ToString(),
                                     items.MIIPhy.ToString(),
                                     items.MIIIPhy.ToString(),
                                     items.MIVPhy.ToString(),
                                     items.SIBio.ToString(),
                                     items.MIBio.ToString(),
                                     items.MIIBio.ToString(),
                                     items.MIIIBio.ToString(),
                                     items.MIVBio.ToString(),
                                     items.SIEco.ToString(),
                                     items.MIEco.ToString(),
                                     items.MIIEco.ToString(),
                                     items.MIIIEco.ToString(),
                                     items.MIVEco.ToString(),
                                     items.SIICT.ToString(),
                                     items.MIICT.ToString(),
                                     items.MIIICT.ToString(),
                                     items.MIIIICT.ToString(),
                                     items.MIVICT.ToString(),
                                     items.SITotal.ToString(),
                                     items.MITotal.ToString(),
                                     items.MIITotal.ToString(),
                                     items.MIIITotal.ToString(),
                                     items.MIVTotal.ToString(),
                                     (items.SITotal/6).ToString("#.##"),
                                     (items.MITotal/6).ToString("#.##"),
                                     (items.MIITotal/6).ToString("#.##"),
                                     (items.MIIITotal/6).ToString("#.##"),
                                     (items.MIVTotal/6).ToString("#.##"),
                                     GetGradeList((items.SITotal/6).ToString("#")),
                                     GetGradeList((items.MITotal/6).ToString("#")),
                                     GetGradeList((items.MIITotal/6).ToString("#")),
                                     GetGradeList((items.MIIITotal/6).ToString("#")),
                                     GetGradeList((items.MIVTotal/6).ToString("#")),
                                     }
                                         })
                                };
                                return Json(jsonData, JsonRequestBehavior.AllowGet);
                            }
                        }
                        return Json(null, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var AssLst = new { rows = (new { cell = new string[] { } }) };
                        return Json(AssLst, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    var AssLst = new { rows = (new { cell = new string[] { } }) };
                    return Json(AssLst, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult SummativeMarkAnalysis()
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null)
                return RedirectToAction("LogOff", "Account");
            else
            {
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                MastersService ms = new MastersService();
                Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                ViewBag.campusddl = CampusMaster.First().Value;
                Dictionary<long, IList<GradeMaster>> GradeMaster = ms.GetGradeMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                ViewBag.gradeddl = GradeMaster.First().Value;
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
        }

        public ActionResult SummativeMarkAnalysisJqGrid(string Campus, string Grade, string Semester, string ExportType, int? Id, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrWhiteSpace(Campus)) { criteria.Add("Campus", Campus); }
                    if (!string.IsNullOrWhiteSpace(Grade)) { criteria.Add("Grade", Grade); }
                    if (!string.IsNullOrWhiteSpace(Semester)) { criteria.Add("semester", Semester); }
                    DateTime DateNow = DateTime.Now;
                    if (Grade == "IX" || Grade == "X")
                    {
                        //if (Campus == "CHENNAI MAIN")
                        //    criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                        //else
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                        //criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());///replace this once over
                        Dictionary<long, IList<SummativeMarkAnalysisIX_Vw>> AssessmentIXList = a360Obj.GetsummativeMarkAnalysisListWithsearchCriteria(page - 1, rows, sord, sidx, criteria);
                        if (AssessmentIXList != null && AssessmentIXList.First().Key > 0)
                        {
                            if (ExportType == "Excel")
                            {
                                string title = "Summative Assessment Mark Analysis" + DateTime.Now.ToString("0:dd/MM/YY") + ""; ;
                                string logopath = ConfigurationManager.AppSettings["AppLogos"].ToString() + "tips.gif";
                                string headerTable = @"<Table><tr><td colspan='8' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                                 @"<Table><tr><td colspan='8' align='center' style='font-size: large;'><b>Summative Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                                "<tr><td colspan='8' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr>";
                                headerTable = headerTable + "</b></Table>";
                                ExptToXL_AssessPointChart(AssessmentIXList.FirstOrDefault().Value, title, (items => new
                                {
                                    Subject = items.Subject,
                                    Morethan90 = items.ntytohund,
                                    MoreThan80to90 = items.etytonty,
                                    MoreThan70to80 = items.svtytoety,
                                    MoreThan60to70 = items.sxtytosvty,
                                    MoreThan50to60 = items.ftytosxty,
                                    MoreThan40to50 = items.frtytofty,
                                    Below40 = items.blwfrty,
                                    TotalStudents = items.TotalStudents.ToString(),
                                }), headerTable);
                            }
                            else
                            {
                                long totalrecords = AssessmentIXList.FirstOrDefault().Key;
                                int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                                var SAIXLst = new
                                {
                                    total = totalPages,
                                    page = page,
                                    records = totalrecords,
                                    rows = (
                                         from items in AssessmentIXList.First().Value
                                         select new
                                         {
                                             cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.Campus,
                                            items.Grade,
                                            items.Section,
                                            items.semester,
                                            items.Subject,
                                            items.ntytohund !="0"?"<a style='text-decoration: none; border-bottom: 1px solid green;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "90" + "');\" '>"+items.ntytohund+"</a>":"0",
                                            items.etytonty !="0" ? "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "80" + "');\" '>"+items.etytonty+"</a>":"0",
                                            items.svtytoety !="0"?"<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "70" + "');\" '>"+items.svtytoety+"</a>":"0",
                                            items.sxtytosvty !="0"? "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "60" + "');\" '>"+items.sxtytosvty+"</a>":"0",
                                            items.ftytosxty!="0"? "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "50" + "');\" '>"+items.ftytosxty+"</a>":"0",
                                            items.frtytofty!="0"?  "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "40" + "');\" '>"+items.frtytofty+"</a>":"0",
                                            items.blwfrty!="0"?   "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "39" + "');\" '>"+items.blwfrty+"</a>":"0",
                                            items.TotalStudents.ToString(),
                                         }
                                         }).ToList()
                                };
                                return Json(SAIXLst, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {
                            var SAemptyLst = new { rows = (new { cell = new string[] { } }) };
                            return Json(SAemptyLst, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        if (DateNow.Month > 5)
                            criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                        else
                            criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());

                        Dictionary<long, IList<SummativeMarkAnalysisVIVIII_Vw>> AssessmentVIVIIIList = a360Obj.GetsummativeMarkAnalysisListVIVIII(page - 1, rows, sord, sidx, criteria);
                        if (AssessmentVIVIIIList != null && AssessmentVIVIIIList.First().Key > 0)
                        {
                            if (ExportType == "Excel")
                            {
                                string title = "Summative Assessment Mark Analysis" + DateTime.Now.ToString("0:dd/MM/YY") + ""; ;
                                string logopath = ConfigurationManager.AppSettings["AppLogos"].ToString() + "tips.gif";
                                string headerTable = @"<Table><tr><td colspan='8' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                                 @"<Table><tr><td colspan='8' align='center' style='font-size: large;'><b>Summative Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                                "<tr><td colspan='8' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr>";
                                headerTable = headerTable + "</b></Table>";
                                ExptToXL_AssessPointChart(AssessmentVIVIIIList.FirstOrDefault().Value, title, (items => new
                                {
                                    Subject = items.Subject,
                                    Morethan90 = items.ntytohund,
                                    MoreThan80to90 = items.etytonty,
                                    MoreThan70to80 = items.svtytoety,
                                    MoreThan60to70 = items.sxtytosvty,
                                    MoreThan50to60 = items.ftytosxty,
                                    MoreThan40to50 = items.frtytofty,
                                    Below40 = items.blwfrty,
                                    TotalStudents = items.TotalStudents.ToString()
                                }), headerTable);
                            }
                            else
                            {
                                long totalrecords = AssessmentVIVIIIList.FirstOrDefault().Key;
                                int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                                var SAVIVIIILst = new
                                {
                                    total = totalPages,
                                    page = page,
                                    records = totalrecords,
                                    rows = (
                                         from items in AssessmentVIVIIIList.First().Value
                                         select new
                                         {
                                             cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.Campus,
                                            items.Grade,
                                            items.Section,
                                            items.semester,
                                            items.Subject,
                                            items.ntytohund !="0"?"<a style='text-decoration: none; border-bottom: 1px solid green;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "90" + "');\" '>"+items.ntytohund+"</a>":"0",
                                            items.etytonty !="0" ? "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "80" + "');\" '>"+items.etytonty+"</a>":"0",
                                            items.svtytoety !="0"?"<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "70" + "');\" '>"+items.svtytoety+"</a>":"0",
                                            items.sxtytosvty !="0"? "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "60" + "');\" '>"+items.sxtytosvty+"</a>":"0",
                                            items.ftytosxty!="0"? "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "50" + "');\" '>"+items.ftytosxty+"</a>":"0",
                                            items.frtytofty!="0"?  "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "40" + "');\" '>"+items.frtytofty+"</a>":"0",
                                            items.blwfrty!="0"?   "<a style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"MarkAnalysis('" + items.Campus + "','" + items.Grade + "','" + items.Section + "','" + items.Subject + "','" + "39" + "');\" '>"+items.blwfrty+"</a>":"0",
                                            items.TotalStudents.ToString(),
                                         }
                                         }).ToList()
                                };
                                return Json(SAVIVIIILst, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {
                            var SAemptyLst = new { rows = (new { cell = new string[] { } }) };
                            return Json(SAemptyLst, JsonRequestBehavior.AllowGet);
                        }
                    }
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "TransportMgmtPolicy");
                throw ex;
            }
        }

        public PartialViewResult StudentsMarkDetails()
        {
            return PartialView();
        }

        public ActionResult StudentMarkDetailsJqgrid(string Campus, string grade, string section, string sub, long marks, int? Id, int rows, string sidx, string sord, int? page = 1)
        {
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            Dictionary<string, object> likecriteria = new Dictionary<string, object>();
            if (!string.IsNullOrWhiteSpace(Campus)) { criteria.Add("Campus", Campus); }
            if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
            if (!string.IsNullOrWhiteSpace(sub)) { criteria.Add("Subject", sub); }
            if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
            string mrks = marks.ToString();
            switch (mrks)
            {
                case "90": long[] nw = new long[] { 90, 100 }; { likecriteria.Add("Calculated", nw); } break;
                case "80": long[] ew = new long[] { 80, 90 }; { likecriteria.Add("Calculated", ew); } break;
                case "70": long[] sw = new long[] { 70, 80 }; { likecriteria.Add("Calculated", sw); } break;
                case "60": long[] ssw = new long[] { 60, 70 }; { likecriteria.Add("Calculated", ssw); } break;
                case "50": long[] fw = new long[] { 50, 60 }; { likecriteria.Add("Calculated", fw); } break;
                case "40": long[] ffw = new long[] { 40, 50 }; { likecriteria.Add("Calculated", ffw); } break;
                case "39": long[] tw = new long[] { 0, 39 }; { likecriteria.Add("Calculated", tw); } break;
                default: break;
            }
            DateTime DateNow = DateTime.Now;
            if (grade == "IX" || grade == "X")
            {
                //if (Campus == "CHENNAI MAIN")
                //    criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                //else
                criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                //criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());///replace this once over
                Dictionary<long, IList<SumativeStudentDetailsIX_Vw>> SumativeIXStudentsList = a360Obj.GetSumativeStudentIXListWithPagingAndInCriteria(page - 1, rows, sord, sidx, criteria, likecriteria);
                if (SumativeIXStudentsList != null && SumativeIXStudentsList.First().Key > 0)
                {
                    long totalrecords = SumativeIXStudentsList.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var SummativeStudent = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,
                        rows = (
                             from items in SumativeIXStudentsList.First().Value
                             select new
                             {
                                 cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.Name,
                                            items.Campus,
                                            items.Grade,
                                            items.Section,
                                            items.Semester,
                                            items.Subject,
                                            items.Calculated.ToString(),
                                         }
                             }).ToList()
                    };
                    return Json(SummativeStudent, JsonRequestBehavior.AllowGet);
                }

            }
            else
            {
                Dictionary<long, IList<SumativeStudentDetails_Vw>> SumativeStudentsList = a360Obj.GetSumativeStudentListWithPagingAndInCriteria(page - 1, rows, sord, sidx, criteria, likecriteria);
                if (SumativeStudentsList != null && SumativeStudentsList.First().Key > 0)
                {
                    long totalrecords = SumativeStudentsList.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var SummativeStudent = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,
                        rows = (
                             from items in SumativeStudentsList.First().Value
                             select new
                             {
                                 cell = new string[] 
                                         {
                                            items.Id.ToString(),
                                            items.Name,
                                            items.Campus,
                                            items.Grade,
                                            items.Section,
                                            items.Semester,
                                            items.Subject,
                                            items.Calculated.ToString(),
                                         }
                             }).ToList()
                    };
                    return Json(SummativeStudent, JsonRequestBehavior.AllowGet);
                }
            }

            return Json(null, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetAssess360CompAssessmentMasterListByName(string tab, bool? IssueCredits, string Campus)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                int[] values;
                if (tab == "1") { values = new int[2] { 1, 2 }; criteria.Add("IsCredit", IssueCredits ?? false); }
                else if (tab == "2") { values = new int[2] { 3, 4 }; }
                else if (tab == "3")
                {
                    if (Campus == "IB MAIN" || Campus == "CHENNAI MAIN")
                    {
                        values = new int[6] { 5, 6, 7, 8, 9, 10 };
                    }
                    else
                    {
                        values = new int[3] { 5, 6, 7 };
                    }
                }
                else
                {
                    values = new int[7] { 4, 5, 6, 7, 8, 9, 10 };
                    criteria.Add("IsCredit", true);
                }
                Dictionary<long, string> brncd = new Dictionary<long, string>();
                Dictionary<long, IList<AssessCompMaster>> dcnAssCompMaster = assSrvc.GetAssess360CompMasterListWithPagingAndCriteriaWithIn(0, 9999, "", "", "GroupId", values, criteria, null);
                if (dcnAssCompMaster != null && dcnAssCompMaster.Count > 0)
                {
                    foreach (AssessCompMaster brnch in dcnAssCompMaster.First().Value)
                    {
                        brncd.Add(brnch.GroupId, brnch.CompName);
                    }
                    return PartialView("Select", brncd);
                }
                else { return Json(null, JsonRequestBehavior.AllowGet); }
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }

        public ActionResult FormativeMarkAnalysis()
        {
            try
            {
                TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                if (Userobj == null)
                    return RedirectToAction("LogOff", "Account");
                else
                {
                    string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                    string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                    ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                    return View();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
            finally
            { }
        }

        public ActionResult GetFormativeMarkInbox(int page, int rows, string sidx, string sord, string Name, string Campus, string Section, string Grade)
        {
            try
            {
                if (!string.IsNullOrEmpty(Campus) && !string.IsNullOrEmpty(Grade))
                {
                    Assess360Service assSrvc = new Assess360Service();
                    Dictionary<string, object> criteria = new Dictionary<string, object>(); string colName = string.Empty; string[] values = new string[1];
                    if (!string.IsNullOrWhiteSpace(Name)) { criteria.Add("Name", Name); }
                    var usrcmp = Session["UserCampus"] as IEnumerable<string>;
                    if (usrcmp.Count() != 0)
                    {
                        if (usrcmp.First() != null)            // to check if the usrcmp obj is null or with data
                        {
                            if (!string.IsNullOrWhiteSpace(Campus) && Campus != "Select") { criteria.Add("Campus", Campus); }
                            else { criteria.Add("Campus", usrcmp); }
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(Section) && Section != "Select") { criteria.Add("Section", Section); }
                    if (!string.IsNullOrWhiteSpace(Grade) && Grade != "Select")
                    {
                        colName = "Grade";
                        values[0] = Grade;
                    }
                    sord = sord == "desc" ? "Desc" : "Asc";
                    DateTime DateNow = DateTime.Now;
                    if (Grade == "IX" || Grade == "X")
                    {
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    }
                    else
                    {
                        if (DateNow.Month > 5)
                            criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                        else
                            criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                    }
                    criteria.Add("IsActive", true);
                    Dictionary<long, IList<Assess360>> dcnAssesstLst = assSrvc.GetAssess360ListWithPagingAndCriteriaWithAlias(page - 1, rows, sidx, sord, colName, values, criteria, null);
                    if (dcnAssesstLst != null && dcnAssesstLst.Count > 0)
                    {
                        UserService us = new UserService();
                        IList<Assess360> lstAsssessCompnt = dcnAssesstLst.FirstOrDefault().Value;
                        long totalRecords = dcnAssesstLst.FirstOrDefault().Key;
                        int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                        var jsonData = new
                        {
                            total = totalPages,
                            page = page,
                            records = totalRecords,
                            rows = (
                            from items in lstAsssessCompnt
                            select new
                            {
                                i = items.Id,
                                cell = new string[] 
                            { 
                            items.Id.ToString(),
                            items.Name,    //inbox secrch Field     
                            items.AcademicYear,
                            items.Campus,   //inbox secrch Field
                            items.IdNo,
                            items.Section,       //inbox secrch Field
                            items.Grade,         //inbox secrch Field
                           "<img src='/Images/History.png ' id='ImgHistory' onclick=\"ViewFAMarksList( '" + items.Id +"');\" />",
                           "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GetFAPdfMarkList( '" + items.Id +"');\" />",
                           "<img src='/Images/History.png ' id='ImgHistory' onclick=\"ViewFAHWMarksList( '" + items.Id +"');\" />",
                           "<img src='/Images/Pdf_Icon.png ' id='ImgHistory' onclick=\"GetFAHWPdfMarkList( '" + items.Id +"');\" />",
                            items.CreatedBy!=null?us.GetUserNameByUserId(items.CreatedBy):"",
                            items.DateCreated!=null?items.DateCreated.Value.ToString("dd-MMM-yyyy HH:mm"):"",
                            items.CreatedBy
                            }
                            })
                        };
                        return Json(jsonData, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
            finally
            { }
        }

        public ActionResult ViewFAMarks(long? Assess360Id)
        {
            ViewBag.Id = Assess360Id;
            return View();
        }

        public ActionResult ViewFAMarksListJqGrid(long? Id, string UserType, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                //Assess360 a360 = assSrvc.GetAssess360ById(Id ?? 0);
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                //criteria.Add("Campus", a360.Campus);
                //criteria.Add("Grade", a360.Grade);
                //Dictionary<long, IList<SubjectMaster>> subMasterLst = assSrvc.GetSubjectMasterListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);

                criteria.Add("AssessId", Id);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<FormattiveAssessment_Vw>> dcnAssesstLst = assSrvc.GetFAMarkListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                if (dcnAssesstLst != null && dcnAssesstLst.Count > 0)
                {
                    long totalRecords = dcnAssesstLst.First().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                             from items in dcnAssesstLst.First().Value
                             select new
                             {
                                 i = items.Id,
                                 cell = new string[]
                                     {
                                         items.Id.ToString(),
                                         items.AssessId.ToString(),
                                         //items.StudentId.ToString(),
                                         items.IdNo,
                                         items.Name,
                                         items.Campus,
                                         items.AcademicYear,
                                         items.Section,
                                         items.Grade,
                                         items.Subject,
                                         items.Jan.ToString(),
                                         items.Feb.ToString(),
                                         items.Mar.ToString(),
                                         items.Apr.ToString(),
                                         items.May.ToString(),
                                         items.Jun.ToString(),
                                         items.Jul.ToString(),
                                         items.Aug.ToString(),
                                         items.Sep.ToString(),
                                         items.Oct.ToString(),
                                         items.Nov.ToString(),
                                         items.Dec.ToString(),
                                     }
                             })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "CallMgmntPolicy");
                throw ex;
            }
        }

        public ActionResult ViewFAHWMarks(long? Assess360Id)
        {
            ViewBag.Id = Assess360Id;
            return View();
        }

        public ActionResult ViewFAHWMarksListJqGrid(long? Id, string UserType, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                Assess360Service assSrvc = new Assess360Service();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("AssessId", Id);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<FA_HW_Vw>> FAHWLst = assSrvc.GetFAHWMarkListWithPagingAndCriteria(page - 1, rows, sidx, sord, criteria);
                if (FAHWLst != null && FAHWLst.Count > 0)
                {
                    long totalRecords = FAHWLst.First().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                             from items in FAHWLst.First().Value
                             select new
                             {
                                 i = items.Id,
                                 cell = new string[]
                                     {
                                         items.Id.ToString(),
                                         items.AssessId.ToString(),
                                         //items.StudentId.ToString(),
                                         items.IdNo,
                                         items.Name,
                                         items.Campus,
                                         items.AcademicYear,
                                         items.Section,
                                         items.Grade,
                                         items.Subject,
                                         items.FAJan.ToString(),
                                         items.HWJan.ToString(),
                                         items.FAFeb.ToString(),
                                         items.HWFeb.ToString(),
                                         items.FAMar.ToString(),
                                         items.HWMar.ToString(),
                                         items.FAApr.ToString(),
                                         items.HWApr.ToString(),
                                         items.FAJun.ToString(),
                                         items.HWJun.ToString(),
                                         items.FAJul.ToString(),
                                         items.HWJul.ToString(),
                                         items.FAAug.ToString(),
                                         items.HWAug.ToString(),
                                         items.FASep.ToString(),
                                         items.HWSep.ToString(),
                                         items.FAOct.ToString(),
                                         items.HWOct.ToString(),
                                         items.FANov.ToString(),
                                         items.HWNov.ToString(),
                                         items.FADec.ToString(),
                                         items.HWDec.ToString(),
                                     }
                             })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                return null;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "CallMgmntPolicy");
                throw ex;
            }
        }

        public ActionResult GenerateFAMarkPDF(long? assessid, bool IsFAHW)
        {
            string userId = base.ValidateUser();
            if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
            else
            {
                string reportName = string.Empty;
                string reportPageName = string.Empty;
                FormattiveAssessmentPrint_vw FAList = new FormattiveAssessmentPrint_vw();
                Assess360 a360 = a360Obj.GetAssess360ById(assessid ?? 0);
                FAList.Name = a360.Name;
                FAList.IdNo = a360.IdNo;
                FAList.Campus = a360.Campus;
                FAList.Grade = a360.Grade;
                FAList.Section = a360.Section;
                FAList.AcademicYear = a360.AcademicYear;
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("AssessId", assessid);
                if (IsFAHW)
                {
                    Dictionary<long, IList<FA_HW_Vw>> FAHWAssessment = a360Obj.GetFAHWMarkListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    FAList.FAHWMarkList = FAHWAssessment.FirstOrDefault().Value;
                    reportName = "FAHW report"; reportPageName = "FAHWAssessmentPrint";
                    FAList.FileName = a360.IdNo + "_FAHWReport";
                }
                else
                {
                    Dictionary<long, IList<FormattiveAssessment_Vw>> FATestAssessment = a360Obj.GetFAMarkListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                    FAList.FAMarkList = FATestAssessment.FirstOrDefault().Value;
                    reportName = "FA report"; reportPageName = "FormattiveAssessmentPrint";
                    FAList.FileName = a360.IdNo + "_FAReport";
                }

                FAList.TipsLogo = ConfigurationManager.AppSettings["AddHeader"] + "TipsLogo.jpg";
                FAList.TipsNaceLogo = ConfigurationManager.AppSettings["AddHeader"] + "logonace.jpg";
                FAList.TipsName = "THE INDIAN PUBLIC SCHOOL, COIMBATORE";
                FAList.Exam = "Formative Assessment Report";
                //TipsAddress(RptCardList, RptCardList.Campus);
                return this.ViewPdf(reportName, reportPageName, FAList, "landScape", FAList.FileName);
            }
        }

        public ActionResult GenerateFAMarkAllPDF(string Campus, string Section, string Grade)
        {
            string userId = base.ValidateUser();
            if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
            else
            {
                FAReportForAllPrint_vw FAAllList = new FAReportForAllPrint_vw();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", Campus);
                criteria.Add("Grade", Grade);
                criteria.Add("Section", Section);
                DateTime DateNow = DateTime.Now;
                if (Grade == "IX" || Grade == "X")
                {
                    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                }
                else
                {
                    if (DateNow.Month > 5)
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    else
                        criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                }
                Dictionary<long, IList<FormattiveAssessment_Vw>> FATestAssessment = a360Obj.GetFAMarkListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                FAAllList.FAMarkList = FATestAssessment.FirstOrDefault().Value;
                criteria.Add("IsActive", true);
                Dictionary<long, IList<Assess360>> dcnAssesstLst = a360Obj.GetAssess360ListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
                FAAllList.FAMarkNameList = dcnAssesstLst.FirstOrDefault().Value;
                FAAllList.FileName = "FAAllReport";
                FAAllList.TipsLogo = ConfigurationManager.AppSettings["AddHeader"] + "TipsLogo.jpg";
                FAAllList.TipsNaceLogo = ConfigurationManager.AppSettings["AddHeader"] + "logonace.jpg";
                FAAllList.TipsName = "THE INDIAN PUBLIC SCHOOL, COIMBATORE";
                FAAllList.Exam = "Formative Assessment Report";
                //TipsAddress(RptCardList, RptCardList.Campus);
                return this.ViewPdf("FA report", "FormattiveAssessmentPrintAll", FAAllList, "landScape", FAAllList.FileName);
            }
        }

        public ActionResult ComparitiveFAReport(string Campus, string Grade, string Section)
        {
            try
            {
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", Campus);
                criteria.Add("Grade", Grade);
                criteria.Add("Section", Section);
                DateTime DateNow = DateTime.Now;
                if (Grade == "IX" || Grade == "X")
                {
                    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                }
                else
                {
                    if (DateNow.Month > 5)
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    else
                        criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                }
                Dictionary<long, IList<ComparitiveFAReport_vw>> ComparitiveFA = a360Obj.GetComparativeFAReportResultList(0, 99999, string.Empty, string.Empty, criteria);
                if (ComparitiveFA != null && ComparitiveFA.Count > 0 && ComparitiveFA.FirstOrDefault().Key > 0 && ComparitiveFA.FirstOrDefault().Value != null)
                {
                    int i = 0;
                    foreach (ComparitiveFAReport_vw FAReport in ComparitiveFA.FirstOrDefault().Value)
                    {
                        FAReport.Id = i + 1;
                        i++;
                    }
                    string title = "ComparitiveFA" + DateTime.Now.ToString("0:dd/MM/yy") + "";
                    string logopath = ConfigurationManager.AppSettings["AppLogos"].ToString() + "tips.gif";
                    if (Grade == "IX" || Grade == "X")
                    {
                        string headerTable = @"<Table><tr><td colspan='135' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                         @"<Table><tr><td colspan='135' align='center' style='font-size: large;'><b>Comparitive Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                        "<tr><td colspan='135' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr></b></Table>";
                        headerTable = headerTable + "<Table border='1' bgcolor='#206FAE'><tr><td colspan='3'></td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Biology</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Chemistry</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Physics</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Combined Science</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Physical Education</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>English</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>French</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Hindi</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Economics</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>ICT</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Math</td></tr></Table>";
                        ExptToXL_AssessPointChart(ComparitiveFA.FirstOrDefault().Value, title, (items => new
                        {
                            SNo = items.Id.ToString(),
                            Student_Id = items.IdNo,
                            items.Name,
                            items.BioJan,
                            items.BioFeb,
                            items.BioMar,
                            items.BioApr,
                            items.BioMay,
                            items.BioJun,
                            items.BioJly,
                            items.BioAug,
                            items.BioSep,
                            items.BioOct,
                            items.BioNov,
                            items.BioDec,
                            items.ChemJan,
                            items.ChemFeb,
                            items.ChemMar,
                            items.ChemApr,
                            items.ChemMay,
                            items.ChemJun,
                            items.ChemJly,
                            items.ChemAug,
                            items.ChemSep,
                            items.ChemOct,
                            items.ChemNov,
                            items.ChemDec,
                            items.PhyJan,
                            items.PhyFeb,
                            items.PhyMar,
                            items.PhyApr,
                            items.PhyMay,
                            items.PhyJun,
                            items.PhyJly,
                            items.PhyAug,
                            items.PhySep,
                            items.PhyOct,
                            items.PhyNov,
                            items.PhyDec,
                            items.ComSciJan,
                            items.ComSciFeb,
                            items.ComSciMar,
                            items.ComSciApr,
                            items.ComSciMay,
                            items.ComSciJun,
                            items.ComSciJly,
                            items.ComSciAug,
                            items.ComSciSep,
                            items.ComSciOct,
                            items.ComSciNov,
                            items.ComSciDec,
                            items.PhyEduJan,
                            items.PhyEduFeb,
                            items.PhyEduMar,
                            items.PhyEduApr,
                            items.PhyEduMay,
                            items.PhyEduJun,
                            items.PhyEduJly,
                            items.PhyEduAug,
                            items.PhyEduSep,
                            items.PhyEduOct,
                            items.PhyEduNov,
                            items.PhyEduDec,
                            items.EngJan,
                            items.EngFeb,
                            items.EngMar,
                            items.EngApr,
                            items.EngMay,
                            items.EngJun,
                            items.EngJly,
                            items.EngAug,
                            items.EngSep,
                            items.EngOct,
                            items.EngNov,
                            items.EngDec,
                            items.FreJan,
                            items.FreFeb,
                            items.FreMar,
                            items.FreApr,
                            items.FreMay,
                            items.FreJun,
                            items.FreJly,
                            items.FreAug,
                            items.FreSep,
                            items.FreOct,
                            items.FreNov,
                            items.FreDec,
                            items.HinJan,
                            items.HinFeb,
                            items.HinMar,
                            items.HinApr,
                            items.HinMay,
                            items.HinJun,
                            items.HinJly,
                            items.HinAug,
                            items.HinSep,
                            items.HinOct,
                            items.HinNov,
                            items.HinDec,
                            items.EcoJan,
                            items.EcoFeb,
                            items.EcoMar,
                            items.EcoApr,
                            items.EcoMay,
                            items.EcoJun,
                            items.EcoJly,
                            items.EcoAug,
                            items.EcoSep,
                            items.EcoOct,
                            items.EcoNov,
                            items.EcoDec,
                            items.IctJan,
                            items.IctFeb,
                            items.IctMar,
                            items.IctApr,
                            items.IctMay,
                            items.IctJun,
                            items.IctJly,
                            items.IctAug,
                            items.IctSep,
                            items.IctOct,
                            items.IctNov,
                            items.IctDec,
                            items.MatJan,
                            items.MatFeb,
                            items.MatMar,
                            items.MatApr,
                            items.MatMay,
                            items.MatJun,
                            items.MatJly,
                            items.MatAug,
                            items.MatSep,
                            items.MatOct,
                            items.MatNov,
                            items.MatDec,
                        }), headerTable);
                        return new EmptyResult();
                    }
                    else
                    {

                        string headerTable = @"<Table><tr><td colspan='111' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                        @"<Table><tr><td colspan='111' align='center' style='font-size: large;'><b>Formative Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                       "<tr><td colspan='111' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr></b></Table>";
                        headerTable = headerTable + "<Table border='1' bgcolor='#206FAE'><tr><td colspan='3'></td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Biology</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Chemistry</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Physics</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>English</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>French</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Hindi</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>History & Geography</td><td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>ICT</td>";
                        headerTable = headerTable + "<td colspan='12' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Math</td></tr></Table>";

                        ExptToXL_AssessPointChart(ComparitiveFA.FirstOrDefault().Value, title, (items => new
                        {
                            SNo = items.Id.ToString(),
                            Student_Id = items.IdNo,
                            items.Name,
                            items.BioJan,
                            items.BioFeb,
                            items.BioMar,
                            items.BioApr,
                            items.BioMay,
                            items.BioJun,
                            items.BioJly,
                            items.BioAug,
                            items.BioSep,
                            items.BioOct,
                            items.BioNov,
                            items.BioDec,
                            items.ChemJan,
                            items.ChemFeb,
                            items.ChemMar,
                            items.ChemApr,
                            items.ChemMay,
                            items.ChemJun,
                            items.ChemJly,
                            items.ChemAug,
                            items.ChemSep,
                            items.ChemOct,
                            items.ChemNov,
                            items.ChemDec,
                            items.PhyJan,
                            items.PhyFeb,
                            items.PhyMar,
                            items.PhyApr,
                            items.PhyMay,
                            items.PhyJun,
                            items.PhyJly,
                            items.PhyAug,
                            items.PhySep,
                            items.PhyOct,
                            items.PhyNov,
                            items.PhyDec,
                            items.EngJan,
                            items.EngFeb,
                            items.EngMar,
                            items.EngApr,
                            items.EngMay,
                            items.EngJun,
                            items.EngJly,
                            items.EngAug,
                            items.EngSep,
                            items.EngOct,
                            items.EngNov,
                            items.EngDec,
                            items.FreJan,
                            items.FreFeb,
                            items.FreMar,
                            items.FreApr,
                            items.FreMay,
                            items.FreJun,
                            items.FreJly,
                            items.FreAug,
                            items.FreSep,
                            items.FreOct,
                            items.FreNov,
                            items.FreDec,
                            items.HinJan,
                            items.HinFeb,
                            items.HinMar,
                            items.HinApr,
                            items.HinMay,
                            items.HinJun,
                            items.HinJly,
                            items.HinAug,
                            items.HinSep,
                            items.HinOct,
                            items.HinNov,
                            items.HinDec,
                            items.HisGeoJan,
                            items.HisGeoFeb,
                            items.HisGeoMar,
                            items.HisGeoApr,
                            items.HisGeoMay,
                            items.HisGeoJun,
                            items.HisGeoJly,
                            items.HisGeoAug,
                            items.HisGeoSep,
                            items.HisGeoOct,
                            items.HisGeoNov,
                            items.HisGeoDec,
                            items.IctJan,
                            items.IctFeb,
                            items.IctMar,
                            items.IctApr,
                            items.IctMay,
                            items.IctJun,
                            items.IctJly,
                            items.IctAug,
                            items.IctSep,
                            items.IctOct,
                            items.IctNov,
                            items.IctDec,
                            items.MatJan,
                            items.MatFeb,
                            items.MatMar,
                            items.MatApr,
                            items.MatMay,
                            items.MatJun,
                            items.MatJly,
                            items.MatAug,
                            items.MatSep,
                            items.MatOct,
                            items.MatNov,
                            items.MatDec,
                        }), headerTable);
                        return new EmptyResult();


                    }
                }
                else { return null; }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult ComparitiveFAHWReport(string Campus, string Grade, string Section)
        {
            try
            {
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                criteria.Add("Campus", Campus);
                criteria.Add("Grade", Grade);
                criteria.Add("Section", Section);
                DateTime DateNow = DateTime.Now;
                if (Grade == "IX" || Grade == "X")
                {
                    criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                }
                else
                {
                    if (DateNow.Month > 5)
                        criteria.Add("AcademicYear", DateNow.Year.ToString() + "-" + (DateNow.Year + 1).ToString());
                    else
                        criteria.Add("AcademicYear", (DateNow.Year - 1).ToString() + "-" + DateNow.Year.ToString());
                }
                Dictionary<long, IList<ComparativeFAHWReport_Vw>> ComparitiveFAHW = a360Obj.GetComparativeFAHWReportResultList(0, 99999, string.Empty, string.Empty, criteria);
                if (ComparitiveFAHW != null && ComparitiveFAHW.Count > 0 && ComparitiveFAHW.FirstOrDefault().Key > 0 && ComparitiveFAHW.FirstOrDefault().Value != null)
                {
                    int i = 0;
                    foreach (ComparativeFAHWReport_Vw FAReport in ComparitiveFAHW.FirstOrDefault().Value)
                    {
                        FAReport.Id = i + 1;
                        i++;
                    }
                    string title = "ComparitiveFAHW" + DateTime.Now.ToString("0:dd/MM/yy") + "";
                    string logopath = ConfigurationManager.AppSettings["AppLogos"].ToString() + "tips.gif";
                    if (Grade == "IX" || Grade == "X")
                    {
                        string headerTable = @"<Table><tr><td colspan='135' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                         @"<Table><tr><td colspan='245' align='center' style='font-size: large;'><b>Comparitive FA&HW Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                        "<tr><td colspan='135' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr></b></Table>";
                        headerTable = headerTable + "<Table border='1' bgcolor='#206FAE'><tr><td colspan='3'></td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Biology</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Chemistry</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Physics</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Combined Science</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Physical Education</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>English</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>French</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Hindi</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Economics</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>ICT</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Math</td>";
                        headerTable = headerTable + "</tr>tr><td colspan='3'></td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td></tr></Table>";

                        ExptToXL_AssessPointChart(ComparitiveFAHW.FirstOrDefault().Value, title, (items => new
                        {
                            SNo = items.Id.ToString(),
                            Student_Id = items.IdNo,
                            items.Name,
                            items.FABioJan,
                            items.HWBioJan,
                            items.FABioFeb,
                            items.HWBioFeb,
                            items.FABioMar,
                            items.HWBioMar,
                            items.FABioApr,
                            items.HWBioApr,
                            items.FABioJun,
                            items.HWBioJun,
                            items.FABioJly,
                            items.HWBioJly,
                            items.FABioAug,
                            items.HWBioAug,
                            items.FABioSep,
                            items.HWBioSep,
                            items.FABioOct,
                            items.HWBioOct,
                            items.FABioNov,
                            items.HWBioNov,
                            items.FABioDec,
                            items.HWBioDec,
                            items.FAChemJan,
                            items.HWChemJan,
                            items.FAChemFeb,
                            items.HWChemFeb,
                            items.FAChemMar,
                            items.HWChemMar,
                            items.FAChemApr,
                            items.HWChemApr,
                            items.FAChemJun,
                            items.HWChemJun,
                            items.FAChemJly,
                            items.HWChemJly,
                            items.FAChemAug,
                            items.HWChemAug,
                            items.FAChemSep,
                            items.HWChemSep,
                            items.FAChemOct,
                            items.HWChemOct,
                            items.FAChemNov,
                            items.HWChemNov,
                            items.FAChemDec,
                            items.HWChemDec,
                            items.FAPhyJan,
                            items.HWPhyJan,
                            items.FAPhyFeb,
                            items.HWPhyFeb,
                            items.FAPhyMar,
                            items.HWPhyMar,
                            items.FAPhyApr,
                            items.HWPhyApr,
                            items.FAPhyJun,
                            items.HWPhyJun,
                            items.FAPhyJly,
                            items.HWPhyJly,
                            items.FAPhyAug,
                            items.HWPhyAug,
                            items.FAPhySep,
                            items.HWPhySep,
                            items.FAPhyOct,
                            items.HWPhyOct,
                            items.FAPhyNov,
                            items.HWPhyNov,
                            items.FAPhyDec,
                            items.HWPhyDec,
                            items.FAComSciJan,
                            items.HWComSciJan,
                            items.FAComSciFeb,
                            items.HWComSciFeb,
                            items.FAComSciMar,
                            items.HWComSciMar,
                            items.FAComSciApr,
                            items.HWComSciApr,
                            items.FAComSciJun,
                            items.HWComSciJun,
                            items.FAComSciJly,
                            items.HWComSciJly,
                            items.FAComSciAug,
                            items.HWComSciAug,
                            items.FAComSciSep,
                            items.HWComSciSep,
                            items.FAComSciOct,
                            items.HWComSciOct,
                            items.FAComSciNov,
                            items.HWComSciNov,
                            items.FAComSciDec,
                            items.HWComSciDec,
                            items.FAPhyEduJan,
                            items.HWPhyEduJan,
                            items.FAPhyEduFeb,
                            items.HWPhyEduFeb,
                            items.FAPhyEduMar,
                            items.HWPhyEduMar,
                            items.FAPhyEduApr,
                            items.HWPhyEduApr,
                            items.FAPhyEduJun,
                            items.HWPhyEduJun,
                            items.FAPhyEduJly,
                            items.HWPhyEduJly,
                            items.FAPhyEduAug,
                            items.HWPhyEduAug,
                            items.FAPhyEduSep,
                            items.HWPhyEduSep,
                            items.FAPhyEduOct,
                            items.HWPhyEduOct,
                            items.FAPhyEduNov,
                            items.HWPhyEduNov,
                            items.FAPhyEduDec,
                            items.HWPhyEduDec,
                            items.FAEngJan,
                            items.HWEngJan,
                            items.FAEngFeb,
                            items.HWEngFeb,
                            items.FAEngMar,
                            items.HWEngMar,
                            items.FAEngApr,
                            items.HWEngApr,
                            items.FAEngJun,
                            items.HWEngJun,
                            items.FAEngJly,
                            items.HWEngJly,
                            items.FAEngAug,
                            items.HWEngAug,
                            items.FAEngSep,
                            items.HWEngSep,
                            items.FAEngOct,
                            items.HWEngOct,
                            items.FAEngNov,
                            items.HWEngNov,
                            items.FAEngDec,
                            items.HWEngDec,
                            items.FAFreJan,
                            items.HWFreJan,
                            items.FAFreFeb,
                            items.HWFreFeb,
                            items.FAFreMar,
                            items.HWFreMar,
                            items.FAFreApr,
                            items.HWFreApr,
                            items.FAFreJun,
                            items.HWFreJun,
                            items.FAFreJly,
                            items.HWFreJly,
                            items.FAFreAug,
                            items.HWFreAug,
                            items.FAFreSep,
                            items.HWFreSep,
                            items.FAFreOct,
                            items.HWFreOct,
                            items.FAFreNov,
                            items.HWFreNov,
                            items.FAFreDec,
                            items.HWFreDec,
                            items.FAHinJan,
                            items.HWHinJan,
                            items.FAHinFeb,
                            items.HWHinFeb,
                            items.FAHinMar,
                            items.HWHinMar,
                            items.FAHinApr,
                            items.HWHinApr,
                            items.FAHinJun,
                            items.HWHinJun,
                            items.FAHinJly,
                            items.HWHinJly,
                            items.FAHinAug,
                            items.HWHinAug,
                            items.FAHinSep,
                            items.HWHinSep,
                            items.FAHinOct,
                            items.HWHinOct,
                            items.FAHinNov,
                            items.HWHinNov,
                            items.FAHinDec,
                            items.HWHinDec,
                            items.FAEcoJan,
                            items.HWEcoJan,
                            items.FAEcoFeb,
                            items.HWEcoFeb,
                            items.FAEcoMar,
                            items.HWEcoMar,
                            items.FAEcoApr,
                            items.HWEcoApr,
                            items.FAEcoJun,
                            items.HWEcoJun,
                            items.FAEcoJly,
                            items.HWEcoJly,
                            items.FAEcoAug,
                            items.HWEcoAug,
                            items.FAEcoSep,
                            items.HWEcoSep,
                            items.FAEcoOct,
                            items.HWEcoOct,
                            items.FAEcoNov,
                            items.HWEcoNov,
                            items.FAEcoDec,
                            items.HWEcoDec,
                            items.FAIctJan,
                            items.HWIctJan,
                            items.FAIctFeb,
                            items.HWIctFeb,
                            items.FAIctMar,
                            items.HWIctMar,
                            items.FAIctApr,
                            items.HWIctApr,
                            items.FAIctJun,
                            items.HWIctJun,
                            items.FAIctJly,
                            items.HWIctJly,
                            items.FAIctAug,
                            items.HWIctAug,
                            items.FAIctSep,
                            items.HWIctSep,
                            items.FAIctOct,
                            items.HWIctOct,
                            items.FAIctNov,
                            items.HWIctNov,
                            items.FAIctDec,
                            items.HWIctDec,
                            items.FAMatJan,
                            items.HWMatJan,
                            items.FAMatFeb,
                            items.HWMatFeb,
                            items.FAMatMar,
                            items.HWMatMar,
                            items.FAMatApr,
                            items.HWMatApr,
                            items.FAMatJun,
                            items.HWMatJun,
                            items.FAMatJly,
                            items.HWMatJly,
                            items.FAMatAug,
                            items.HWMatAug,
                            items.FAMatSep,
                            items.HWMatSep,
                            items.FAMatOct,
                            items.HWMatOct,
                            items.FAMatNov,
                            items.HWMatNov,
                            items.FAMatDec,
                            items.HWMatDec,
                        }), headerTable);
                        return new EmptyResult();
                    }
                    else
                    {

                        string headerTable = @"<Table><tr><td colspan='201' align='center' style='font-size: large;<img src=" + logopath + ">'><b> The Indian Public School,Coimbatore</b></td></tr><br>" +
                        @"<Table><tr><td colspan='111' align='center' style='font-size: large;'><b>Formative Assessment Subject wise Mark Analysis</b></td></tr><br>" +
                       "<tr><td colspan='111' align='center' style='font-size: medium;'><b>Campus</b> : " + Campus + " " + " &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp <b>Grade : </b> " + Grade + "</td></tr></b></Table>";
                        headerTable = headerTable + "<Table border='1' bgcolor='#206FAE'><tr><td colspan='3'></td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Biology</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Chemistry</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Physics</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>English</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>French</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Hindi</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>History & Geography</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>ICT</td>";
                        headerTable = headerTable + "<td colspan='22' style='color: #fff; font-weight: bold; border-bottom:1px medium black;border-right:1px medium black;border-top:1px medium black'>Math</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td>";
                        headerTable = headerTable + "<td colspan='2'>JAN</td><td colspan='2'>FEB</td><td colspan='2'>MAR</td><td colspan='2'>APR</td><td colspan='2'>JUN</td><td colspan='2'>JUL</td><td colspan='2'>AUG</td><td colspan='2'>SEP</td><td colspan='2'>OCT</td><td colspan='2'>NOV</td><td colspan='2'>DEC</td></tr></Table>";

                        ExptToXL_AssessPointChart(ComparitiveFAHW.FirstOrDefault().Value, title, (items => new
                        {
                            SNo = items.Id.ToString(),
                            Student_Id = items.IdNo,
                            items.Name,
                            items.FABioJan,
                            items.HWBioJan,
                            items.FABioFeb,
                            items.HWBioFeb,
                            items.FABioMar,
                            items.HWBioMar,
                            items.FABioApr,
                            items.HWBioApr,
                            items.FABioJun,
                            items.HWBioJun,
                            items.FABioJly,
                            items.HWBioJly,
                            items.FABioAug,
                            items.HWBioAug,
                            items.FABioSep,
                            items.HWBioSep,
                            items.FABioOct,
                            items.HWBioOct,
                            items.FABioNov,
                            items.HWBioNov,
                            items.FABioDec,
                            items.HWBioDec,
                            items.FAChemJan,
                            items.HWChemJan,
                            items.FAChemFeb,
                            items.HWChemFeb,
                            items.FAChemMar,
                            items.HWChemMar,
                            items.FAChemApr,
                            items.HWChemApr,
                            items.FAChemJun,
                            items.HWChemJun,
                            items.FAChemJly,
                            items.HWChemJly,
                            items.FAChemAug,
                            items.HWChemAug,
                            items.FAChemSep,
                            items.HWChemSep,
                            items.FAChemOct,
                            items.HWChemOct,
                            items.FAChemNov,
                            items.HWChemNov,
                            items.FAChemDec,
                            items.HWChemDec,
                            items.FAPhyJan,
                            items.HWPhyJan,
                            items.FAPhyFeb,
                            items.HWPhyFeb,
                            items.FAPhyMar,
                            items.HWPhyMar,
                            items.FAPhyApr,
                            items.HWPhyApr,
                            items.FAPhyJun,
                            items.HWPhyJun,
                            items.FAPhyJly,
                            items.HWPhyJly,
                            items.FAPhyAug,
                            items.HWPhyAug,
                            items.FAPhySep,
                            items.HWPhySep,
                            items.FAPhyOct,
                            items.HWPhyOct,
                            items.FAPhyNov,
                            items.HWPhyNov,
                            items.FAPhyDec,
                            items.HWPhyDec,
                            items.FAEngJan,
                            items.HWEngJan,
                            items.FAEngFeb,
                            items.HWEngFeb,
                            items.FAEngMar,
                            items.HWEngMar,
                            items.FAEngApr,
                            items.HWEngApr,
                            items.FAEngJun,
                            items.HWEngJun,
                            items.FAEngJly,
                            items.HWEngJly,
                            items.FAEngAug,
                            items.HWEngAug,
                            items.FAEngSep,
                            items.HWEngSep,
                            items.FAEngOct,
                            items.HWEngOct,
                            items.FAEngNov,
                            items.HWEngNov,
                            items.FAEngDec,
                            items.HWEngDec,
                            items.FAFreJan,
                            items.HWFreJan,
                            items.FAFreFeb,
                            items.HWFreFeb,
                            items.FAFreMar,
                            items.HWFreMar,
                            items.FAFreApr,
                            items.HWFreApr,
                            items.FAFreJun,
                            items.HWFreJun,
                            items.FAFreJly,
                            items.HWFreJly,
                            items.FAFreAug,
                            items.HWFreAug,
                            items.FAFreSep,
                            items.HWFreSep,
                            items.FAFreOct,
                            items.HWFreOct,
                            items.FAFreNov,
                            items.HWFreNov,
                            items.FAFreDec,
                            items.HWFreDec,
                            items.FAHinJan,
                            items.HWHinJan,
                            items.FAHinFeb,
                            items.HWHinFeb,
                            items.FAHinMar,
                            items.HWHinMar,
                            items.FAHinApr,
                            items.HWHinApr,
                            items.FAHinJun,
                            items.HWHinJun,
                            items.FAHinJly,
                            items.HWHinJly,
                            items.FAHinAug,
                            items.HWHinAug,
                            items.FAHinSep,
                            items.HWHinSep,
                            items.FAHinOct,
                            items.HWHinOct,
                            items.FAHinNov,
                            items.HWHinNov,
                            items.FAHinDec,
                            items.HWHinDec,
                            items.FAHisGeoJan,
                            items.HWHisGeoJan,
                            items.FAHisGeoFeb,
                            items.HWHisGeoFeb,
                            items.FAHisGeoMar,
                            items.HWHisGeoMar,
                            items.FAHisGeoApr,
                            items.HWHisGeoApr,
                            items.FAHisGeoJun,
                            items.HWHisGeoJun,
                            items.FAHisGeoJly,
                            items.HWHisGeoJly,
                            items.FAHisGeoAug,
                            items.HWHisGeoAug,
                            items.FAHisGeoSep,
                            items.HWHisGeoSep,
                            items.FAHisGeoOct,
                            items.HWHisGeoOct,
                            items.FAHisGeoNov,
                            items.HWHisGeoNov,
                            items.FAHisGeoDec,
                            items.HWHisGeoDec,
                            items.FAIctJan,
                            items.HWIctJan,
                            items.FAIctFeb,
                            items.HWIctFeb,
                            items.FAIctMar,
                            items.HWIctMar,
                            items.FAIctApr,
                            items.HWIctApr,
                            items.FAIctJun,
                            items.HWIctJun,
                            items.FAIctJly,
                            items.HWIctJly,
                            items.FAIctAug,
                            items.HWIctAug,
                            items.FAIctSep,
                            items.HWIctSep,
                            items.FAIctOct,
                            items.HWIctOct,
                            items.FAIctNov,
                            items.HWIctNov,
                            items.FAIctDec,
                            items.HWIctDec,
                            items.FAMatJan,
                            items.HWMatJan,
                            items.FAMatFeb,
                            items.HWMatFeb,
                            items.FAMatMar,
                            items.HWMatMar,
                            items.FAMatApr,
                            items.HWMatApr,
                            items.FAMatJun,
                            items.HWMatJun,
                            items.FAMatJly,
                            items.HWMatJly,
                            items.FAMatAug,
                            items.HWMatAug,
                            items.FAMatSep,
                            items.HWMatSep,
                            items.FAMatOct,
                            items.HWMatOct,
                            items.FAMatNov,
                            items.HWMatNov,
                            items.FAMatDec,
                            items.HWMatDec,
                        }), headerTable);
                        return new EmptyResult();


                    }
                }
                else { return null; }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Assess360Policy");
                throw ex;
            }
        }

        public ActionResult GetConsolidatedMarksForAStudentByStudentId(long StuId)
        {
            try
            {
                Assess360Service assSrv = new Assess360Service();
                Assess360 Ass360 = assSrv.GetAssess360ByStudentId(StuId);
                string StudentMarks = assSrv.GetComponentWiseConsolidatedMarksForAStudent(Ass360.Id);
                return Json(StudentMarks, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            { return ThrowJSONErrorNew(ex, "Assess360Policy"); }
        }
        #region "New changes on CBSE ReportCard"
        public ActionResult ReportCardRequestNew()
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null)
            {
                return RedirectToAction("LogOff", "Account");
            }
            else
            {
                MastersService ms = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                var usrcmp = Session["UserCampus"] as IEnumerable<string>;
                if (usrcmp != null && usrcmp.Count() != 0)
                {
                    if (usrcmp.First() != null)            // to check if the usrcmp obj is null or with data
                    {
                        criteria.Add("Name", usrcmp);
                    }
                }
                Dictionary<long, IList<CampusMaster>> CampusMaster = ms.GetCampusMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                criteria.Clear();
                Dictionary<long, IList<GradeMaster>> GradeMaster = ms.GetGradeMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                Dictionary<long, IList<SectionMaster>> SectionMaster = ms.GetSectionMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                Dictionary<long, IList<AcademicyrMaster>> AcademicyrMaster = ms.GetAcademicyrMasterListWithPagingAndCriteria(0, 50, string.Empty, string.Empty, criteria);
                ViewBag.campusddl = CampusMaster.First().Value;
                ViewBag.gradeddl = GradeMaster.First().Value;
                ViewBag.sectionddl = SectionMaster.First().Value;
                ViewBag.acadyrddl = AcademicyrMaster.First().Value;
                ViewBag.CurYear = DateTime.Now.Year.ToString() + '-' + Convert.ToString(DateTime.Now.Year + 1);
                string ActionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string ControllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ViewBag.BreadCrumb = GetBreadCrumbDetails(ControllerName, ActionName);
                return View();
            }
        }

        public ActionResult ReportCardRequestJqGridNew(string Campus, string Grade, string Section, string group, string AcYear, int rows, string sidx, string sord, int? page = 1)
        {
            try
            {
                ReportCardService rptSvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus)) criteria.Add("Campus", Campus);
                if (!string.IsNullOrEmpty(Grade)) criteria.Add("Grade", Grade);
                if (!string.IsNullOrEmpty(Section)) criteria.Add("Section", Section);
                if (!string.IsNullOrEmpty(AcYear)) criteria.Add("AcademicYear", AcYear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<ReportCardRequest>> RptCrdRequest = rptSvc.GetReportCardRequestListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                if (RptCrdRequest.Values != null && RptCrdRequest.First().Value.Count > 0)
                {
                    long totalrecords = RptCrdRequest.First().Key;
                    int totalPages = (int)Math.Ceiling(totalrecords / (float)rows);
                    var jsondat = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalrecords,
                        rows = (from items in RptCrdRequest.First().Value
                                select new
                                {
                                    i = 2,
                                    cell = new string[] {
                               items.Id.ToString(),
                                "<a href='#' style='text-decoration: none; border-bottom: 1px solid blue;' onclick=\"ShowReportRequest('"+ items.Id +"');\" '>"+items.RequestNo+"</a>",
                               //items.RequestNo,
                               items.Campus,
                               items.Grade,
                               items.Section,
                               items.GroupName,
                               items.AcademicYear,
                               items.CreatedBy,
                               items.CreatedDate.ToString("dd/MM/yyyy"),
                               items.ModifiedBy,
                               items.ModifiedDate.ToString()
                            }
                                })
                    };
                    return Json(jsondat, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw ex;
            }
        }

        public ActionResult CreateReportCardRequestNew(string Campus, string Grade, string Section, string AcYear, string group)
        {
            try
            {
                ReportCardService rptSvc = new ReportCardService();
                MastersService msSvc = new MastersService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(Campus)) criteria.Add("Campus", Campus);
                if (!string.IsNullOrEmpty(Grade)) criteria.Add("Grade", Grade);
                if (!string.IsNullOrEmpty(Section)) criteria.Add("Section", Section);
                if (!string.IsNullOrEmpty(AcYear)) criteria.Add("AcademicYear", AcYear);
                if (!string.IsNullOrEmpty(group)) criteria.Add("GroupName", group);
                Dictionary<long, IList<ReportCardRequest>> chkRptCrdRequest = rptSvc.GetReportCardRequestListWithPagingAndCriteria(0, 10, string.Empty, string.Empty, criteria);
                if (chkRptCrdRequest.Values != null && chkRptCrdRequest.First().Value.Count > 0)
                {
                    var script = string.Format("Request already added!</br> Please Refer Request #{0}", chkRptCrdRequest.FirstOrDefault().Value[0].RequestNo);
                    return Json(script, JsonRequestBehavior.AllowGet);
                    // var script = string.Format("Request already added!</br> Please Refer Request #{0}",chkRptCrdRequest.FirstOrDefault().Value[0].RequestNo);
                    // return JavaScript(@"ErrMsg(" + script + ");");
                }
                else
                {
                    TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
                    ReportCardRequest req = new ReportCardRequest();
                    req.Campus = Campus;
                    req.Grade = Grade;
                    req.Section = Section;
                    req.AcademicYear = AcYear;
                    req.GroupName = group;
                    CampusMaster cm = msSvc.GetCampusByCampus(Campus);
                    //string campus = Regex.Replace(Campus, @"\s+", "");
                    req.RequestNo = "Req-" + cm.Code + "-" + Grade + "-" + Section;
                    req.CreatedBy = Userobj.UserId;
                    req.CreatedDate = DateTime.Now;
                    req.ModifiedBy = Userobj.UserId;
                    req.ModifiedDate = DateTime.Now;
                    rptSvc.CreateOrUpdateReportCardRequest(req);
                    return Json("Success", JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw ex;
            }
        }
        public ActionResult ReportCardCBSENew(long RptRequestId, string Subject, string Language)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) { return RedirectToAction("LogOff", "Account"); }
            else
            {
                try
                {
                    ReportCardService rptSvc = new ReportCardService();
                    ReportCardRequest RptCardReq = rptSvc.GetRepoetCardRequestById(RptRequestId);
                    Dictionary<string, object> Criteria = new Dictionary<string, object>();
                    Criteria.Add("AcademicYear", RptCardReq.AcademicYear);
                    Criteria.Add("Grade", RptCardReq.Grade);
                    Criteria.Add("Campus", RptCardReq.Campus);
                    Dictionary<long, IList<CoScholasticMaster>> CoSholasticMaster = rptSvc.GetCoScholictMasterListWithPagingAndCriteria(0, 99999, string.Empty, "CoScholasticCode", Criteria);
                    ViewBag.CoScholastic = CoSholasticMaster.FirstOrDefault().Value;
                    //ReportCardCBSE rptCard = new ReportCardCBSE();
                    if (!string.IsNullOrEmpty(Subject))
                    {
                        if (Subject == "Language")
                            RptCardReq.Language = Language;
                        else
                            RptCardReq.Language = "";
                        RptCardReq.Subject = Subject;
                        ViewBag.TabFreez = "No";
                    }
                    else
                        ViewBag.TabFreez = "Yes";
                    var rle = Session["userrolesarray"] as IEnumerable<string>;
                    if (rle.Contains("RCAPP"))
                    { ViewBag.AppEdit = "Yes"; }
                    else { ViewBag.AppEdit = "No"; }
                    return View(RptCardReq);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }


        public ActionResult JqGridFormativeAssessment1New(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsViewNew>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewNewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSENew>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSENewListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSENew> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsViewNew sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.PA1 = GetList[0].PA1 == null ? "" : GetList[0].Absent.Contains("PA1") ? "ABS" : GetList[0].PA1.ToString();
                        sv.NoteBook1 = GetList[0].NoteBook1 == null ? "" : GetList[0].Absent.Contains("NoteBook1") ? "ABS" : GetList[0].NoteBook1.ToString();
                        sv.SEA1 = GetList[0].SEA1 == null ? "" : GetList[0].Absent.Contains("SEA1") ? "ABS" : GetList[0].SEA1.ToString();
                        sv.HalfYearly = GetList[0].HalfYearly == null ? "" : GetList[0].Absent.Contains("HalfYearly") ? "ABS" : GetList[0].HalfYearly.ToString();
                        sv.Term1Total = GetList[0].Term1Total == null ? "" : GetList[0].Term1Total.ToString();
                        sv.Term1Grade = GetList[0].Term1Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.PA1 != "" ? sv.NoteBook1 != "" ? sv.SEA1 != "" ? sv.HalfYearly != "" ? 1 : 0 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;
                    }
                    else
                    {
                        sv.EditRowId = 0; sv.RptId = 0; sv.Term1Grade = string.Empty; sv.TermAbsents = string.Empty; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-I", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.PA1,
                        items.NoteBook1,
                        items.SEA1,
                        items.HalfYearly,
                        items.Term1Total,
                        items.Term1Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[]
                       {
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.PA1,
                            items.NoteBook1,
                            items.SEA1,
                            items.HalfYearly,
                            items.Term1Total,
                            items.Term1Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridFormativeAssessment2New(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1, int? ExptXl = 0)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                ReportCardService rptCrdSrvc = new ReportCardService();
                Dictionary<string, object> criteria = new Dictionary<string, object>();
                if (!string.IsNullOrWhiteSpace(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrWhiteSpace(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrWhiteSpace(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrWhiteSpace(academicyear)) criteria.Add("AcademicYear", academicyear);
                sord = sord == "desc" ? "Desc" : "Asc";
                Dictionary<long, IList<RptStudentDtlsViewNew>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewNewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                criteria.Clear();
                if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                Dictionary<long, IList<ReportCardCBSENew>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSENewListWithCriteria(page - 1, rows, sord, sidx, criteria);
                List<ReportCardCBSENew> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                 where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                 orderby p.PreRegNum ascending
                                                 select p.PreRegNum;
                long[] PreRegNumber = blkPreRegNum.ToArray();
                foreach (RptStudentDtlsViewNew sv in rptStdntDtls.FirstOrDefault().Value)
                {
                    if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                    {
                        var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                       where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                       select u).ToList();
                        sv.RptId = GetList[0].Id;
                        sv.RptRequestId = GetList[0].RptRequestId;
                        sv.PreRegNum = GetList[0].PreRegNum;
                        sv.Name = GetList[0].Name;
                        sv.Campus = GetList[0].Campus;
                        sv.Grade = GetList[0].Grade;
                        sv.Subject = GetList[0].Subject;
                        sv.AcademicYear = GetList[0].AcademicYear;
                        sv.Section = GetList[0].Section;
                        sv.PA2 = GetList[0].PA2 == null ? "" : GetList[0].Absent.Contains("PA2") ? "ABS" : GetList[0].PA2.ToString();
                        sv.NoteBook2 = GetList[0].NoteBook2 == null ? "" : GetList[0].Absent.Contains("NoteBook2") ? "ABS" : GetList[0].NoteBook2.ToString();
                        sv.SEA2 = GetList[0].SEA2 == null ? "" : GetList[0].Absent.Contains("SEA2") ? "ABS" : GetList[0].SEA2.ToString();
                        sv.AnnualExam = GetList[0].AnnualExam == null ? "" : GetList[0].Absent.Contains("AnnualExam") ? "ABS" : GetList[0].AnnualExam.ToString();
                        sv.Term2Total = GetList[0].Term2Total == null ? "" : GetList[0].Absent.Contains("Term2Total") ? "ABS" : GetList[0].Term2Total.ToString();
                        sv.Term2Grade = GetList[0].Term2Grade;
                        sv.TermAbsents = GetList[0].Absent;
                        sv.EditRowId = sv.PA2 != "" ? sv.NoteBook2 != "" ? sv.SEA2 != "" ? sv.AnnualExam != "" ? 1 : 0 : 0 : 0 : 0;
                        sv.CreatedBy = GetList[0].CreatedBy;
                        sv.CreatedDate = GetList[0].CreatedDate;
                        sv.ModifiedBy = GetList[0].ModifiedBy;
                        sv.ModifiedDate = GetList[0].ModifiedDate;

                    }
                    else
                    {
                        sv.EditRowId = 0; sv.RptId = 0; sv.Term2Grade = string.Empty; sv.TermAbsents = string.Empty; sv.CreatedBy = string.Empty; sv.CreatedDate = DateTime.Now; sv.ModifiedBy = string.Empty; sv.ModifiedDate = DateTime.Now;
                        sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;

                    }
                }
                if (ExptXl == 1)
                {
                    var List = rptStdntDtls.First().Value.ToList();
                    base.ExptToXL(List, "TERM-I-FA2", (items => new
                    {
                        items.Id,
                        items.RptId,
                        items.RptRequestId,
                        items.PreRegNum,
                        items.Name,
                        items.Campus,
                        items.Grade,
                        items.Section,
                        items.Subject,
                        items.AcademicYear,
                        items.PA2,
                        items.NoteBook2,
                        items.SEA2,
                        items.AnnualExam,
                        items.Term2Total,
                        items.Term2Grade,
                    }));
                    return new EmptyResult();
                }
                else
                {
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[]
                       {
                            items.Id.ToString(),
                            items.RptId.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.PA2,
                            items.NoteBook2,
                            items.SEA2,
                            items.AnnualExam,
                            items.Term2Total,
                            items.Term2Grade,
                            items.EditRowId.ToString(),
                            items.CreatedBy,
                            items.CreatedDate.ToString(),
                            items.ModifiedBy,
                            items.ModifiedDate.ToString(),
                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public ActionResult JqGridOverAllAssessmentNew(long RptRequestId, string campus, string grade, string section, string academicyear, string subject, int rows, string sidx, string sord, int? page = 1)
        {
            if (string.IsNullOrEmpty(campus) && string.IsNullOrEmpty(grade) && string.IsNullOrEmpty(section) && string.IsNullOrEmpty(subject))
            {
                return Json(null, JsonRequestBehavior.AllowGet);
            }
            else
            {
                try
                {
                    ReportCardService rptCrdSrvc = new ReportCardService();
                    Dictionary<string, object> criteria = new Dictionary<string, object>();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    sord = sord == "desc" ? "Desc" : "Asc";
                    Dictionary<long, IList<RptStudentDtlsViewNew>> rptStdntDtls = rptCrdSrvc.GetStudentDtlsViewNewListWithPagingAndCriteria(page - 1, rows, sord, sidx, criteria);
                    criteria.Clear();
                    if (!string.IsNullOrEmpty(campus)) { criteria.Add("Campus", campus); }
                    if (!string.IsNullOrEmpty(grade)) { criteria.Add("Grade", grade); }
                    if (!string.IsNullOrEmpty(section)) { criteria.Add("Section", section); }
                    if (!string.IsNullOrEmpty(academicyear)) criteria.Add("AcademicYear", academicyear);
                    if (!string.IsNullOrEmpty(subject)) criteria.Add("Subject", subject);
                    Dictionary<long, IList<ReportCardCBSENew>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSENewListWithCriteria(page - 1, rows, sord, sidx, criteria);
                    List<ReportCardCBSENew> alreadyExists = RptCrdCBSEMrkList.FirstOrDefault().Value.ToList();
                    IEnumerable<long> blkPreRegNum = from p in alreadyExists
                                                     where p.Campus == campus && p.Grade == grade && p.Section == section && p.AcademicYear == academicyear
                                                     orderby p.PreRegNum ascending
                                                     select p.PreRegNum;
                    long[] PreRegNumber = blkPreRegNum.ToArray();
                    foreach (RptStudentDtlsViewNew sv in rptStdntDtls.FirstOrDefault().Value)
                    {
                        if (PreRegNumber.Contains((Convert.ToInt64(sv.PreRegNum))))
                        {
                            var GetList = (from u in RptCrdCBSEMrkList.First().Value
                                           where u.PreRegNum == Convert.ToInt64(sv.PreRegNum) && u.Subject == subject && u.AcademicYear == academicyear
                                           select u).ToList();
                            sv.Id = GetList[0].Id;
                            sv.RptRequestId = GetList[0].RptRequestId;
                            sv.PreRegNum = GetList[0].PreRegNum;
                            sv.Name = GetList[0].Name;
                            sv.Campus = GetList[0].Campus;
                            sv.Grade = GetList[0].Grade;
                            sv.Subject = GetList[0].Subject;
                            sv.AcademicYear = GetList[0].AcademicYear;
                            sv.Section = GetList[0].Section;
                            sv.PA1 = GetList[0].PA1.ToString();
                            sv.NoteBook1 = GetList[0].NoteBook1.ToString();
                            sv.SEA1 = GetList[0].SEA1.ToString();
                            sv.HalfYearly = GetList[0].HalfYearly.ToString();
                            sv.Term1Total = GetList[0].Term1Total.ToString();
                            sv.Term1Grade = GetList[0].Term1Grade;
                            sv.PA2 = GetList[0].PA2.ToString();
                            sv.NoteBook2 = GetList[0].NoteBook2.ToString();
                            sv.SEA2 = GetList[0].SEA2.ToString();
                            sv.AnnualExam = GetList[0].AnnualExam.ToString();
                            sv.Term2Total = GetList[0].Term2Total.ToString();
                            sv.Term2Grade = GetList[0].Term2Grade;
                            sv.T1T2Total = (GetList[0].Term1Total + GetList[0].Term2Total) / 2;
                            sv.T1T2Grade = GradeCalulation(Convert.ToDecimal(GetList[0].T1T2Total), "Scholastic");
                            sv.TermAbsents = GetList[0].Absent;
                        }
                        else
                        {
                            sv.TermAbsents = string.Empty;
                            sv.Subject = subject; sv.Campus = campus; sv.Grade = grade; sv.Section = section; sv.AcademicYear = academicyear; sv.RptRequestId = RptRequestId;
                        }
                    }
                    long totalRecords = rptStdntDtls.FirstOrDefault().Key;
                    int totalPages = (int)Math.Ceiling(totalRecords / (float)rows);
                    var jsonData = new
                    {
                        total = totalPages,
                        page = page,
                        records = totalRecords,
                        rows = (
                        from items in rptStdntDtls.FirstOrDefault().Value
                        select new
                        {
                            i = items.Id,
                            cell = new string[]
                       {
                            items.Id.ToString(),
                            items.RptRequestId.ToString(),
                            items.PreRegNum.ToString(),
                            items.Name,
                            items.Campus,
                            items.Grade,
                            items.Section,
                            items.Subject,
                            items.AcademicYear,
                            items.PA1,
                            items.NoteBook1,
                            items.SEA1,
                            items.HalfYearly,
                            items.Term1Total!=null?items.Term1Total.ToString():items.TermAbsents.Contains("PA1")&&items.TermAbsents.Contains("NoteBook1")&&items.TermAbsents.Contains("SEA1")&&items.TermAbsents.Contains("HalfYearly")?"ABS":"",
                            items.Term1Grade,
                            items.PA2,
                            items.NoteBook2,
                            items.SEA2,
                            items.AnnualExam,
                            items.Term2Total!=null?items.Term2Total.ToString():items.TermAbsents.Contains("PA1")&&items.TermAbsents.Contains("NoteBook1")&&items.TermAbsents.Contains("SEA1")&&items.TermAbsents.Contains("HalfYearly")?"ABS":"",
                            items.Term2Grade,
                            items.T1T2Total.ToString(),
                            items.T1T2Grade,
                            "<span class='fa fa-file-pdf-o red' id='ImgHistory' onclick=\"GeneratePDF( '" + items.PreRegNum +"','"+items.AcademicYear+"','"+items.RptRequestId+"','OverAll');\" />",

                       }
                        })
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                    throw ex;
                }
            }
        }

        public ActionResult SaveReportCardCBSEFA1New(ReportCardCBSETerm1 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");

            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSENew rptCard = rptsvc.GetReportCardCBSENewById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.PA1) && !string.IsNullOrEmpty(rptCrdObj.NoteBook1) && !string.IsNullOrEmpty(rptCrdObj.SEA1) && !string.IsNullOrEmpty(rptCrdObj.HalfYearly))
                    {
                        rptCard.PA1 = rptCrdObj.PA1 == "ABS" || rptCrdObj.PA1 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.PA1);
                        rptCard.NoteBook1 = rptCrdObj.NoteBook1 == "ABS" || rptCrdObj.NoteBook1 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.NoteBook1);
                        rptCard.SEA1 = rptCrdObj.SEA1 == "ABS" || rptCrdObj.SEA1 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SEA1);
                        rptCard.HalfYearly = rptCrdObj.HalfYearly == "ABS" || rptCrdObj.HalfYearly == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.HalfYearly);
                        rptCard.Absent = rptCrdObj.PA1 == "ABS" || rptCrdObj.PA1 == "abs" ? rptCard.Absent + ",PA1" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.NoteBook1 == "ABS" || rptCrdObj.NoteBook1 == "abs" ? rptCard.Absent + ",NoteBook1" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.SEA1 == "ABS" || rptCrdObj.SEA1 == "abs" ? rptCard.Absent + ",SEA1" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.HalfYearly == "ABS" || rptCrdObj.HalfYearly == "abs" ? rptCard.Absent + ",HalfYearly" : rptCard.Absent;
                        rptCard.Term1Total = rptCard.PA1 + rptCard.NoteBook1 + rptCard.SEA1 + rptCard.HalfYearly;
                        rptCard.Term1Grade = GradeCalulationNew(Convert.ToDecimal(rptCard.Term1Total), "FA1");
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSENew(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.PA1) && !string.IsNullOrEmpty(rptCrdObj.NoteBook1) && !string.IsNullOrEmpty(rptCrdObj.SEA1) && !string.IsNullOrEmpty(rptCrdObj.HalfYearly))
                    {
                        ReportCardCBSENew newRptCard = new ReportCardCBSENew();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.PA1 = rptCrdObj.PA1 == "ABS" || rptCrdObj.PA1 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.PA1);
                        newRptCard.NoteBook1 = rptCrdObj.NoteBook1 == "ABS" || rptCrdObj.NoteBook1 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.NoteBook1);
                        newRptCard.SEA1 = rptCrdObj.SEA1 == "ABS" || rptCrdObj.SEA1 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SEA1);
                        newRptCard.HalfYearly = rptCrdObj.HalfYearly == "ABS" || rptCrdObj.HalfYearly == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.HalfYearly);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.PA1 == "ABS" || rptCrdObj.PA1 == "abs" ? newRptCard.Absent + ",PA1" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.NoteBook1 == "ABS" || rptCrdObj.NoteBook1 == "abs" ? newRptCard.Absent + ",NoteBook1" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.SEA1 == "ABS" || rptCrdObj.SEA1 == "abs" ? newRptCard.Absent + ",SEA1" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.HalfYearly == "ABS" || rptCrdObj.HalfYearly == "abs" ? newRptCard.Absent + ",HalfYearly" : newRptCard.Absent;
                        newRptCard.Term1Total = newRptCard.PA1 + newRptCard.NoteBook1 + newRptCard.SEA1 + newRptCard.HalfYearly;
                        newRptCard.Term1Grade = GradeCalulationNew(Convert.ToDecimal(newRptCard.Term1Total), "FA1");
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        //rptCrdObj.CreatedDate = DateTime.Now;
                        rptsvc.SaveOrUpdateRptCardForCBSENew(newRptCard);
                    }
                }
            }
            else { }
            return null;
        }

        public ActionResult SaveReportCardCBSEFA2New(ReportCardCBSETerm2 rptCrdObj)
        {
            TIPS.Entities.User Userobj = (TIPS.Entities.User)Session["objUser"];
            if (Userobj == null) return RedirectToAction("LogOff", "Account");
            if (rptCrdObj.Id != 0)
            {
                ReportCardService rptsvc = new ReportCardService();
                ReportCardCBSENew rptCard = rptsvc.GetReportCardCBSENewById(rptCrdObj.RptId);
                if (rptCard != null)
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.PA2) && !string.IsNullOrEmpty(rptCrdObj.NoteBook2) && !string.IsNullOrEmpty(rptCrdObj.SEA2) && !string.IsNullOrEmpty(rptCrdObj.AnnualExam))
                    {
                        rptCard.PA2 = rptCrdObj.PA2 == "ABS" || rptCrdObj.PA2 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.PA2);
                        rptCard.NoteBook2 = rptCrdObj.NoteBook2 == "ABS" || rptCrdObj.NoteBook2 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.NoteBook2);
                        rptCard.SEA2 = rptCrdObj.SEA2 == "ABS" || rptCrdObj.SEA2 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SEA2);
                        rptCard.AnnualExam = rptCrdObj.AnnualExam == "ABS" || rptCrdObj.AnnualExam == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.AnnualExam);

                        rptCard.Absent = rptCrdObj.PA2 == "ABS" || rptCrdObj.PA2 == "abs" ? rptCard.Absent + ",PA2" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.NoteBook2 == "ABS" || rptCrdObj.NoteBook2 == "abs" ? rptCard.Absent + ",NoteBook2" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.SEA2 == "ABS" || rptCrdObj.SEA2 == "abs" ? rptCard.Absent + ",SEA2" : rptCard.Absent;
                        rptCard.Absent = rptCrdObj.AnnualExam == "ABS" || rptCrdObj.AnnualExam == "abs" ? rptCard.Absent + ",AnnualExam" : rptCard.Absent;

                        rptCard.Term2Total = rptCard.PA2 + rptCard.NoteBook2 + rptCard.SEA2 + rptCard.AnnualExam;
                        rptCard.Term2Grade = GradeCalulationNew(Convert.ToDecimal(rptCard.Term2Total), "Scholastic");
                        rptCard.ModifiedDate = DateTime.Now;
                        rptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSENew(rptCard);
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(rptCrdObj.PA2) && !string.IsNullOrEmpty(rptCrdObj.NoteBook2) && !string.IsNullOrEmpty(rptCrdObj.SEA2) && !string.IsNullOrEmpty(rptCrdObj.AnnualExam))
                    {
                        ReportCardCBSENew newRptCard = new ReportCardCBSENew();
                        newRptCard.RptRequestId = rptCrdObj.RptRequestId;
                        newRptCard.PreRegNum = rptCrdObj.PreRegNum;
                        newRptCard.Name = rptCrdObj.Name;
                        newRptCard.Campus = rptCrdObj.Campus;
                        newRptCard.Grade = rptCrdObj.Grade;
                        newRptCard.Section = rptCrdObj.Section;
                        newRptCard.Subject = rptCrdObj.Subject;
                        newRptCard.AcademicYear = rptCrdObj.AcademicYear;
                        newRptCard.PA2 = rptCrdObj.PA2 == "ABS" || rptCrdObj.PA2 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.PA2);
                        newRptCard.NoteBook2 = rptCrdObj.NoteBook2 == "ABS" || rptCrdObj.NoteBook2 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.NoteBook2);
                        newRptCard.SEA2 = rptCrdObj.SEA2 == "ABS" || rptCrdObj.SEA2 == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.SEA2);
                        newRptCard.AnnualExam = rptCrdObj.AnnualExam == "ABS" || rptCrdObj.AnnualExam == "abs" ? 0 : Convert.ToDecimal(rptCrdObj.AnnualExam);
                        newRptCard.Absent = "";
                        newRptCard.Absent = rptCrdObj.PA2 == "ABS" || rptCrdObj.PA2 == "abs" ? newRptCard.Absent + ",PA2" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.NoteBook2 == "ABS" || rptCrdObj.NoteBook2 == "abs" ? newRptCard.Absent + ",NoteBook2" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.SEA2 == "ABS" || rptCrdObj.SEA2 == "abs" ? newRptCard.Absent + ",SEA2" : newRptCard.Absent;
                        newRptCard.Absent = rptCrdObj.AnnualExam == "ABS" || rptCrdObj.AnnualExam == "abs" ? newRptCard.Absent + ",AnnualExam" : newRptCard.Absent;
                        newRptCard.Term2Total = newRptCard.PA2 + newRptCard.NoteBook2 + newRptCard.SEA2 + newRptCard.AnnualExam;
                        newRptCard.Term2Grade = GradeCalulationNew(Convert.ToDecimal(newRptCard.Term2Total), "Scholastic");
                        newRptCard.CreatedDate = DateTime.Now;
                        newRptCard.CreatedBy = Userobj.UserId;
                        newRptCard.ModifiedDate = DateTime.Now;
                        newRptCard.ModifiedBy = Userobj.UserId;
                        rptsvc.SaveOrUpdateRptCardForCBSENew(newRptCard);
                    }
                }

            }
            else { }
            return null;
        }
        private string GradeCalulationNew(decimal TotalMrks, string state)
        {
            string RptGrade = "";
            if (state == "CoScholastic")
            {
                if (TotalMrks > Convert.ToDecimal(0.0) && TotalMrks <= Convert.ToDecimal(1.0))
                {
                    RptGrade = "E";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(1.0) && TotalMrks <= Convert.ToDecimal(2.0))
                {
                    RptGrade = "D";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(2.0) && TotalMrks <= Convert.ToDecimal(3.0))
                {
                    RptGrade = "C";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(3.0) && TotalMrks <= Convert.ToDecimal(4.0))
                {
                    RptGrade = "B";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(4.0) && TotalMrks <= Convert.ToDecimal(5.0))
                {
                    RptGrade = "A";
                    return RptGrade;
                }
                else { return RptGrade; }
            }
            else
            {
                if (TotalMrks > Convert.ToDecimal(90.0) && TotalMrks <= Convert.ToDecimal(100.0))
                {
                    RptGrade = "A1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(80.0) && TotalMrks <= Convert.ToDecimal(90.0))
                {
                    RptGrade = "A2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(70.0) && TotalMrks <= Convert.ToDecimal(80.0))
                {
                    RptGrade = "B1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(60.0) && TotalMrks <= Convert.ToDecimal(70.0))
                {
                    RptGrade = "B2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(50.0) && TotalMrks <= Convert.ToDecimal(60.0))
                {
                    RptGrade = "C1";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(40.0) && TotalMrks <= Convert.ToDecimal(50.0))
                {
                    RptGrade = "C2";
                    return RptGrade;
                }
                else if (TotalMrks > Convert.ToDecimal(32.0) && TotalMrks <= Convert.ToDecimal(40.0))
                {
                    RptGrade = "D";
                    return RptGrade;
                }
                else
                {
                    RptGrade = "E(Failed)";
                    return RptGrade;
                }
            }
        }
        public ActionResult ReportCardCBSEValidationNew(long PreRegNum, string AcademicYear, long ReqId)
        {
            ReportCardService rptCrdSrvc = new ReportCardService();
            Dictionary<string, object> criteria = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(AcademicYear) && ReqId > 0 && PreRegNum > 0)
            {
                criteria.Add("PreRegNum", PreRegNum);
                criteria.Add("RptRequestId", ReqId);
                criteria.Add("AcademicYear", AcademicYear);
                Dictionary<long, IList<ReportCardCBSENew>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSENewListWithCriteria(0, 99999, string.Empty, string.Empty, criteria);
                if (RptCrdCBSEMrkList != null && RptCrdCBSEMrkList.Count > 0 && RptCrdCBSEMrkList.FirstOrDefault().Key > 0 && RptCrdCBSEMrkList.FirstOrDefault().Value != null)
                    return Json("Success", JsonRequestBehavior.AllowGet);
                else
                    return Json("Failure", JsonRequestBehavior.AllowGet);
            }
            else
                return Json(null, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GenerateCBSERptCardPdfNew(long PreRegNum, string Terms)
        {
            try
            {
                string userId = base.ValidateUser();
                if (string.IsNullOrWhiteSpace(userId)) return RedirectToAction("LogOff", "Account");
                else
                {
                    ReportCardCBSEPrintViewNew RptCardList = CreateReportCardListNew(PreRegNum, Terms);
                    RptCardList.IsTerm = Terms;
                    IList<CampusEmailId> campusemaildet = GetEmailIdByCampus(RptCardList.Campus, ConfigurationManager.AppSettings["CampusEmailType"].ToString());
                    RptCardList.TipsName = campusemaildet.FirstOrDefault().SchoolName;
                    //TipsLogo(RptCardList, "TipsLogo.jpg", "logonace.jpg");
                    RptCardList.TipsLogo = ConfigurationManager.AppSettings["AddHeader"] + "TipsLogo.jpg";
                    RptCardList.TipsNaceLogo = ConfigurationManager.AppSettings["AddHeader"] + "logonace.jpg";
                    RptCardList.Address = campusemaildet.FirstOrDefault().Address;
                    return this.ViewPdf("ReportCard report", "PrintCBSEReportCard", RptCardList, "landscape", RptCardList.FileName);
                    //return this.ViewPdf("ReportCard report", "PrintCBSEReportCard", RptCardList, "landscape");
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "ReportCardPolicy");
                throw ex;
            }
        }

        public ReportCardCBSEPrintViewNew CreateReportCardListNew(long PreRegNum, string Terms)
        {
            ReportCardCBSEPrintViewNew RptCardList = new ReportCardCBSEPrintViewNew();
            AdmissionManagementService AMS = new AdmissionManagementService();
            MastersService MstSrv = new MastersService();
            ReportCardService rptCrdSrvc = new ReportCardService();
            Dictionary<string, object> criteria = new Dictionary<string, object>();
            StudentTemplate st = AMS.GetStudentDetailsByPreRegNo(PreRegNum);
            RptCardList.Name = st.Name != null ? st.Name : "";
            RptCardList.NewId = st.NewId != null ? st.NewId : "";
            RptCardList.Grade = st.Grade != null ? st.Grade : "";
            RptCardList.Section = st.Section;
            RptCardList.AcademicYear = st.AcademicYear;
            RptCardList.Campus = st.Campus;
            RptCardList.DOB = st.DOB;
            RptCardList.FatherName = "";
            RptCardList.MotherName = "";
            RptCardList.MobileNumber = "";
            criteria.Add("PreRegNum", st.PreRegNum);
            Dictionary<long, IList<FamilyDetails>> FatherFamilyDetailsList = AMS.GetFamilyDetailsListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            if (FatherFamilyDetailsList != null && FatherFamilyDetailsList.Count > 0 && FatherFamilyDetailsList.FirstOrDefault().Key > 0)
            {
                foreach (var item in FatherFamilyDetailsList.FirstOrDefault().Value)
                {
                    RptCardList.FatherName = item.FamilyDetailType == "Father" ? item.Name : RptCardList.FatherName;
                    RptCardList.MobileNumber = item.FamilyDetailType == "Father" ? item.Mobile : RptCardList.MobileNumber;
                    RptCardList.MotherName = item.FamilyDetailType == "Mother" ? item.Name : RptCardList.MotherName;
                }
            }
            RptCardList.Address = "";
            if (st.AddressDetailsList != null && st.AddressDetailsList.Count > 0)
            {
                foreach (var item in st.AddressDetailsList)
                {
                    RptCardList.Address = item.AddressType == "Primary Address" ? item.Add1 + item.Add2 + item.Add3 + "," + item.City + "-" + item.Pin : RptCardList.Address + ".";
                }
            }
            criteria.Clear();
            criteria.Add("Campus", RptCardList.Campus);
            criteria.Add("Grade", RptCardList.Grade);
            criteria.Add("Section", RptCardList.Section);
            criteria.Add("AcademicYear", RptCardList.AcademicYear);
            criteria.Add("Board", "CBSE");
            Dictionary<long, IList<CampusSubjectMaster>> SubjectMaster = MstSrv.GetSubjectMasterByCampusListWithPagingAndCriteria(0, 9999, string.Empty, string.Empty, criteria);
            criteria.Clear();
            criteria.Add("Campus", RptCardList.Campus);
            criteria.Add("Grade", RptCardList.Grade);
            criteria.Add("Section", RptCardList.Section);
            criteria.Add("AcademicYear", RptCardList.AcademicYear);
            Dictionary<long, IList<ReportCardRequest>> RptCrdRequest = rptCrdSrvc.GetReportCardRequestListWithPagingAndCriteria(0, 10, string.Empty, string.Empty, criteria);
            if (RptCrdRequest != null && RptCrdRequest.Count > 0 && RptCrdRequest.FirstOrDefault().Key > 0 && RptCrdRequest.FirstOrDefault().Value != null)
            {
                ReportCardRequest RptReq = RptCrdRequest.First().Value[0];
                RptCardList.TofWorkingDayT1 = RptReq.TofWorkingDayT1;
                RptCardList.TofWorkingDayT2 = RptReq.TofWorkingDayT2;
            }
            criteria.Add("PreRegNum", PreRegNum);
            Dictionary<long, IList<ReportCardCBSENew>> RptCrdCBSEMrkList = rptCrdSrvc.GetRptCardForCBSENewListWithCriteria(0, 99999, string.Empty, string.Empty, criteria);
            IEnumerable<string> Subjects = from p in RptCrdCBSEMrkList.FirstOrDefault().Value.ToList()
                                           where p.Campus == RptCardList.Campus && p.Grade == RptCardList.Grade && p.Section == RptCardList.Section && p.AcademicYear == RptCardList.AcademicYear
                                           orderby p.PreRegNum ascending
                                           select p.Subject;
            string[] Subjectarray = Subjects.ToArray();
            if (RptCrdCBSEMrkList != null && RptCrdCBSEMrkList.Count > 0 && RptCrdCBSEMrkList.FirstOrDefault().Key > 0 && RptCrdCBSEMrkList.FirstOrDefault().Value != null)
            {
                IList<ReportCardCBSENew> obj = new List<ReportCardCBSENew>();
                foreach (var item in SubjectMaster.FirstOrDefault().Value)
                {
                    if (Subjectarray.Contains(item.SubjectName) || item.SubjectName == "Language" && Subjectarray.Contains("Hindi") || item.SubjectName == "Language" && Subjectarray.Contains("French") || item.SubjectName == "Language" && Subjectarray.Contains("Tamil"))
                    {
                        List<ReportCardCBSENew> RptList = new List<ReportCardCBSENew>();
                        if (item.SubjectName == "Language" && Subjectarray.Contains("Hindi"))
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == "Hindi"
                                       select p).ToList();
                        }
                        else if (item.SubjectName == "Language" && Subjectarray.Contains("French"))
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == "French"
                                       select p).ToList();
                        }
                        else if (item.SubjectName == "Language" && Subjectarray.Contains("Tamil"))
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == "Tamil"
                                       select p).ToList();
                        }
                        else
                        {
                            RptList = (from p in RptCrdCBSEMrkList.FirstOrDefault().Value
                                       where p.Subject == item.SubjectName
                                       select p).ToList();
                        }
                        if (RptList.Count != 0)
                        {
                            ReportCardCBSENew RptCrdSubjectMarks = new ReportCardCBSENew();
                            RptCrdSubjectMarks.PA1 = RptList[0].PA1;
                            RptCrdSubjectMarks.PA2 = RptList[0].PA2;
                            RptCrdSubjectMarks.NoteBook1 = RptList[0].NoteBook1;
                            RptCrdSubjectMarks.NoteBook2 = RptList[0].NoteBook2;
                            RptCrdSubjectMarks.SEA1 = RptList[0].SEA1;
                            RptCrdSubjectMarks.SEA2 = RptList[0].SEA2;
                            RptCrdSubjectMarks.HalfYearly = RptList[0].HalfYearly;
                            RptCrdSubjectMarks.AnnualExam = RptList[0].AnnualExam;
                            RptCrdSubjectMarks.Term1Grade = RptList[0].Term1Grade;
                            RptCrdSubjectMarks.Term2Grade = RptList[0].Term2Grade;
                            RptCrdSubjectMarks.Term1Total = RptList[0].Term1Total;
                            RptCrdSubjectMarks.Term2Total = RptList[0].Term2Total;
                            RptCrdSubjectMarks.T1T2Total = (RptList[0].Term1Total + RptList[0].Term2Total) / 2;
                            RptCrdSubjectMarks.T1T2Grade = GradeCalulationNew(Convert.ToDecimal(RptCrdSubjectMarks.T1T2Total), "Scholastic");
                            RptCrdSubjectMarks.Subject = item.SubjectName;
                            obj.Add(RptCrdSubjectMarks);
                        }
                    }
                    else
                    {
                        ReportCardCBSENew RptCrdSubjectOnly = new ReportCardCBSENew();
                        RptCrdSubjectOnly.Subject = item.SubjectName;
                        obj.Add(RptCrdSubjectOnly);
                    }
                }
                RptCardList.RptCardObjList = obj;
            }
            criteria.Clear();
            criteria.Add("Campus", RptCardList.Campus);
            criteria.Add("Grade", RptCardList.Grade);
            criteria.Add("AcademicYear", RptCardList.AcademicYear);
            Dictionary<long, IList<CoSch_Item_Vw>> RptCrdCoSchMasterList = rptCrdSrvc.GetRptCardCosch_ItemListWithPagingAndCriteria(0, 99999, string.Empty, string.Empty, criteria);
            if (RptCrdCoSchMasterList != null && RptCrdCoSchMasterList.Count > 0 && RptCrdCoSchMasterList.FirstOrDefault().Key > 0 && RptCrdCoSchMasterList.FirstOrDefault().Value != null)
            {
                foreach (CoSch_Item_Vw CoSchItem in RptCrdCoSchMasterList.FirstOrDefault().Value)
                {
                    CoSchItem.CoSchGrade = rptCrdSrvc.GetCoSchGradeByPreRegNum(st.PreRegNum, CoSchItem.CoSchCriteriaCode + "_Grade", Terms);
                }
                RptCardList.RptCardCoSchObjList = RptCrdCoSchMasterList.FirstOrDefault().Value;
                RptCardList.TitleName = (from p in RptCrdCoSchMasterList.FirstOrDefault().Value.ToList()
                                         //orderby p.CoScholasticCode ascending
                                         select p.CoScholasticSection + " : " + p.CoScholasticName).Distinct().ToArray();
                RptCardList.CoSchName = (from p in RptCrdCoSchMasterList.FirstOrDefault().Value.ToList()
                                         //orderby p.CoScholasticCode ascending
                                         select p.CoScholasticName).Distinct().ToArray();
            }
            ReportCardCBSECommon RptCmnObj = rptCrdSrvc.GetReportCardCBSECommon(st.PreRegNum, st.AcademicYear);
            if (RptCmnObj != null)
            {
                RptCardList.TotalAttendenceT1 = RptCmnObj.TotalAttendenceT1;
                RptCardList.TotalAttendenceT2 = RptCmnObj.TotalAttendenceT2;
                RptCardList.WeightT1 = RptCmnObj.WeightT1;
                RptCardList.WeightT2 = RptCmnObj.WeightT2;
                RptCardList.HeightT1 = RptCmnObj.HeightT1;
                RptCardList.HeightT2 = RptCmnObj.HeightT2;
            }
            RptCardList.FileName = st.NewId + "_" + st.Grade + "_" + st.Section + "_ReportCard";
            return RptCardList;
        }
        #endregion
    }
}